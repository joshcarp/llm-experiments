
func longestConsecutive:num nums:[]num
    nums := set nums
    maxLen := 0
    while (len nums) > 0
        n := nums[0]
        nums = nums[1:]
        i := n + 1
        l1 := 0
        l2 := 0
        while has nums i
            nums = remove nums i
            i = i + 1
            l1 = l1 + 1
        end
        i = n - 1
        while has nums i
            nums = remove nums i
            i = i - 1
            l2 = l2 + 1
        end
        maxLen = max maxLen (l1 + l2 + 1)
    end
    return maxLen
end

func set:{}bool nums:[]num
    result:{}bool
    for n := range nums
        result[sprint n] = true
    end
    return result
end

func remove:[]num nums:[]num elem:num
    result:[]num
    for n := range nums
        if n != elem
            result = result + [n]
        end
    end
    return result
end

func test
    assert 4 (longestConsecutive [100 4 200 1 3 2])
    assert 9 (longestConsecutive [0 3 7 2 5 8 4 6 0 1])
end
test
// output:
//line 3 column 5: redeclaration of "nums"
//line 11 column 19: "has" takes 1st argument of type {}, found []num
//line 11 column 24: "has" takes 2nd argument of type string, found num
//line 17 column 19: "has" takes 1st argument of type {}, found []num
//line 17 column 24: "has" takes 2nd argument of type string, found num
