
func Node:{}any
    self:{}any
    self.data := 0
    self.rank := 0
    self.parent := self
    return self
end

func makeSet x:{}any
    x.rank = 0
    x.parent = x
end

func unionSet x:{}any y:{}any
    x = findSet x
    y = findSet y
    if x == y
        return
    end
    if x.rank > y.rank
        y.parent = x
    else
        x.parent = y
        if x.rank == y.rank
            y.rank = y.rank + 1
        end
    end
end

func findSet x:{}any
    if x != x.parent
        x.parent = findSet x.parent
    end
    return x.parent
end

func findPythonSet node:{}any
    sets := ({0 1 2} {3 4 5})
    for s := range sets
        if (has s node.data)
            return s
        end
    end
    msg := sprintf "%v is not in %v" node.data sets
    panic msg
end

func testDisjointSet
    vertex := []
    for i := range 6
        vertex = vertex + [(Node i)]
    end
    for v := range vertex
        makeSet v
    end
    unionSet vertex[0] vertex[1]
    unionSet vertex[1] vertex[2]
    unionSet vertex[3] vertex[4]
    unionSet vertex[3] vertex[5]
    for node0 := range vertex
        for node1 := range vertex
            if (findPythonSet node0).isdisjoint (findPythonSet node1)
                assert (findSet node0) != (findSet node1)
            else
                assert (findSet node0) == (findSet node1)
            end
        end
    end
end
test

testDisjointSet
