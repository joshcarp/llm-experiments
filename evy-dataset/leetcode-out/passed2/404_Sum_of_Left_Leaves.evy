
func TreeNode:{}any
    self:{}any
    self.val = 0
    self.left = (TreeNode)
    self.right = (TreeNode)
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func sumOfLeftLeaves:num self:{}any root:{}any
    stack := [root]
    res := 0
    while (len stack) > 0
        curr:{}any
        curr = stack[0].({}any)
        stack = stack[1:]
        if curr != {}
            if curr.left != {}
                if curr.left.left == {} and curr.left.right == {}
                    res = res + curr.left.val
                end
            end
            stack = stack + [curr.right]
            stack = stack + [curr.left]
        end
    end
    return res
end

func test
    root := (TreeNode)
    root.val = 3
    root.left = (TreeNode)
    root.left.val = 9
    root.right = (TreeNode)
    root.right.val = 20
    root.left.left = (TreeNode)
    root.left.left.val = 15
    root.left.right = (TreeNode)
    root.left.right.val = 7
    root.right.left = (TreeNode)
    root.right.left.val = 15
    root.right.right = (TreeNode)
    root.right.right.val = 7
    sol := (Solution)
    assert 24 (sumOfLeftLeaves sol root)
end
test
