//Reverse a linked list in groups of k

func reverseKGroup:any head:any k:num
    dummy := {next:head}
    groupPrev := dummy
    while true
        kth := groupPrev
        for i := 0; i < k and kth.next != {}
            kth = kth.next
            i = i + 1
        end
        if kth.next == {}
            break
        end
        groupNext := kth.next
        prev := kth.next
        curr := groupPrev.next
        for i := 0; i < k; i = i + 1
            tmp := curr.next
            curr.next = prev
            prev = curr
            curr = tmp
        end
        tmp := groupPrev.next
        groupPrev.next = kth
        groupPrev = tmp
        groupPrev.next = groupNext
    end
    return dummy.next
end

    head := {val:1 next:{val:2 next:{val:3 next:{val:4 next:{val:5 next:{}}}}}
    k := 2
    result := reverseKGroup head k
    assert 2 (result.val)
    assert 1 (result.next.val)
    assert 4 (result.next.next.val)
    assert 3 (result.next.next.next.val)
    assert 5 (result.next.next.next.next.val)

