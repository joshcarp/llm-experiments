// 208. Implement Trie (Prefix Tree)
// Solved
// Medium
// Topics
// Companies
// A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.
// Implement the Trie class:
// Trie() Initializes the trie object.
// void insert(String word) Inserts the string word into the trie.
// boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
// boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.
// Example 1:
// Input
// ["Trie", "insert", "search", "search", "startsWith", "insert", "search"]
// [[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]
// Output
// [null, null, true, false, true, null, true]
// Explanation
// Trie trie = new Trie();
// trie.insert("apple");
// trie.search("apple");   // return True
// trie.search("app");     // return False
// trie.startsWith("app"); // return True
// trie.insert("app");
// trie.search("app");     // return True
// Constraints:
// 1 <= word.length, prefix.length <= 2000
// word and prefix consist only of lowercase English letters.
// At most 3 * 104 calls in total will be made to insert, search, and startsWith.

func Node:{}any
    self:{}any
    self.next = {}
    self.isend = false
    return self
end

func Trie:{}any
    self:{}any
    self.data = (Node)
    return self
end

func insert self:{}any word:string
    node:{}any
    node = self.data.({}any)
    for ch := range word
        next := node.next.({}any)
        if !(has next ch)
            next[ch] = (Node)
        end
        node = next[ch].({}any)
    end
    node.isend = true
end

func search:bool self:{}any word:string
    node:{}any
    node = self.data.({}any)
    for ch := range word
        next := node.next.({}any)
        if !(has next ch)
            return false
        end
        node = next[ch].({}any)
    end
    return node.isend.(bool)
end

func startsWith:bool self:{}any prefix:string
    node:{}any
    node = self.data.({}any)
    for ch := range prefix
        next := node.next.({}any)
        if !(has next ch)
            return false
        end
        node = next[ch].({}any)
    end
    return true
end

func test
    trie := (Trie)
    insert trie "apple"
    assertEqual true (search trie "apple")
    assertEqual false (search trie "app")
    assertEqual true (startsWith trie "app")
    insert trie "app"
    assertEqual true (search trie "app")
end
