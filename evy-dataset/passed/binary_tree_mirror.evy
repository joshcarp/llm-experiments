
// Problem Description:
// Given a binary tree, return its mirror.

func binaryTreeMirrorDict:{}any binaryTreeMirrorDictionary:{}any root:num
    if root == 0 or !(has binaryTreeMirrorDictionary root)
        return
    end
    leftChild := binaryTreeMirrorDictionary[root][0]
    rightChild := binaryTreeMirrorDictionary[root][1]
    binaryTreeMirrorDictionary[root] = [rightChild leftChild]
    binaryTreeMirrorDict binaryTreeMirrorDictionary leftChild
    binaryTreeMirrorDict binaryTreeMirrorDictionary rightChild
end

func binaryTreeMirror:{}any binaryTree:{}any root:num=1
    if binaryTree == {}
        raise "binary tree cannot be empty"
    end
    if !(has binaryTree root)
        raise sprintf "root %v is not present in the binary_tree" root
    end
    binaryTreeMirrorDictionary := {}
    for key := range binaryTree
        binaryTreeMirrorDictionary[key] = binaryTree[key]
    end
    binaryTreeMirrorDict binaryTreeMirrorDictionary root
    return binaryTreeMirrorDictionary
end

func test
    binaryTree := {1:[2 3] 2:[4 5] 3:[6 7] 7:[8 9]}
    print (sprintf "Binary tree: %v\n" binaryTree)
    binaryTreeMirrorDictionary := binaryTreeMirror binaryTree 5
    print (sprintf "Binary tree mirror: %v\n" binaryTreeMirrorDictionary)
end
test
