
func fibonacci:num k:num
    if k < 0
        raise "k integer must be greater or equal to zero."
    end
    if k == 0
        return 0
    end
    if k == 1
        return 1
    end
    return (fibonacci k-1) + (fibonacci k-2)
end

func fibonacci_search:num arr:[]any val:any
    len_list := len arr
    i := 0
    while true
        if (fibonacci i) >= len_list
            fibb_k := i
            break
        end
        i = i + 1
    end
    offset := 0
    while fibb_k > 0
        index_k := min (offset + (fibonacci fibb_k-1)) (len_list - 1)
        item_k_1 := arr[index_k]
        if item_k_1 == val
            return index_k
        end
        if val < item_k_1
            fibb_k = fibb_k - 1
        else
            offset = offset + (fibonacci fibb_k-1)
            fibb_k = fibb_k - 2
        end
    end
    return -1
end

func test
    assert 0 (fibonacci 0)
    assert 1 (fibonacci 2)
    assert 5 (fibonacci 5)
    assert 610 (fibonacci 15)
    assert 0 (fibonacci_search [4 5 6 7] 4)
    assert -1 (fibonacci_search [4 5 6 7] -10)
    assert 0 (fibonacci_search [-18 2] -18)
    assert 0 (fibonacci_search [5] 5)
    assert 1 (fibonacci_search ["a" "c" "d"] "c")
    assert -1 (fibonacci_search ["a" "c" "d"] "f")
    assert -1 (fibonacci_search [] 1)
    assert 1 (fibonacci_search [.1 .4 7] .4)
    assert -1 (fibonacci_search [] 9)
    assert 63 (fibonacci_search (list range 100) 63)
    assert 99 (fibonacci_search (list range 100) 99)
    assert 1 (fibonacci_search (list range -100 100 3) -97)
    assert -1 (fibonacci_search (list range -100 100 3) 0)
    assert 20 (fibonacci_search (list range -100 100 5) 0)
    assert 39 (fibonacci_search (list range -100 100 5) 95)
end
test
