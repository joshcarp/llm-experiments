
func lcs:string a:string b:string
    m := len a
    n := len b
    dp := [][]int m+1 n+1
    for i := range m+1
        dp[i][0] = 0
    end
    for j := range n+1
        dp[0][j] = 0
    end
    for i := range 1 m+1
        for j := range 1 n+1
            if a[i - 1] == b[j - 1]
                dp[i][j] = dp[i - 1][j - 1] + 1
            else
                dp[i][j] = max (dp[i - 1][j] dp[i][j - 1])
            end
        end
    end
    result:string
    i := m
    j := n
    while i > 0 and j > 0
        if a[i - 1] == b[j - 1]
            result = a[i - 1] + result
            i = i - 1
            j = j - 1
        else
            if dp[i - 1][j] > dp[i][j - 1]
                i = i - 1
            else
                j = j - 1
            end
        end
    end
    return result
end

func max:num a:num b:num
    if a > b
        return a
    else
        return b
    end
end

assert "abcd" (lcs "abcd" "efabcd")
assert "abc" (lcs "abc" "defabc")
assert "0" (lcs "0" "0")
assert "0123" (lcs "0123" "0123")
assert "012" (lcs "0123" "012")
assert "01" (lcs "0123" "01")
assert "" (lcs "0123" "")
assert "" (lcs "" "0123")
assert "" (lcs "" "")

     
