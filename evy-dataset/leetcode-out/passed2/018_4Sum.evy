
func fourSum:[]num nums:[]num target:num
    sort_nums := nums[:]
    sort sort_nums
    ls := len nums
    res := {}
    pairs := {}
    for i := range ls - 3
        for j := range i + 1 (ls - 2)
            res_2 := sort_nums[i] + sort_nums[j]
            if has pairs (target - res_2)
                pairs[target - res_2] = pairs[target - res_2] + [[i j]]
            else
                pairs[target - res_2] = [[i j]]
            end
        end
    end
    for key := range pairs
        temp := pairs[key]
        for pair := range temp
            j := pair[1] + 1
            k := ls - 1
            while j < k
                current := sort_nums[j] + sort_nums[k]
                if current == key
                    result := [sort_nums[pair[0]] sort_nums[pair[1]] sort_nums[j] sort_nums[k]]
                    res[sprintf "%v" result] = true
                    j = j + 1
                else if current < key
                    j = j + 1
                else
                    k = k - 1
                end
            end
        end
    end
    resultArr:[]num
    for key := range res
        resultArr = resultArr + [str2num key]
    end
    return resultArr
end

func sort arr:[]num
    // bubble sort
    for endIdx := range (len arr)-1 0 -1
        for i := range endIdx
            if arr[i] > arr[i + 1]
                tmp := arr[i]
                arr[i] = arr[i + 1]
                arr[i + 1] = tmp
            end
        end
    end
end

func test
    print (fourSum [0 0 0 0] 0)
end
test
