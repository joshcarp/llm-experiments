
func LRUCache:{}any capacity:num
    self:{}any
    self.capacity = capacity
    self.cache = {}
    self.queue = []
    return self
end

func updateQueue self:{}any key:any
    self.queue = remove self.queue key
    self.queue = self.queue + [key]
end

func get:num self:{}any key:any
    if has self.cache (sprint key)
        self.updateQueue key
        return self.cache[sprint key]
    else
        return -1
    end
end

func put self:{}any key:any value:any
    if has self.cache (sprint key)
        self.queue = remove self.queue key
    else if (len self.queue) == self.capacity
        del self.cache[self.queue[-1]]
    end
    self.cache[sprint key] = value
    self.queue = self.queue + [key]
end

func test
    cache := (LRUCache 2)
    assert -1 (get cache 1)
    put cache 1 1
    put cache 2 2
    assert 1 (get cache 1)
    put cache 3 3
    assert -1 (get cache 2)
    assert 3 (get cache 3)
end

func remove:[]any arr:[]any key:any
    result:[]any
    for i := range arr
        if arr[i] != key
            result = result + [arr[i]]
        end
    end
    return result
end

test
