
func Logger:{}any
    self:{}any
    self.heap := []
    self.cache := {}
    return self
end

func shouldPrintMessage:bool self:{}any timestamp:num message:string
    while (len self.heap) > 0
        if self.heap[0][0] <= timestamp
            temp:any
            temp = heapq.heappop self.heap
            del self.cache temp[1]
        else
            break
        end
    end
    if timestamp < self.cache[message]
        return false
    end
    self.cache[message] = timestamp + 10
    heapq.heappush self.heap [timestamp + 10 message]
    return true
end

func test
    logger := (Logger)
    assert true (shouldPrintMessage logger 1 "foo")
    assert false (shouldPrintMessage logger 1 "bar")
    assert true (shouldPrintMessage logger 1 "foo")
    assert true (shouldPrintMessage logger 9 "foo")
    assert false (shouldPrintMessage logger 10 "foo")
end

func heapq:{}any
    self:{}any
    return self
end

func heappush self:{}any item:any
    self.heap = self.heap + [item]
    heapify self
end

func heappop self:{}any
    if (len self.heap) == 0
        return {}
    end
    result := self.heap[0]
    self.heap = self.heap[1:]
    heapify self
    return result
end

func heapify self:{}any
    n := (len self.heap)
    for i := range (floor (n/2) - 1) -1 -1
        heapify_down self i n
    end
end

func heapify_down self:{}any i:num n:num
    while (2 * i + 1) < n
        j := 2 * i + 1
        if (2 * i + 2) < n and self.heap[2 * i + 2][0] < self.heap[2 * i + 1][0]
            j = 2 * i + 2
        end
        if self.heap[i][0] > self.heap[j][0]
            tmp := self.heap[i]
            self.heap[i] = self.heap[j]
            self.heap[j] = tmp
            i = j
        else
            break
        end
    end
end

test
// output:
//line 4 column 15: expected "=", got ":="
//line 5 column 16: expected "=", got ":="
//line 11 column 21: only array, string and map type can be indexed, found any
//line 13 column 25: unexpected "."
//line 13 column 25: expected end of line, found "."
//line 14 column 32: only array, string and map type can be indexed, found any
//line 14 column 33: "del" takes 2 arguments, found 0
//line 14 column 33: expected end of line, found 1
//line 19 column 30: only array, string and map type can be indexed, found any
//line 22 column 15: only array, string and map type can be indexed, found any
//line 23 column 5: cannot assign to "heapq" as it is a function not a variable
//line 9 column 55: "message" declared but not used
//line 42 column 27: mismatched type for +: any, []any
//line 48 column 16: expected no return value, found {}
//line 50 column 24: only array, string and map type can be indexed, found any
//line 50 column 25: invalid inferred declaration for "result"
//line 51 column 26: only array, string and map type can be indexed, found any
//line 53 column 12: unknown variable name "result"
//line 53 column 12: expected no return value, found ILLEGAL
//line 58 column 33: unexpected whitespace after "-"
//line 58 column 35: "floor" takes 1 argument, found 0
//line 58 column 35: expected ")", got ""
//line 58 column 35: range cannot be empty
//line 58 column 35: unexpected input 1
//line 59 column 27: unknown variable name "i"
//line 59 column 29: "heapify_down" takes 3 arguments, found 0
//line 59 column 29: expected end of line, found n
//line 61 column 1: unexpected input "end"
//line 66 column 41: only array, string and map type can be indexed, found any
//line 69 column 21: only array, string and map type can be indexed, found any
//line 70 column 29: only array, string and map type can be indexed, found any
//line 70 column 30: invalid inferred declaration for "tmp"
//line 71 column 22: only array, string and map type can be indexed, found any
//line 72 column 22: only array, string and map type can be indexed, found any
