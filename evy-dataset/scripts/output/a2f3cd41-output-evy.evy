
func paths:num start:num end:num product:num length:num graph:map[num][][]
    if start == end and length == 0 and product == 1
        return 1
    else
        return 0
    end
end

func countPaths:num start:num end:num product:num length:num graph:map[num][][]
    if start == end and length == 0 and product == 1
        return 1
    else
        return 0
    end
end

func test
    graph := {0:[[1 1] [2 1]] 1:[[2 1]] 2:[]}
    assert 1 (paths 0 2 1 1 graph)
    assert 0 (paths 0 2 2 1 graph)
    assert 1 (paths 0 2 1 2 graph)
    assert 0 (paths 0 2 2 2 graph)
    assert 0 (paths 0 2 1 3 graph)
    assert 0 (paths 0 2 2 3 graph)
    assert 0 (paths 0 1 1 1 graph)
    assert 0 (paths 0 1 2 1 graph)
    assert 0 (paths 0 1 1 2 graph)
    assert 0 (paths 0 1 2 2 graph)
    assert 0 (paths 0 1 1 3 graph)
    assert 0 (paths 0 1 2 3 graph)
end
     

test
