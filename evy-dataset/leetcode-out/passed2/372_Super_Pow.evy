
func Solution:{}any
    self:{}any
    self.base := 1337
    return self
end

func superPow:num self:{}any a:num b:[]num
    if b == []
        return 1
    end
    lastDigit := b[-1]
    b = b[:-1]
    return (self.powmod (self.superPow a b) 10) * (self.powmod a lastDigit) % self.base
end

func powmod:num self:{}any a:num k:num
    a = a % self.base
    result := 1
    for range k
        result = (result * a) % self.base
    end
    return result
end

func test
    sol := (Solution)
    assert 1 (sol.superPow 2 [])
    assert 1 (sol.superPow 2 [0])
    assert 1024 (sol.superPow 2 [1 0])
    assert 1 (sol.superPow 2 [1 0 0])
    assert 1224 (sol.superPow 2 [1 0 1])
    assert 1 (sol.superPow 2 [1 0 0 0])
    assert 1024 (sol.superPow 2 [1 0 0 1])
    assert 1224 (sol.superPow 2 [1 0 1 0])
    assert 1 (sol.superPow 2 [1 0 0 0 0])
    assert 1024 (sol.superPow 2 [1 0 0 0 1])
    assert 1224 (sol.superPow 2 [1 0 0 1 0])
    assert 1 (sol.superPow 2 [1 0 1 0 0])
    assert 1024 (sol.superPow 2 [1 0 1 0 1])
    assert 1224 (sol.superPow 2 [1 0 1 1 0])
    assert 1 (sol.superPow 2 [1 0 0 0 0 0])
    assert 1024 (sol.superPow 2 [1 0 0 0 0 1])
    assert 1224 (sol.superPow 2 [1 0 0 0 1 0])
    assert 1 (sol.superPow 2 [1 0 0 1 0 0])
    assert 1024 (sol.superPow 2 [1 0 0 1 0 1])
    assert 1224 (sol.superPow 2 [1 0 0 1 1 0])
    assert 1 (sol.superPow 2 [1 0 1 0 0 0])
    assert 1024 (sol.superPow 2 [1 0 1 0 0 1])
    assert 1224 (sol.superPow 2 [1 0 1 0 1 0])
    assert 1 (sol.superPow 2 [1 0 1 1 0 0])
    assert 1024 (sol.superPow 2 [1 0 1 1 0 1])
    assert 1224 (sol.superPow 2 [1 0 1 1 1 0])
end
