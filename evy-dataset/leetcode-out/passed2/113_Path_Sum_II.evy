
func TreeNode:{}any
    self:{}any
    self.val = 0
    self.left = {}
    self.right = {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func pathSum self:{}any root:{}any sum:num
    res := []
    if root == {}
        return res
    end
    if sum == root.val.(num) and root.left == {} and root.right == {}
        res = res + [[root.val.(num)]]
        return res
    end
    leftRes := self.pathSum root.left.(any) (sum - root.val.(num))
    rightRes := self.pathSum root.right.(any) (sum - root.val.(num))
    for t := range leftRes
        res = res + [[root.val.(num)] + t]
    end
    for t := range rightRes
        res = res + [[root.val.(num)] + t]
    end
    return res
end

func test
    root := (TreeNode)
    root.val = 5
    root.left = (TreeNode)
    root.left.val = 4
    root.left.left = (TreeNode)
    root.left.left.val = 11
    root.left.left.left = (TreeNode)
    root.left.left.left.val = 7
    root.left.left.right = (TreeNode)
    root.left.left.right.val = 2
    root.left.right = (TreeNode)
    root.left.right.val = 8
    root.left.right.left = (TreeNode)
    root.left.right.left.val = 13
    root.left.right.right = (TreeNode)
    root.left.right.right.val = 4
    root.right = (TreeNode)
    root.right.val = 8
    root.right.left = (TreeNode)
    root.right.left.val = 13
    root.right.left.left = (TreeNode)
    root.right.left.left.val = 5
    root.right.left.right = (TreeNode)
    root.right.left.right.val = 1
    root.right.right = (TreeNode)
    root.right.right.val = 4
    root.right.right.right = (TreeNode)
    root.right.right.right.val = 4
    sol := (Solution)
    assert [[5 4 11 2] [5 8 4 5]] (sol.pathSum root 22)
end
test
