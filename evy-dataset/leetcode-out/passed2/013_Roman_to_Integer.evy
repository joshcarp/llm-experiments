
func romanToInt:num s:string
    roman := {I:1 V:5 X:10 L:50 C:100 D:500 M:1000}
    prev := 0
    total := 0
    for i := range (len s)
        c := s[i]
        curr := roman[c]
        total = total + curr
        if curr > prev
            total = total - (2 * prev)
        end
        prev = curr
    end
    return total
end

func test
    assert 1 (romanToInt "I")
    assert 4 (romanToInt "IV")
    assert 9 (romanToInt "IX")
    assert 58 (romanToInt "LVIII")
    assert 1994 (romanToInt "MCMXCIV")
end
test
```

The issue was in the `for` loop. In Evy, the `for` loop iterates over the indices of the string, not the characters themselves. So, we need to use `s[i]` to access the character at index `i`. 

Here's the breakdown of the changes:

1. **`for i := range (len s)`:** This line now iterates over the indices of the string `s`.
2. **`c := s[i]`:** We use `s[i]` to get the character at index `i` and assign it to the variable `c`.

With these changes, the code now correctly iterates through the characters of the Roman numeral string and calculates the corresponding integer value. 
