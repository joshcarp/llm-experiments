
func StackOverflowError:{}any
    self:{}any
    return self
end

func StackUnderflowError:{}any
    self:{}any
    return self
end

func Stack:{}any [T]
    self:{}any
    self.stack := []
    self.limit := 10
    return self
end

func __bool__ self:{}any [T]:bool
    return (len self.stack) > 0
end

func __str__ self:{}any [T]:string
    return sprintf "%v" self.stack
end

func push self:{}any [T] data:T
    if (len self.stack) >= self.limit
        raise (StackOverflowError)
    end
    self.stack = self.stack + [data]
end

func pop self:{}any [T]:T
    if (len self.stack) == 0
        raise (StackUnderflowError)
    end
    return self.stack[:-1]
end

func peek self:{}any [T]:T
    if (len self.stack) == 0
        raise (StackUnderflowError)
    end
    return self.stack[-1]
end

func isEmpty self:{}any [T]:bool
    return (len self.stack) == 0
end

func isFull self:{}any [T]:bool
    return (len self.stack) == self.limit
end

func size self:{}any [T]:num
    return (len self.stack)
end

func __contains__ self:{}any [T] item:T:bool
    return item in self.stack
end

func testStack
    stack := (Stack [num])
    assert false==(stack.__bool__())
    assert true==(stack.isEmpty())
    assert false==(stack.isFull())
    assert "[]"==(stack.__str__())
    try
        _ := stack.pop()
        raise AssertionError
    catch StackUnderflowError
        assert true
    end
    try
        _ := stack.peek()
        raise AssertionError
    catch StackUnderflowError
        assert true
    end
    for i := range 10
        assert i==(stack.size())
        stack.push i
    end
    assert true==(stack.__bool__())
    assert false==(stack.isEmpty())
    assert true==(stack.isFull())
    assert sprintf "%v" (range 10)==(stack.__str__())
    assert 9==(stack.pop())
    assert 8==(stack.peek())
    stack.push 100
    assert sprintf "%v" [0 1 2 3 4 5 6 7 8 100]==(stack.__str__())
    try
        stack.push 200
        raise AssertionError
    catch StackOverflowError
        assert true
    end
    assert false==(stack.isEmpty())
    assert 10==(stack.size())
    assert true==(5 in stack)
    assert false==(55 in stack)
end
test

testStack

