
func ListNode:{}any
    self:{}any
    self.val = 0
    self.next = {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func oddEvenList self:{}any head:{}any
    odd := head
    if head == {}
        return
    end
    if head.next == {}
        return
    end
    evenHead := head.next
    even := evenHead
    while odd.next != {} and even.next != {}
        odd.next = even.next
        odd = odd.next
        even.next = odd.next
        even = even.next
    end
    odd.next = evenHead
end

func test
    head := (ListNode)
    head.val = 1
    head.next = (ListNode)
    head.next.val = 2
    head.next.next = (ListNode)
    head.next.next.val = 3
    head.next.next.next = (ListNode)
    head.next.next.next.val = 4
    head.next.next.next.next = (ListNode)
    head.next.next.next.next.val = 5
    solution := (Solution)
    oddEvenList solution head
    assert 1 (head.val)
    assert 3 (head.next.val)
    assert 5 (head.next.next.val)
    assert 2 (head.next.next.next.val)
    assert 4 (head.next.next.next.next.val)
end
test
