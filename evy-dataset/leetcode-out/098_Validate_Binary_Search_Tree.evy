
func TreeNode:{}any
    self:{}any
    self.val := 0
    self.left := {}
    self.right := {}
    return self
end

func isValidBST:bool root:{}any
    return isVaildHelper root -2147483648 2147483647
end

func isVaildHelper:bool root:{}any minVal:num maxVal:num
    if root == {}
        return true
    end
    if root.val >= maxVal or root.val <= minVal
        return false
    end
    return isVaildHelper root.left minVal root.val and isVaildHelper root.right root.val maxVal
end

func test
    root := (TreeNode)
    root.val = 5
    root.left = (TreeNode)
    root.left.val = 1
    root.right = (TreeNode)
    root.right.val = 4
    root.left.left = (TreeNode)
    root.left.left.val = 0
    root.left.right = (TreeNode)
    root.left.right.val = 3
    root.right.left = (TreeNode)
    root.right.left.val = 2
    root.right.right = (TreeNode)
    root.right.right.val = 6
    assert true==(isValidBST root)
end
test
// output:
//line 4 column 14: expected "=", got ":="
//line 5 column 15: expected "=", got ":="
//line 6 column 16: expected "=", got ":="
//line 18 column 17: mismatched type for >=: any, num
//line 18 column 39: mismatched type for <=: any, num
//line 21 column 52: unexpected whitespace before "and"
//line 21 column 52: "isVaildHelper" takes 3 arguments, found 0
//line 21 column 52: expected end of line, found "and"
//line 28 column 14: field access with "." expects map type, found any
//line 30 column 15: field access with "." expects map type, found any
//line 31 column 14: field access with "." expects map type, found any
//line 32 column 14: field access with "." expects map type, found any
//line 33 column 14: field access with "." expects map type, found any
//line 34 column 14: field access with "." expects map type, found any
//line 35 column 15: field access with "." expects map type, found any
//line 36 column 15: field access with "." expects map type, found any
//line 37 column 15: field access with "." expects map type, found any
//line 38 column 15: field access with "." expects map type, found any
