
func Node:{}any
    self:{}any
    self.data := 0
    self.next_node := {}any
    return self
end

func SortedLinkedList:{}any ints:[]num
    self:{}any
    self.head := {}any
    for i := range (len ints)-1 -1 -1
        self.head = (Node (ints[i]) self.head)
    end
    return self
end

func __iter__:Iterator[num] self:{}any
    node:{}any
    node = self.head.({}any)
    while node != {}
        yield node.data.(num)
        node = node.next_node.({}any)
    end
end

func __len__:num self:{}any
    count := 0
    for _ := range self
        count = count + 1
    end
    return count
end

func __str__:string self:{}any
    result:string
    for node := range self
        result = result + (sprint node) + " -> "
    end
    return result[:-4]
end

func merge_lists:SortedLinkedList sll_one:SortedLinkedList sll_two:SortedLinkedList
    return (SortedLinkedList (sll_one[:] + sll_two[:]))
end

test_data_odd := [-11 0 1 3 5 7 9]
test_data_even := [-2 0 2 3 4 6 8 10]

func test
    SSL := SortedLinkedList
    merged := merge_lists (SSL test_data_odd) (SSL test_data_even)
    assert 16 (len merged)
    assert "-11 -> -2 -> -1 -> 0 -> 0 -> 1 -> 2 -> 3 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10" (sprint merged)
    assert true==(merged[:] == (sort (test_data_odd + test_data_even))[:])
end
test

func sort arr:[]num
    // bubble sort
    for endIdx := range (len arr)-1 0 -1
        for i := range endIdx
            if arr[i] > arr[i + 1]
                tmp := arr[i]
                arr[i] = arr[i + 1]
                arr[i + 1] = tmp
            end
        end
    end
end

func main
    SSL := SortedLinkedList
    print (merge_lists (SSL test_data_odd) (SSL test_data_even))
end
