
func lengthOfLongestSubstringKDistinct:num s:string k:num
    count := [0] * 256
    i := 0
    numDistinct := 0
    maxLen := 0
    for j := range (len s)
        if count[s[j] - 48] == 0
            numDistinct = numDistinct + 1
        end
        count[s[j] - 48] = count[s[j] - 48] + 1
        while numDistinct > k
            count[s[i] - 48] = count[s[i] - 48] - 1
            if count[s[i] - 48] == 0
                numDistinct = numDistinct - 1
            end
            i = i + 1
        end
        maxLen = max (j - i + 1) maxLen
    end
    return maxLen
end

func test
    assert 3 (lengthOfLongestSubstringKDistinct "eceba" 2)
    assert 3 (lengthOfLongestSubstringKDistinct "aa" 1)
    assert 4 (lengthOfLongestSubstringKDistinct "ababbc" 2)
    assert 5 (lengthOfLongestSubstringKDistinct "abcabcbb" 2)
    assert 2 (lengthOfLongestSubstringKDistinct "abcabcbb" 1)
end
test
// output:
//line 8 column 23: mismatched type for -: string, num
//line 8 column 17: array index expects num, found string
//line 11 column 20: mismatched type for -: string, num
//line 11 column 14: array index expects num, found string
//line 13 column 24: mismatched type for -: string, num
//line 13 column 18: array index expects num, found string
//line 14 column 27: mismatched type for -: string, num
//line 14 column 21: array index expects num, found string
