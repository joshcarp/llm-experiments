
func Node:{}any
    self:{}any
    self.data = data
    self.next = next
    return self
end

func LinkedList:{}any
    self:{}any
    self.head = head
    return self
end

func __iter__:Iterator self:{}any
    visited := []
    node:{}any
    node = self.head
    while node != {}
        if node in visited
            return
        end
        visited = visited + [node]
        yield node.data
        node = node.next
    end
end

func add_node self:{}any data:any
    new_node := (Node data {})
    if self.head == {}
        self.head = new_node
        return
    end
    current_node:{}any
    current_node = self.head
    while current_node.next != {}
        current_node = current_node.next
    end
    current_node.next = new_node
end

func detect_cycle:bool self:{}any
    if self.head == {}
        return false
    end
    slow_pointer:{}any
    fast_pointer:{}any
    slow_pointer = self.head
    fast_pointer = self.head
    while fast_pointer != {} and fast_pointer.next != {}
        if slow_pointer == {}
            slow_pointer = slow_pointer.next
        else
            slow_pointer = {}
        end
        fast_pointer = fast_pointer.next.next
        if slow_pointer == fast_pointer
            return true
        end
    end
    return false
end

func test
    linked_list := (LinkedList)
    add_node linked_list 1
    add_node linked_list 2
    add_node linked_list 3
    add_node linked_list 4
    assert false==(detect_cycle linked_list)
    if linked_list.head != {} and linked_list.head.next != {} and linked_list.head.next.next != {}
        linked_list.head.next.next.next = linked_list.head.next
    end
    assert true==(detect_cycle linked_list)
end
test
