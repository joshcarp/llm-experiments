//Find the inorder successor of a node in a binary search tree

func inorderSuccessor:any node:any
    if (has node "right")
        return findMin node["right"]
    end
    parent := node["parent"]
    while parent != {} and node == parent["right"]
        node = parent
        parent = parent["parent"]
    end
    return parent
end

func findMin:any node:any
    while (has node "left")
        node = node["left"]
    end
    return node
end

    root := {val:5 parent:{} left:{val:3 parent:root left:{} right:{}} right:{val:15 parent:root left:{} right:{}}}
    root["left"]["right"]["parent"] = root["left"]
    root["right"]["parent"] = root
    assert {val:15 parent:root left:{} right:{}} (inorderSuccessor root["left"]["right"])
    assert {val:15 parent:root left:{} right:{}} (inorderSuccessor root["right"])
    assert {} (inorderSuccessor root["right"]["right"])

