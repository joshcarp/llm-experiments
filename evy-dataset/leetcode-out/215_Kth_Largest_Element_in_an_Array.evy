
func findKthLargest:num nums:[]num k:num
    // shuffle nums to avoid n*n
    shuffle nums
    return quickSelection nums 0 (len nums) - 1 (len nums) - k
end

func quickSelection:num nums:[]num start:num end:num k:num
    if start > end
        return inf
    end
    pivot := nums[end]
    left := start
    for i := range start end
        if nums[i] <= pivot
            // swip left and i
            nums[left], nums[i] = nums[i], nums[left]
            left = left + 1
        end
    end
    nums[left], nums[end] = nums[end], nums[left]
    if left == k
        return nums[left]
    else if left < k
        return quickSelection nums (left + 1) end k
    else
        return quickSelection nums start (left - 1) k
    end
end

func shuffle arr:[]any
    // Fisher-Yates Shuffle
    for i := range (len arr)-1 0 -1
        j := rand (i + 1)
        arr[i], arr[j] = arr[j], arr[i]
    end
end

func test
    assert 5 (findKthLargest [3 2 1 5 6 4] 2)
    assert 4 (findKthLargest [3 2 3 1 2 4 5 5 6] 4)
end
test
// output:
//line 17 column 23: illegal character ","
//line 17 column 42: illegal character ","
//line 21 column 15: illegal character ","
//line 21 column 38: illegal character ","
//line 35 column 15: illegal character ","
//line 35 column 32: illegal character ","
//line 8 column 46: expected identifier, got "end"
//line 8 column 46: expected identifier, got "end"
