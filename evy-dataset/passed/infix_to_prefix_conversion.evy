
func infix_2_postfix:string infix:string
    stack := []
    post_fix := []
    priority := {
        "^": 3
        "*": 2
        "/": 2
        "%": 2
        "+": 1
        "-": 1
    } // Priority of each operator
    print_width := max (len infix) 7

    // Print table header for output
    print (
        "Symbol".center(8)
        "Stack".center(print_width)
        "Postfix".center(print_width)
        sep=" | "
    )
    print ("-" * (print_width * 3 + 7))

    for x := range infix
        if x.isalpha() or x.isdigit()
            post_fix = post_fix + [x] // if x is Alphabet / Digit, add it to Postfix
        else if x == "("
            stack = stack + [x] // if x is "(" push to Stack
        else if x == ")" // if x is ")" pop stack until "(" is encountered
            if (len stack) == 0 // close bracket without open bracket
                raise IndexError "list index out of range"
            end

            while stack[-1] != "("
                post_fix = post_fix + [stack.pop()] // Pop stack & add the content to Postfix
            end
            stack.pop()
        else if (len stack) == 0
            stack = stack + [x] // If stack is empty, push x to stack
        else // while priority of x is not > priority of element in the stack
            while stack and stack[-1] != "(" and priority[x] <= priority[stack[-1]]
                post_fix = post_fix + [stack.pop()] // pop stack & add to Postfix
            end
            stack = stack + [x] // push x to stack
        end

        print (
            x.center(8)
            ("".join stack).ljust(print_width)
            ("".join post_fix).ljust(print_width)
            sep=" | "
        ) // Output in tabular format
    end

    while (len stack) > 0 // while stack is not empty
        if stack[-1] == "(" // open bracket with no close bracket
            raise ValueError "invalid expression"
        end

        post_fix = post_fix + [stack.pop()] // pop stack & add to Postfix
        print (
            " ".center(8)
            ("".join stack).ljust(print_width)
            ("".join post_fix).ljust(print_width)
            sep=" | "
        ) // Output in tabular format
    end

    return "".join post_fix // return Postfix as str
end

func infix_2_prefix:string infix:string
    reversed_infix := list (infix[::-1]) // reverse the infix equation

    for i := range (len reversed_infix)
        if reversed_infix[i] == "("
            reversed_infix[i] = ")" // change "(" to ")"
        else if reversed_infix[i] == ")"
            reversed_infix[i] = "(" // change ")" to "("
        end
    end

    // call infix_2_postfix on Infix, return reverse of Postfix
    return (infix_2_postfix ("".join reversed_infix))[::-1]
end

func main
    Infix := read "\nEnter an Infix Equation = " // Input an Infix equation
    Infix := "".join (Infix.split()) // Remove spaces from the input
    print "\n\t" (Infix) "(Infix) -> " (infix_2_prefix Infix) "(Prefix)"
end
