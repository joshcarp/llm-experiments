
func Node:{}any
    self:{}any
    self.val = 0
    self.left = {}
    self.right = {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func rob self:{}any root:{}any
    res := self.robHelper root
    return max(res[0], res[1])
end

func robHelper self:{}any root:{}any
    if root == {}
        return [0 0]
    end
    left := self.robHelper root.left
    right := self.robHelper root.right
    res := [0 0]
    res[0] = max(left[0], left[1]) + max(right[0], right[1])
    res[1] = root.val + left[0] + right[0]
    return res
end

func test
    root := (Node)
    root.val = 3
    root.left = (Node)
    root.left.val = 2
    root.left.left = (Node)
    root.left.left.val = 3
    root.left.right = (Node)
    root.left.right.val = 3
    root.right = (Node)
    root.right.val = 3
    root.right.right = (Node)
    root.right.right.val = 1
    sol := (Solution)
    assert 7 (rob sol root)
end
test
```

The main issue was that you were trying to redefine the built-in `max` function. Evy has a built-in `max` function that you can use directly. I've replaced the custom `max` function with calls to the built-in `max` function. 

Here's a breakdown of the changes:

1. **Removed Custom `max` Function:** The custom `max` function was removed.
2. **Used Built-in `max`:**  The `max` function is now used directly in the `robHelper` function to find the maximum values.

Now the code should compile and run correctly. 
