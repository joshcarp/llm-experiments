
func StackWithQueues:{}any
    self:{}any
    self.mainQueue := []
    self.tempQueue := []
    return self
end

func push self:{}any item:num
    self.tempQueue = self.tempQueue + [item]
    while (len self.mainQueue) > 0
        self.tempQueue = self.tempQueue + [self.mainQueue[0]]
        self.mainQueue = self.mainQueue[1:]
    end
    self.mainQueue = self.tempQueue
    self.tempQueue = []
end

func pop:num self:{}any
    if (len self.mainQueue) == 0
        panic "pop from an empty deque"
    end
    result := self.mainQueue[0]
    self.mainQueue = self.mainQueue[1:]
    return result
end

func peek:num self:{}any
    if (len self.mainQueue) == 0
        return -1
    end
    return self.mainQueue[0]
end

func test
    stack := (StackWithQueues)
    push stack 1
    push stack 2
    push stack 3
    assert 3 (peek stack)
    assert 3 (pop stack)
    assert 2 (peek stack)
    assert 2 (pop stack)
    assert 1 (pop stack)
    assert -1 (peek stack)
end
test

stack := (StackWithQueues)
while true
    print "\nChoose operation:"
    print "1. Push"
    print "2. Pop"
    print "3. Peek"
    print "4. Quit"

    choice := read "Enter choice (1/2/3/4): "

    if choice == "1"
        element := str2num (read "Enter an integer to push: ")
        push stack element
        print sprintf "%v pushed onto the stack." element
    else if choice == "2"
        poppedElement := pop stack
        if poppedElement != -1
            print sprintf "Popped element: %v" poppedElement
        else
            print "Stack is empty."
        end
    else if choice == "3"
        peekedElement := peek stack
        if peekedElement != -1
            print sprintf "Top element: %v" peekedElement
        else
            print "Stack is empty."
        end
    else if choice == "4"
        break
    else
        print "Invalid choice. Please try again."
    end
end
