
func NumArray:{}any nums:[]num
    self:{}any
    self.ls := len nums
    self.tree := [0] * (self.ls * 2)
    self.buildTree nums
    return self
end

func buildTree self:{}any nums:[]num
    i := self.ls
    j := 0
    while i < (2 * self.ls)
        self.tree[i] = nums[j]
        i = i + 1
        j = j + 1
    end
    for i := range (self.ls - 1) 1 -1
        self.tree[i] = self.tree[(i * 2)] + self.tree[(i * 2) + 1]
    end
end

func update self:{}any i:num val:num
    i = i + self.ls
    self.tree[i] = val
    while i > 0
        left := i
        right := i
        if i % 2 == 0
            right = i + 1
        else
            left = i - 1
        end
        self.tree[floor i/2] = self.tree[left] + self.tree[right]
        i = floor i/2
    end
end

func sumRange:num self:{}any i:num j:num
    res := 0
    i = i + self.ls
    j = j + self.ls
    while i <= j
        if i % 2 == 1
            res = res + self.tree[i]
            i = i + 1
        end
        if j % 2 == 0
            res = res + self.tree[j]
            j = j - 1
        end
        i = floor i/2
        j = floor j/2
    end
    return res
end

func test
    nums := [1 2 3 4 5 6 7 8 9 10]
    numArray := (NumArray nums)
    assert 15 (numArray.sumRange 0 2)
    assert 15 (numArray.sumRange 0 5)
    assert 40 (numArray.sumRange 3 8)
    numArray.update 1 10
    assert 25 (numArray.sumRange 0 2)
    assert 25 (numArray.sumRange 0 5)
    assert 50 (numArray.sumRange 3 8)
end
test
