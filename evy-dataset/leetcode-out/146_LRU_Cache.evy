
func LRUCache:{}any capacity:num
    self:{}any
    self.capacity = capacity
    self.cache = {}
    self.queue = []
    return self
end

func updateQueue self:{}any key:any
    self.queue = remove self.queue key
    self.queue = self.queue + [key]
end

func get:num self:{}any key:any
    if has self.cache key
        self.updateQueue key
        return self.cache[key]
    else
        return -1
    end
end

func put self:{}any key:any value:any
    if has self.cache key
        self.queue = remove self.queue key
    else if (len self.queue) == self.capacity
        del self.cache[self.queue[-1]]
    end
    self.cache[key] = value
    self.queue = self.queue + [key]
end

func test
    cache := (LRUCache 2)
    assert -1 (get cache 1)
    put cache 1 1
    put cache 2 2
    assert 1 (get cache 1)
    put cache 3 3
    assert -1 (get cache 2)
    assert 3 (get cache 3)
end
test
// output:
//line 11 column 18: unknown variable name "remove"
//line 12 column 29: mismatched type for +: any, []any
//line 16 column 16: "has" takes 1st argument of type {}, found any
//line 16 column 23: "has" takes 2nd argument of type string, found any
//line 17 column 26: expected "=", got identifier
//line 17 column 29: unexpected end of line
//line 18 column 26: only array, string and map type can be indexed, found any
//line 18 column 16: expected return value of type num, found ILLEGAL
//line 25 column 16: "has" takes 1st argument of type {}, found any
//line 25 column 23: "has" takes 2nd argument of type string, found any
//line 26 column 22: unknown variable name "remove"
//line 26 column 9: at least one statement is required here
//line 27 column 30: mismatched type for ==: num, any
//line 28 column 23: only array, string and map type can be indexed, found any
//line 28 column 24: "del" takes 2 arguments, found 0
//line 28 column 24: expected end of line, found self
//line 30 column 15: only array, string and map type can be indexed, found any
//line 31 column 29: mismatched type for +: any, []any
//line 24 column 29: "value" declared but not used
