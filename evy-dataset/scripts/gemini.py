"""
At the command line, only need to run once to install the package via pip:

$ pip install google-generativeai
"""
import sys

import google.generativeai as genai
import os

GOOGLE_API_KEY=os.getenv('GOOGLE_API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

# Set up the model
generation_config = {
  "temperature": 0,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 8192,
}

safety_settings = [
  {
    "category": "HARM_CATEGORY_HARASSMENT",
    "threshold": "BLOCK_NONE"
  },
  {
    "category": "HARM_CATEGORY_HATE_SPEECH",
    "threshold": "BLOCK_NONE"
  },
  {
    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    "threshold": "BLOCK_NONE"
  },
  {
    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
    "threshold": "BLOCK_NONE"
  },
]

model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest",
                              generation_config=generation_config,
                              safety_settings=safety_settings)

prompt_parts = [
  "input: ",
  "input-text ",
  "input-evy print \"print\" \"hi\"",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print \"print\" \"hi\"",
  "input: ",
  "input-text ",
  "input-evy width 2\n\nmove 10 65\ncolor \"red\"\ncircle 7\nmove 3 40\nrect 14 14\nmove 3 35\nline 17 35\n\nmove 30 65\nstroke \"blue\"\ncircle 7\nmove 23 40\nrect 14 14\nmove 23 35\nline 37 35\n\nmove 50 65\ncolor \"green\"\nfill \"orange\"\ncircle 7\nmove 43 40\nrect 14 14\nmove 43 35\nline 57 35\n\nmove 70 65\nstroke \"deeppink\"\nfill \"cyan\"\ncircle 7\nmove 63 40\nrect 14 14\nmove 63 35\nline 77 35\n\nmove 90 65\nstroke \"violet\"\nfill \"none\"\ncircle 7\nmove 83 40\nrect 14 14\nmove 83 35\nline 97 35",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy width 2\n\nmove 10 65\ncolor \"red\"\ncircle 7\nmove 3 40\nrect 14 14\nmove 3 35\nline 17 35\n\nmove 30 65\nstroke \"blue\"\ncircle 7\nmove 23 40\nrect 14 14\nmove 23 35\nline 37 35\n\nmove 50 65\ncolor \"green\"\nfill \"orange\"\ncircle 7\nmove 43 40\nrect 14 14\nmove 43 35\nline 57 35\n\nmove 70 65\nstroke \"deeppink\"\nfill \"cyan\"\ncircle 7\nmove 63 40\nrect 14 14\nmove 63 35\nline 77 35\n\nmove 90 65\nstroke \"violet\"\nfill \"none\"\ncircle 7\nmove 83 40\nrect 14 14\nmove 83 35\nline 97 35",
  "input: ",
  "input-text ",
  "input-evy // increase `s` for highter speed\n// try 5.1 vs 5 to visualize rounding errors\ns := 0.5\nradius := 5\n\ncolors := [\"red\" \"orange\" \"gold\" \"forestgreen\" \"blue\" \"indigo\" \"purple\" \"deeppink\"]\ndots := [\n    {x:(pos 0) y:(pos 2) dx:s dy:s}\n    {x:(pos 1) y:(pos 3) dx:s dy:s}\n    {x:(pos 2) y:(pos 4) dx:s dy:-s}\n    {x:(pos 3) y:(pos 3) dx:s dy:-s}\n    {x:(pos 4) y:(pos 2) dx:-s dy:-s}\n    {x:(pos 3) y:(pos 1) dx:-s dy:-s}\n    {x:(pos 2) y:(pos 0) dx:-s dy:s}\n    {x:(pos 1) y:(pos 1) dx:-s dy:s}\n]\n\nfor i := range (len dots)\n    dots[i].radius = radius\n    dots[i].color = i\nend\n\nfunc pos:num i:num\n    l := (100 - 2 * radius) / 4\n    return radius + i * l\nend\n\non animate\n    clear\n\n    for dot := range dots\n        update dot\n        draw dot colors[dot.color]\n    end\nend\n\nfunc update dot:{}num\n    dot.x = dot.x + dot.dx\n    dot.y = dot.y + dot.dy\n    dot.dx = delta dot.dx dot.x\n    dot.dy = delta dot.dy dot.y\nend\n\nfunc delta:num d:num n:num\n    if n >= radius and n < 100 - radius\n        return d\n    end\n    return -d\nend\n\nfunc draw dot:{}num col:string\n    color col\n    move dot.x dot.y\n    circle dot.radius\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // increase `s` for highter speed\n// try 5.1 vs 5 to visualize rounding errors\ns := 0.5\nradius := 5\n\ncolors := [\"red\" \"orange\" \"gold\" \"forestgreen\" \"blue\" \"indigo\" \"purple\" \"deeppink\"]\ndots := [\n    {x:(pos 0) y:(pos 2) dx:s dy:s}\n    {x:(pos 1) y:(pos 3) dx:s dy:s}\n    {x:(pos 2) y:(pos 4) dx:s dy:-s}\n    {x:(pos 3) y:(pos 3) dx:s dy:-s}\n    {x:(pos 4) y:(pos 2) dx:-s dy:-s}\n    {x:(pos 3) y:(pos 1) dx:-s dy:-s}\n    {x:(pos 2) y:(pos 0) dx:-s dy:s}\n    {x:(pos 1) y:(pos 1) dx:-s dy:s}\n]\n\nfor i := range (len dots)\n    dots[i].radius = radius\n    dots[i].color = i\nend\n\nfunc pos:num i:num\n    l := (100 - 2 * radius) / 4\n    return radius + i * l\nend\n\non animate\n    clear\n\n    for dot := range dots\n        update dot\n        draw dot colors[dot.color]\n    end\nend\n\nfunc update dot:{}num\n    dot.x = dot.x + dot.dx\n    dot.y = dot.y + dot.dy\n    dot.dx = delta dot.dx dot.x\n    dot.dy = delta dot.dy dot.y\nend\n\nfunc delta:num d:num n:num\n    if n >= radius and n < 100 - radius\n        return d\n    end\n    return -d\nend\n\nfunc draw dot:{}num col:string\n    color col\n    move dot.x dot.y\n    circle dot.radius\nend",
  "input: ",
  "input-text ",
  "input-evy print \"hi\"",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print \"hi\"",
  "input: ",
  "input-text ",
  "input-evy ellipse 50 85 30 10 0\nellipse 50 55 30 10 30",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy ellipse 50 85 30 10 0\nellipse 50 55 30 10 30",
  "input: ",
  "input-text ",
  "input-evy print \"👋🌏 Hello, World!\"",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print \"👋🌏 Hello, World!\"",
  "input: ",
  "input-text ",
  "input-evy // String art\n// Inpsired by https://youtu.be/dLiSXcaBZmk\n\npi := 3.141592654\n\nlissajousA := 0\nlissajousB := 0\nlissajousPct := 0\nthetaOffset := 0\nnails:[][]num\n\nfunc drawall\n    draw 80 0.05 0.05 1 20\n    sleep 3\n    draw 80 0 0.05 2 1\n    sleep 3\n    draw 160 0 0.05 2 1\n    sleep 3\n    draw 160 0 0.05 4 1\n    sleep 3\n    drawAnimate 80 0.02\n    sleep 3\n    drawlAnimate 120 2 1 270 pi/4 0.02\nend\n\nfunc draw n:num dotInterval:num cordInterval:num a:num c:num\n    setnails n 0 0 0 0\n    clear \"black\"\n    drawNails dotInterval\n    drawCords a c cordInterval\nend\n\nfunc drawl n:num a:num b:num pct:num toffset:num\n    setnails n a b pct toffset\n    clear \"black\"\n    drawNails 0\n    drawCords 1 n/4 0\nend\n\nfunc drawAnimate n:num interval:num\n    for i := range n*2\n        draw n 0 0 1 i+1\n        sleep interval\n    end\nend\n\nfunc drawlAnimate n:num a:num b:num steps:num toffset:num interval:num\n    for p := range steps -1 -1\n        pct := p / steps\n        drawl n a b pct toffset*(1 - pct)\n        sleep interval\n    end\nend\n\nfunc drawNails interval:num\n    for i := range (len nails)\n        nail i\n        sleep interval\n    end\nend\n\nfunc drawCords a:num c:num interval:num\n    for i := range (len nails)\n        j := a * i + c\n        cord i j\n        nail i\n        nail j\n        sleep interval\n    end\nend\n\nfunc nail n:num\n    color \"orange\"\n    xy := pos n\n    move xy[0] xy[1]\n    circle 0.6\nend\n\nfunc cord i:num j:num\n    ixy := pos i\n    jxy := pos j\n    color \"lightgreen\"\n    width 0.3\n    move ixy[0] ixy[1]\n    line jxy[0] jxy[1]\nend\n\nfunc pos:[]num n:num\n    return nails[n % (len nails)]\nend\n\nfunc setnails n:num a:num b:num pct:num toffset:num\n    if (len nails) == n and lissajousA == a and lissajousB == b and lissajousPct == pct and thetaOffset == toffset\n        // No change to computed nail positions\n        return\n    end\n    lissajousA = a\n    lissajousB = b\n    lissajousPct = pct\n    thetaOffset = toffset\n    nails = []\n    for i := range n\n        theta := thetaOffset + (pi * 2 * i / n)\n        nails = nails + [(calcpos theta)]\n    end\nend\n\nfunc calcpos:[]num theta:num\n    cpos := circlePos theta\n    lpos := lissajousPos theta\n    x := interpolate lpos[0] cpos[0] lissajousPct\n    y := interpolate lpos[1] cpos[1] lissajousPct\n    return [(toCanvas x) (toCanvas y)]\nend\n\nfunc circlePos:[]num theta:num\n    x := cos theta\n    y := sin theta\n    return [x y]\nend\n\nfunc lissajousPos:[]num theta:num\n    x := sin lissajousA*theta\n    y := sin lissajousB*theta\n    return [x y]\nend\n\nfunc toCanvas:num n:num\n    return n * 40 + 50\nend\n\nfunc interpolate:num a:num b:num pct:num\n    return a * pct + b * (1 - pct)\nend\n\n// Still working on this one\n// drawlAnimate 80 1 4 100 0 0.02\n\ndrawall",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // String art\n// Inpsired by https://youtu.be/dLiSXcaBZmk\n\npi := 3.141592654\n\nlissajousA := 0\nlissajousB := 0\nlissajousPct := 0\nthetaOffset := 0\nnails:[][]num\n\nfunc drawall\n    draw 80 0.05 0.05 1 20\n    sleep 3\n    draw 80 0 0.05 2 1\n    sleep 3\n    draw 160 0 0.05 2 1\n    sleep 3\n    draw 160 0 0.05 4 1\n    sleep 3\n    drawAnimate 80 0.02\n    sleep 3\n    drawlAnimate 120 2 1 270 pi/4 0.02\nend\n\nfunc draw n:num dotInterval:num cordInterval:num a:num c:num\n    setnails n 0 0 0 0\n    clear \"black\"\n    drawNails dotInterval\n    drawCords a c cordInterval\nend\n\nfunc drawl n:num a:num b:num pct:num toffset:num\n    setnails n a b pct toffset\n    clear \"black\"\n    drawNails 0\n    drawCords 1 n/4 0\nend\n\nfunc drawAnimate n:num interval:num\n    for i := range n*2\n        draw n 0 0 1 i+1\n        sleep interval\n    end\nend\n\nfunc drawlAnimate n:num a:num b:num steps:num toffset:num interval:num\n    for p := range steps -1 -1\n        pct := p / steps\n        drawl n a b pct toffset*(1 - pct)\n        sleep interval\n    end\nend\n\nfunc drawNails interval:num\n    for i := range (len nails)\n        nail i\n        sleep interval\n    end\nend\n\nfunc drawCords a:num c:num interval:num\n    for i := range (len nails)\n        j := a * i + c\n        cord i j\n        nail i\n        nail j\n        sleep interval\n    end\nend\n\nfunc nail n:num\n    color \"orange\"\n    xy := pos n\n    move xy[0] xy[1]\n    circle 0.6\nend\n\nfunc cord i:num j:num\n    ixy := pos i\n    jxy := pos j\n    color \"lightgreen\"\n    width 0.3\n    move ixy[0] ixy[1]\n    line jxy[0] jxy[1]\nend\n\nfunc pos:[]num n:num\n    return nails[n % (len nails)]\nend\n\nfunc setnails n:num a:num b:num pct:num toffset:num\n    if (len nails) == n and lissajousA == a and lissajousB == b and lissajousPct == pct and thetaOffset == toffset\n        // No change to computed nail positions\n        return\n    end\n    lissajousA = a\n    lissajousB = b\n    lissajousPct = pct\n    thetaOffset = toffset\n    nails = []\n    for i := range n\n        theta := thetaOffset + (pi * 2 * i / n)\n        nails = nails + [(calcpos theta)]\n    end\nend\n\nfunc calcpos:[]num theta:num\n    cpos := circlePos theta\n    lpos := lissajousPos theta\n    x := interpolate lpos[0] cpos[0] lissajousPct\n    y := interpolate lpos[1] cpos[1] lissajousPct\n    return [(toCanvas x) (toCanvas y)]\nend\n\nfunc circlePos:[]num theta:num\n    x := cos theta\n    y := sin theta\n    return [x y]\nend\n\nfunc lissajousPos:[]num theta:num\n    x := sin lissajousA*theta\n    y := sin lissajousB*theta\n    return [x y]\nend\n\nfunc toCanvas:num n:num\n    return n * 40 + 50\nend\n\nfunc interpolate:num a:num b:num pct:num\n    return a * pct + b * (1 - pct)\nend\n\n// Still working on this one\n// drawlAnimate 80 1 4 100 0 0.02\n\ndrawall",
  "input: ",
  "input-text ",
  "input-evy print \"hi print hi\"",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print \"hi print hi\"",
  "input: ",
  "input-text ",
  "input-evy s := \"Hello World!\"\n\nprint \"s:\" s\nprint \"s+s:\" s+s\nprint \"s[1:-1]:\" s[1:-1]\nprint\nprint \"upper s:\" (upper s)\nprint \"lower s:\" (lower s)\nprint \"index s \\\"e\\\":\" (index s \"e\")\nprint\nprint \"startswith \\\"Hello\\\":\" (startswith s \"Hello\")\nprint \"startswith \\\"hello\\\":\" (startswith s \"hello\")\nprint \"endswith \\\"World!\\\":\" (endswith s \"World!\")\nprint \"endswith \\\"World\\\": \" (endswith s \"World\")\nprint\nprint \"replace s \\\"l\\\" \\\"L\\\":\" (replace s \"l\" \"L\")\nprint \"trim s \\\"H!\\\":\" (trim s \"H!\")",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy s := \"Hello World!\"\n\nprint \"s:\" s\nprint \"s+s:\" s+s\nprint \"s[1:-1]:\" s[1:-1]\nprint\nprint \"upper s:\" (upper s)\nprint \"lower s:\" (lower s)\nprint \"index s \\\"e\\\":\" (index s \"e\")\nprint\nprint \"startswith \\\"Hello\\\":\" (startswith s \"Hello\")\nprint \"startswith \\\"hello\\\":\" (startswith s \"hello\")\nprint \"endswith \\\"World!\\\":\" (endswith s \"World!\")\nprint \"endswith \\\"World\\\": \" (endswith s \"World\")\nprint\nprint \"replace s \\\"l\\\" \\\"L\\\":\" (replace s \"l\" \"L\")\nprint \"trim s \\\"H!\\\":\" (trim s \"H!\")",
  "input: ",
  "input-text ",
  "input-evy move 10 20\nline 50 50\nrect 25 25\ncolor \"red\"\ncircle 10\n\nx := 12\nprint \"x:\" x\nif x > 10\n    print \"🍦 big x\"\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy move 10 20\nline 50 50\nrect 25 25\ncolor \"red\"\ncircle 10\n\nx := 12\nprint \"x:\" x\nif x > 10\n    print \"🍦 big x\"\nend",
  "input: ",
  "input-text ",
  "input-evy colors := [\"red\" \"orange\" \"gold\" \"forestgreen\" \"blue\" \"indigo\" \"purple\" \"deeppink\"]\nspeed := [0.007 0.006 0.005 0.004 0.003]\n// 2% opacity leaves trails on movement, try hsl 0 0 0 2 for black\nbackground := hsl 0 0 100 2\n\norbits := len speed // number of moving rings\ndots := len colors // number of dots per ring\nradius := 100 / (orbits * 4 + 2)\n\npi := 3.141593\ntau := 2 * pi\n\ndot:{}num\nring := [dot] * dots\nrings := [ring] * orbits\n\n// initialize dots\nfor i := range orbits\n    for j := range dots\n        dot := rings[i][j]\n        dot.speed = speed[i]\n        dot.orbit = (i + 1) * radius * 2\n        dot.phase = j / dots\n        dot.radius = radius\n        dot.color = j\n    end\nend\n\non animate\n    clear background\n    for ring := range rings\n        for dot := range ring\n            update dot\n            draw dot colors[dot.color]\n        end\n    end\nend\n\nfunc update dot:{}num\n    dot.phase = dot.phase - dot.speed\nend\n\nfunc draw dot:{}num col:string\n    color col\n    x := 50 + dot.orbit * (cos (tau * dot.phase))\n    y := 50 + dot.orbit * (sin (tau * dot.phase))\n    move x y\n    circle dot.radius\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy colors := [\"red\" \"orange\" \"gold\" \"forestgreen\" \"blue\" \"indigo\" \"purple\" \"deeppink\"]\nspeed := [0.007 0.006 0.005 0.004 0.003]\n// 2% opacity leaves trails on movement, try hsl 0 0 0 2 for black\nbackground := hsl 0 0 100 2\n\norbits := len speed // number of moving rings\ndots := len colors // number of dots per ring\nradius := 100 / (orbits * 4 + 2)\n\npi := 3.141593\ntau := 2 * pi\n\ndot:{}num\nring := [dot] * dots\nrings := [ring] * orbits\n\n// initialize dots\nfor i := range orbits\n    for j := range dots\n        dot := rings[i][j]\n        dot.speed = speed[i]\n        dot.orbit = (i + 1) * radius * 2\n        dot.phase = j / dots\n        dot.radius = radius\n        dot.color = j\n    end\nend\n\non animate\n    clear background\n    for ring := range rings\n        for dot := range ring\n            update dot\n            draw dot colors[dot.color]\n        end\n    end\nend\n\nfunc update dot:{}num\n    dot.phase = dot.phase - dot.speed\nend\n\nfunc draw dot:{}num col:string\n    color col\n    x := 50 + dot.orbit * (cos (tau * dot.phase))\n    y := 50 + dot.orbit * (sin (tau * dot.phase))\n    move x y\n    circle dot.radius\nend",
  "input: ",
  "input-text ",
  "input-evy print \"Write something, press enter and enjoy the echo.\"\nwhile true\n    s := read\n    print s s s\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print \"Write something, press enter and enjoy the echo.\"\nwhile true\n    s := read\n    print s s s\nend",
  "input: ",
  "input-text ",
  "input-evy arr:[]{}any\narr = [{a:1} {b:[1 2 {}]} {}]\nprint (typeof arr)\nprint (typeof arr[0])\nprint (typeof arr[0].a)",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy arr:[]{}any\narr = [{a:1} {b:[1 2 {}]} {}]\nprint (typeof arr)\nprint (typeof arr[0])\nprint (typeof arr[0].a)",
  "input: ",
  "input-text ",
  "input-evy move 50 50\ncolor \"red\"\ncircle 20",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy move 50 50\ncolor \"red\"\ncircle 20",
  "input: ",
  "input-text ",
  "input-evy // x - bot\n// o - human\n\nplayGame \"x\" (selectStrength)\n\nfunc selectStrength:num\n    print \"Select strength 1-3.\"\n    while true\n        str := read\n        n := str2num str\n        if !err and n >= 1 and n <= 3\n            return n\n        end\n        printf \"💣 %q is not a valid strength (1-3). Try again.\\n\" str\n    end\n    return -1\nend\n\nfunc playGame turn:string strength:num\n    board := newBoard\n    printAll strength board\n    while !(isGameover board)\n        if turn == \"x\"\n            botTurn board strength\n        else\n            humanTurn board\n        end\n        printAll strength board\n        turn = next turn\n    end\n    result := winner board\n    if result == \".\"\n        print \"Tie.\"\n    else\n        printf \"%q wins.\\n\" result\n    end\nend\n\nfunc newBoard:[]string\n    return [\n        \".\" \".\" \".\"\n        \".\" \".\" \".\"\n        \".\" \".\" \".\"\n    ]\nend\n\nfunc isGameover:bool b:[]string\n    return (emptyCnt b) == 0 or (winner b) != \".\"\nend\n\nfunc next:string turn:string\n    if turn == \"o\"\n        return \"x\"\n    end\n    return \"o\"\nend\n\nfunc emptyCnt:num b:[]string\n    cnt := 0\n    for i := range 9\n        if b[i] == \".\"\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\nfunc winner:string b:[]string\n    if b[0] != \".\" and ((b[1] == b[0] and b[2] == b[0]) or (b[4] == b[0] and b[8] == b[0]) or (b[3] == b[0] and b[6] == b[0]))\n        return b[0]\n    end\n    if b[4] != \".\" and ((b[1] == b[4] and b[7] == b[4]) or (b[3] == b[4] and b[5] == b[4]) or (b[2] == b[4] and b[6] == b[4]))\n        return b[4]\n    end\n    if b[8] != \".\" and ((b[6] == b[8] and b[7] == b[8]) or (b[2] == b[8] and b[5] == b[8]))\n        return b[8]\n    end\n    return \".\" // no winner\nend\n\nfunc printAll strength:num b:[]string\n    cls\n    printNotes strength\n    printBoard b\nend\n\nfunc printNotes strength:num\n    printf \"Strength %0.f.\\n\\n\" strength\n    print \"Enter index for \\\"o\\\" move:\"\n    print \"0 1 2\"\n    print \"3 4 5\"\n    print \"6 7 8\\n\"\nend\n\nfunc printBoard b:[]string\n    print b[0] b[1] b[2]\n    print b[3] b[4] b[5]\n    print b[6] b[7] b[8]\n    print\nend\n\nfunc humanTurn b:[]string\n    while true\n        str := read\n        n := str2num str\n        if !err and n <= 8 and n >= 0 and b[n] == \".\"\n            b[n] = \"o\"\n            return\n        end\n        printf \"💣 %q is not a valid move (0-8, free fields). Try again.\\n\" str\n    end\nend\n\nfunc botTurn b:[]string strength:num\n    if strength == 1\n        bot1Turn b\n    else if strength == 2\n        bot2Turn b\n    else\n        bot3Turn b\n    end\nend\n\nfunc bot1Turn b:[]string\n    target := rand (emptyCnt b)\n    cnt := 0\n    for i := range 9\n        if b[i] == \".\"\n            if target == cnt\n                b[i] = \"x\"\n                return\n            end\n            cnt = cnt + 1\n        end\n    end\nend\n\nfunc bot2Turn b:[]string\n    // try to win in next move\n    for i := range 9\n        if b[i] == \".\"\n            b[i] = \"x\"\n            if (winner b) == \"x\"\n                return\n            end\n            b[i] = \".\"\n        end\n    end\n    // try to stop \"o\" from winning in next move\n    for i := range 9\n        if b[i] == \".\"\n            b[i] = \"o\"\n            if (winner b) == \"o\"\n                b[i] = \"x\"\n                return\n            end\n            b[i] = \".\"\n        end\n    end\n    // random move if no win or block possible\n    bot1Turn b\nend\n\nfunc bot3Turn b:[]string\n    e := emptyCnt b\n    if e == 9\n        bot1Turn b\n    else if e == 8 and b[4] == \".\"\n        b[4] = \"x\"\n    else if e == 8 // \"o\" on 4\n        corners := [0 2 6 8]\n        i := corners[rand 4]\n        b[i] = \"x\"\n    else\n        minmax b \"x\" 0\n    end\nend\n\nfunc minmax:num b:[]string turn:string depth:num\n    if (isGameover b)\n        return score b depth\n    end\n    scores:[]num\n    moves:[]num\n    b2 := b[:]\n    turn2 := next turn\n    for i := range 9\n        if b[i] == \".\"\n            b2[i] = turn\n            scores = scores + [(minmax b2 turn2 depth+1)]\n            moves = moves + [i]\n            b2[i] = \".\"\n        end\n    end\n\n    idx:num\n    if turn == \"x\"\n        idx = maxIndex scores\n    else\n        idx = minIndex scores\n    end\n    if depth == 0\n        b[moves[idx]] = turn\n    end\n    return scores[idx]\nend\n\nfunc score:num b:[]string depth:num\n    w := winner b\n    if w == \"x\"\n        return 10 - depth\n    else if w == \"o\"\n        return -10 + depth\n    end\n    return 0\nend\n\nfunc minIndex:num nums:[]num\n    nmin := nums[0]\n    idx := 0\n    for i := range 1 (len nums)\n        if nums[i] < nmin\n            nmin = nums[i]\n            idx = i\n        end\n    end\n    return idx\nend\n\nfunc maxIndex:num nums:[]num\n    nmax := nums[0]\n    idx := 0\n    for i := range 1 (len nums)\n        if nums[i] > nmax\n            nmax = nums[i]\n            idx = i\n        end\n    end\n    return idx\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // x - bot\n// o - human\n\nplayGame \"x\" (selectStrength)\n\nfunc selectStrength:num\n    print \"Select strength 1-3.\"\n    while true\n        str := read\n        n := str2num str\n        if !err and n >= 1 and n <= 3\n            return n\n        end\n        printf \"💣 %q is not a valid strength (1-3). Try again.\\n\" str\n    end\n    return -1\nend\n\nfunc playGame turn:string strength:num\n    board := newBoard\n    printAll strength board\n    while !(isGameover board)\n        if turn == \"x\"\n            botTurn board strength\n        else\n            humanTurn board\n        end\n        printAll strength board\n        turn = next turn\n    end\n    result := winner board\n    if result == \".\"\n        print \"Tie.\"\n    else\n        printf \"%q wins.\\n\" result\n    end\nend\n\nfunc newBoard:[]string\n    return [\n        \".\" \".\" \".\"\n        \".\" \".\" \".\"\n        \".\" \".\" \".\"\n    ]\nend\n\nfunc isGameover:bool b:[]string\n    return (emptyCnt b) == 0 or (winner b) != \".\"\nend\n\nfunc next:string turn:string\n    if turn == \"o\"\n        return \"x\"\n    end\n    return \"o\"\nend\n\nfunc emptyCnt:num b:[]string\n    cnt := 0\n    for i := range 9\n        if b[i] == \".\"\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\nfunc winner:string b:[]string\n    if b[0] != \".\" and ((b[1] == b[0] and b[2] == b[0]) or (b[4] == b[0] and b[8] == b[0]) or (b[3] == b[0] and b[6] == b[0]))\n        return b[0]\n    end\n    if b[4] != \".\" and ((b[1] == b[4] and b[7] == b[4]) or (b[3] == b[4] and b[5] == b[4]) or (b[2] == b[4] and b[6] == b[4]))\n        return b[4]\n    end\n    if b[8] != \".\" and ((b[6] == b[8] and b[7] == b[8]) or (b[2] == b[8] and b[5] == b[8]))\n        return b[8]\n    end\n    return \".\" // no winner\nend\n\nfunc printAll strength:num b:[]string\n    cls\n    printNotes strength\n    printBoard b\nend\n\nfunc printNotes strength:num\n    printf \"Strength %0.f.\\n\\n\" strength\n    print \"Enter index for \\\"o\\\" move:\"\n    print \"0 1 2\"\n    print \"3 4 5\"\n    print \"6 7 8\\n\"\nend\n\nfunc printBoard b:[]string\n    print b[0] b[1] b[2]\n    print b[3] b[4] b[5]\n    print b[6] b[7] b[8]\n    print\nend\n\nfunc humanTurn b:[]string\n    while true\n        str := read\n        n := str2num str\n        if !err and n <= 8 and n >= 0 and b[n] == \".\"\n            b[n] = \"o\"\n            return\n        end\n        printf \"💣 %q is not a valid move (0-8, free fields). Try again.\\n\" str\n    end\nend\n\nfunc botTurn b:[]string strength:num\n    if strength == 1\n        bot1Turn b\n    else if strength == 2\n        bot2Turn b\n    else\n        bot3Turn b\n    end\nend\n\nfunc bot1Turn b:[]string\n    target := rand (emptyCnt b)\n    cnt := 0\n    for i := range 9\n        if b[i] == \".\"\n            if target == cnt\n                b[i] = \"x\"\n                return\n            end\n            cnt = cnt + 1\n        end\n    end\nend\n\nfunc bot2Turn b:[]string\n    // try to win in next move\n    for i := range 9\n        if b[i] == \".\"\n            b[i] = \"x\"\n            if (winner b) == \"x\"\n                return\n            end\n            b[i] = \".\"\n        end\n    end\n    // try to stop \"o\" from winning in next move\n    for i := range 9\n        if b[i] == \".\"\n            b[i] = \"o\"\n            if (winner b) == \"o\"\n                b[i] = \"x\"\n                return\n            end\n            b[i] = \".\"\n        end\n    end\n    // random move if no win or block possible\n    bot1Turn b\nend\n\nfunc bot3Turn b:[]string\n    e := emptyCnt b\n    if e == 9\n        bot1Turn b\n    else if e == 8 and b[4] == \".\"\n        b[4] = \"x\"\n    else if e == 8 // \"o\" on 4\n        corners := [0 2 6 8]\n        i := corners[rand 4]\n        b[i] = \"x\"\n    else\n        minmax b \"x\" 0\n    end\nend\n\nfunc minmax:num b:[]string turn:string depth:num\n    if (isGameover b)\n        return score b depth\n    end\n    scores:[]num\n    moves:[]num\n    b2 := b[:]\n    turn2 := next turn\n    for i := range 9\n        if b[i] == \".\"\n            b2[i] = turn\n            scores = scores + [(minmax b2 turn2 depth+1)]\n            moves = moves + [i]\n            b2[i] = \".\"\n        end\n    end\n\n    idx:num\n    if turn == \"x\"\n        idx = maxIndex scores\n    else\n        idx = minIndex scores\n    end\n    if depth == 0\n        b[moves[idx]] = turn\n    end\n    return scores[idx]\nend\n\nfunc score:num b:[]string depth:num\n    w := winner b\n    if w == \"x\"\n        return 10 - depth\n    else if w == \"o\"\n        return -10 + depth\n    end\n    return 0\nend\n\nfunc minIndex:num nums:[]num\n    nmin := nums[0]\n    idx := 0\n    for i := range 1 (len nums)\n        if nums[i] < nmin\n            nmin = nums[i]\n            idx = i\n        end\n    end\n    return idx\nend\n\nfunc maxIndex:num nums:[]num\n    nmax := nums[0]\n    idx := 0\n    for i := range 1 (len nums)\n        if nums[i] > nmax\n            nmax = nums[i]\n            idx = i\n        end\n    end\n    return idx\nend",
  "input: ",
  "input-text ",
  "input-evy // towers of hanoi\n\ncolors := [\"red\" \"orange\" \"gold\" \"green\" \"blue\" \"darkviolet\" \"violet\" \"black\"]\ntowers := [\n    []\n    [8 7 6 5 4 3 2 1]\n    []\n]\n\nselected := -1\nstartTower := 1\nnumPieces := (len towers[startTower])\n\n// Drawing / positioning\ntowerx := [17 50 83]\nw := 5 // line width\nbasey := 20\nfont {align:\"center\" baseline:\"top\"}\n\nwidth w\nlinecap \"round\"\n\nfunc drawTowers\n    clear \"white\"\n    color \"black\"\n    move 0 basey-(w / 2)\n    line 100 basey-(w / 2)\n    for tower := range 3\n        x := towerx[tower]\n        color \"black\"\n        move x basey\n        line x basey+42\n        if tower == 2\n            text \"✨\"\n        end\n        for n := range (len towers[tower])\n            y := n * w + (w / 2) + basey\n            if tower == selected and n == (len towers[tower]) - 1\n                y = y + w\n            end\n            piece := towers[tower][n]\n            pieceWidth := piece * 3 + 5\n            color colors[piece - 1]\n            move x-(pieceWidth / 2) y\n            line x+(pieceWidth / 2) y\n        end\n    end\nend\n\non down x:num _:num\n    tower := floor x/100*3\n    if selected == -1 and (len towers[tower]) == 0\n        cls\n        print \"No pieces on that tower!\"\n        return\n    else if selected == -1\n        selected = tower\n    else if selected == tower\n        selected = -1\n    else\n        movePiece selected tower\n        selected = -1\n    end\n    drawTowers\n    checkGameover tower\nend\n\nfunc movePiece from:num to:num\n    if (len towers[to]) > 0 and towers[from][-1] > towers[to][-1]\n        cls\n        print \"Piece too big to move there.\"\n        return\n    end\n    towers[to] = towers[to] + [towers[from][-1]]\n    towers[from] = towers[from][:-1]\nend\n\nfunc checkGameover tower:num\n    if tower == 2 and (len towers[tower]) == numPieces\n        cls\n        print \"Well done! 🥳\"\n        exit 0\n    end\nend\n\ndrawTowers\nprint \"Move all disks to the third pole✨.\"",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // towers of hanoi\n\ncolors := [\"red\" \"orange\" \"gold\" \"green\" \"blue\" \"darkviolet\" \"violet\" \"black\"]\ntowers := [\n    []\n    [8 7 6 5 4 3 2 1]\n    []\n]\n\nselected := -1\nstartTower := 1\nnumPieces := (len towers[startTower])\n\n// Drawing / positioning\ntowerx := [17 50 83]\nw := 5 // line width\nbasey := 20\nfont {align:\"center\" baseline:\"top\"}\n\nwidth w\nlinecap \"round\"\n\nfunc drawTowers\n    clear \"white\"\n    color \"black\"\n    move 0 basey-(w / 2)\n    line 100 basey-(w / 2)\n    for tower := range 3\n        x := towerx[tower]\n        color \"black\"\n        move x basey\n        line x basey+42\n        if tower == 2\n            text \"✨\"\n        end\n        for n := range (len towers[tower])\n            y := n * w + (w / 2) + basey\n            if tower == selected and n == (len towers[tower]) - 1\n                y = y + w\n            end\n            piece := towers[tower][n]\n            pieceWidth := piece * 3 + 5\n            color colors[piece - 1]\n            move x-(pieceWidth / 2) y\n            line x+(pieceWidth / 2) y\n        end\n    end\nend\n\non down x:num _:num\n    tower := floor x/100*3\n    if selected == -1 and (len towers[tower]) == 0\n        cls\n        print \"No pieces on that tower!\"\n        return\n    else if selected == -1\n        selected = tower\n    else if selected == tower\n        selected = -1\n    else\n        movePiece selected tower\n        selected = -1\n    end\n    drawTowers\n    checkGameover tower\nend\n\nfunc movePiece from:num to:num\n    if (len towers[to]) > 0 and towers[from][-1] > towers[to][-1]\n        cls\n        print \"Piece too big to move there.\"\n        return\n    end\n    towers[to] = towers[to] + [towers[from][-1]]\n    towers[from] = towers[from][:-1]\nend\n\nfunc checkGameover tower:num\n    if tower == 2 and (len towers[tower]) == numPieces\n        cls\n        print \"Well done! 🥳\"\n        exit 0\n    end\nend\n\ndrawTowers\nprint \"Move all disks to the third pole✨.\"",
  "input: ",
  "input-text ",
  "input-evy x := 50\ny := 50\ndy := 2\nradius := 5\nstopped := false\nspeed := 0.5\nhue := 0\n\ndot x y radius hue\n\non animate\n    if stopped\n        return\n    end\n    clear\n    y = y + dy * speed\n    dot x y radius hue\n    if y >= 100 - radius or y <= radius\n        dy = dy * -1\n    end\nend\n\non key k:string\n    print \"key\" k\n    if k == \" \"\n        stopped = !stopped\n    else if k == \"ArrowUp\"\n        hue = hue + 5\n    else if k == \"ArrowDown\"\n        hue = hue - 5\n    end\n    dot x y radius hue\nend\n\n// update x position with x-slider\n// update speed with y-slider\non input id:string val:string\n    if id == \"sliderx\"\n        x = str2num val\n    else\n        s := str2num val\n        speed = s * 0.01\n    end\n    dot x y radius hue\nend\n\nfunc dot x:num y:num radius:num hue:num\n    color (hsl hue)\n    move x y\n    circle radius\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy x := 50\ny := 50\ndy := 2\nradius := 5\nstopped := false\nspeed := 0.5\nhue := 0\n\ndot x y radius hue\n\non animate\n    if stopped\n        return\n    end\n    clear\n    y = y + dy * speed\n    dot x y radius hue\n    if y >= 100 - radius or y <= radius\n        dy = dy * -1\n    end\nend\n\non key k:string\n    print \"key\" k\n    if k == \" \"\n        stopped = !stopped\n    else if k == \"ArrowUp\"\n        hue = hue + 5\n    else if k == \"ArrowDown\"\n        hue = hue - 5\n    end\n    dot x y radius hue\nend\n\n// update x position with x-slider\n// update speed with y-slider\non input id:string val:string\n    if id == \"sliderx\"\n        x = str2num val\n    else\n        s := str2num val\n        speed = s * 0.01\n    end\n    dot x y radius hue\nend\n\nfunc dot x:num y:num radius:num hue:num\n    color (hsl hue)\n    move x y\n    circle radius\nend",
  "input: ",
  "input-text ",
  "input-evy grid\nprint \"Move mouse or touch to print coordinates\"\n\non move x:num y:num\n    print \"x:\" (round x) \"y:\" (round y)\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy grid\nprint \"Move mouse or touch to print coordinates\"\n\non move x:num y:num\n    print \"x:\" (round x) \"y:\" (round y)\nend",
  "input: ",
  "input-text ",
  "input-evy move 50 50\ncolor \"red\"\ncircle 10",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy move 50 50\ncolor \"red\"\ncircle 10",
  "input: ",
  "input-text ",
  "input-evy down := false\nwidth 1\n\non down x:num y:num\n    down = true\n    move x y\nend\n\non up\n    down = false\nend\n\non move x:num y:num\n    if down\n        line x y\n    end\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy down := false\nwidth 1\n\non down x:num y:num\n    down = true\n    move x y\nend\n\non up\n    down = false\nend\n\non move x:num y:num\n    if down\n        line x y\n    end\nend",
  "input: ",
  "input-text ",
  "input-evy for i := range 0 100 3\n    move i 0\n    line 100 i\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy for i := range 0 100 3\n    move i 0\n    line 100 i\nend",
  "input: ",
  "input-text ",
  "input-evy print \"print hi\"",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print \"print hi\"",
  "input: ",
  "input-text ",
  "input-evy for i := range 0 100 0.1\n    clear\n    dot i 50\n\n    sleep 0.01\nend\n\nfunc dot x:num y:num\n    color \"red\"\n    move x y\n    circle 10\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy for i := range 0 100 0.1\n    clear\n    dot i 50\n\n    sleep 0.01\nend\n\nfunc dot x:num y:num\n    color \"red\"\n    move x y\n    circle 10\nend",
  "input: ",
  "input-text ",
  "input-evy move 60 60\ncolor \"red\"\ncircle 10",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy move 60 60\ncolor \"red\"\ncircle 10",
  "input: ",
  "input-text ",
  "input-evy background := hsl 0 0 0 10\nx := 10\ny := 50\ns := 1\nwidth 1\nfill background\nstroke \"red\"\n\non animate\n    clear background\n    move x y\n    circle 10\n    x = x + s\n    if x < 10 or x > 90\n        s = -s\n    end\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy background := hsl 0 0 0 10\nx := 10\ny := 50\ns := 1\nwidth 1\nfill background\nstroke \"red\"\n\non animate\n    clear background\n    move x y\n    circle 10\n    x = x + s\n    if x < 10 or x > 90\n        s = -s\n    end\nend",
  "input: ",
  "input-text ",
  "input-evy on key k:string\n    print \"key:\" k\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy on key k:string\n    print \"key:\" k\nend",
  "input: ",
  "input-text ",
  "input-evy move 40 40\ncolor \"red\"\ncircle 20",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy move 40 40\ncolor \"red\"\ncircle 20",
  "input: ",
  "input-text ",
  "input-evy width 1\ncolor \"red\"\n\nfill \"none\"\npoly [10 80] [30 60] [50 80] [70 60] [90 80]\n\nfill \"gold\"\npoly [10 20] [50 50] [20 10] [10 20]",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy width 1\ncolor \"red\"\n\nfill \"none\"\npoly [10 80] [30 60] [50 80] [70 60] [90 80]\n\nfill \"gold\"\npoly [10 20] [50 50] [20 10] [10 20]",
  "input: ",
  "input-text ",
  "input-evy pi := 3.14159265\ne := 2.718281828459045\n\nprint \"rand1\" (rand1)\nprint \"rand 10\" (rand 10)\nprint\nprint \"min 3 2:\" (min 3 2)\nprint \"max 3 2:\" (max 3 2)\nprint \"abs -2.5:\" (abs -2.5)\nprint\nprint \"floor 2.6:\" (floor 2.6)\nprint \"ceil 2.4:\" (ceil 2.4)\nprint \"round 2.6:\" (round 2.6)\nprint\nprint \"pow 2 3:\" (pow 2 3)\nprint \"log e:\" (log e)\nprint \"sqrt 2:\" (sqrt 2)\nprint\nprint \"sin pi:\" (sin pi)\nprint \"cos pi:\" (cos pi)\nprint \"atan2 0 0:\" (atan2 0 0)",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy pi := 3.14159265\ne := 2.718281828459045\n\nprint \"rand1\" (rand1)\nprint \"rand 10\" (rand 10)\nprint\nprint \"min 3 2:\" (min 3 2)\nprint \"max 3 2:\" (max 3 2)\nprint \"abs -2.5:\" (abs -2.5)\nprint\nprint \"floor 2.6:\" (floor 2.6)\nprint \"ceil 2.4:\" (ceil 2.4)\nprint \"round 2.6:\" (round 2.6)\nprint\nprint \"pow 2 3:\" (pow 2 3)\nprint \"log e:\" (log e)\nprint \"sqrt 2:\" (sqrt 2)\nprint\nprint \"sin pi:\" (sin pi)\nprint \"cos pi:\" (cos pi)\nprint \"atan2 0 0:\" (atan2 0 0)",
  "input: ",
  "input-text ",
  "input-evy // See https://evy.dev#tictactoetext for a simpler, text based version\n// x - bot\n// o - human\n\nboard:[]string\nhumanScore:num\nbotScore:num\nbotStrength := 2\nbotStart := false\nturn:string\n\nfont {family:\"Fira Code, monospace\"}\nlinecap \"round\"\n\nnewGame\n\nfunc newGame\n    board = newBoard\n    if botStart\n        turn = \"x\"\n        draw\n        botTurn\n    end\n    turn = \"o\"\n    draw\n    botStart = !botStart\nend\n\nfunc newBoard:[]string\n    return [\n        \".\" \".\" \".\"\n        \".\" \".\" \".\"\n        \".\" \".\" \".\"\n    ]\nend\n\nfunc drawGameover\n    msg := \"🎀 Tie.\"\n    w := winner\n    if w == \"o\"\n        humanScore = humanScore + 1\n        msg = \"🥳 You win!\"\n    else if w == \"x\"\n        botScore = botScore + 1\n        msg = \"🤖 wins.\"\n    end\n    clear \"white\"\n    drawBoard\n    drawWinningLine\n    drawWinningMsg msg\n    sleep 0.5\n    newGame\nend\n\n// --- graphics ---\n\nfunc draw\n    clear \"white\"\n    drawBoard\n    drawScore\nend\n\nfunc drawBoard\n    // grid\n    vline 37.5 27 98 1 \"black\"\n    vline 62.5 27 98 1 \"black\"\n    hline 12.5 87.5 50 1 \"black\"\n    hline 12.5 87.5 75 1 \"black\"\n\n    // x and o\n    font {size:20}\n    for i := range 9\n        if board[i] != \".\"\n            x := (getX i) - 6\n            y := (getY i) - 6\n            move x y\n            text board[i]\n        end\n    end\nend\n\nfunc drawScore\n    font {size:4}\n    move 13 16\n    text (sprintf \"score     🤖:%.0f    you:%.0f\" botScore humanScore)\n    move 13 10\n    text \"strength  \"+(repeatstr \"🦾\" botStrength)\n    move 13 4\n    if turn == \"x\"\n        text \"turn      🤖 thinking…\"\n    else if turn == \"o\"\n        text \"turn      you\"\n    end\nend\n\nfunc drawWinningLine\n    w := winner\n    if w == \".\"\n        return\n    end\n    l := winningLine w\n    color (hsl 330 100 50 80)\n    width 3\n    move (getX l.i1) (getY l.i1)\n    line (getX l.i2) (getY l.i2)\nend\n\nfunc winningLine:{}num s:string\n    if board[0] == s and board[1] == s and board[2] == s\n        return {i1:0 i2:2}\n    else if board[3] == s and board[4] == s and board[5] == s\n        return {i1:3 i2:5}\n    else if board[6] == s and board[7] == s and board[8] == s\n        return {i1:6 i2:8}\n    else if board[0] == s and board[3] == s and board[6] == s\n        return {i1:0 i2:6}\n    else if board[1] == s and board[4] == s and board[7] == s\n        return {i1:1 i2:7}\n    else if board[2] == s and board[5] == s and board[8] == s\n        return {i1:2 i2:8}\n    else if board[0] == s and board[4] == s and board[8] == s\n        return {i1:0 i2:8}\n    else if board[2] == s and board[4] == s and board[6] == s\n        return {i1:2 i2:6}\n    end\n    return {}\nend\n\nfunc drawWinningMsg msg:string\n    move 13 10\n    color \"black\"\n    font {size:7}\n    text msg\n    sleep 1.5\nend\n\nfunc getX:num i:num\n    return 24 + (i % 3) * 25\nend\n\nfunc getY:num i:num\n    return 88 - (floor i/3) * 25\nend\n\nfunc vline x:num y1:num y2:num w:num c:string\n    line2 x y1 x y2 w c\nend\n\nfunc hline x1:num x2:num y:num w:num c:string\n    line2 x1 y x2 y w c\nend\n\nfunc line2 x1:num y1:num x2:num y2:num w:num c:string\n    width w\n    color c\n    move x1 y1\n    line x2 y2\nend\n\nfunc repeatstr:string s:string cnt:num\n    r:string\n    for range cnt\n        r = r + s\n    end\n    return r\nend\n\n// --- game logic ---\n\non down x:num y:num\n    if y > 25 and x > 13 and x < 87\n        i := floor (x - 12.5)/25\n        j := floor (100 - y)/25\n        humanBotTurn i+j*3\n        return\n    end\n    if x > 35 and x < 55 and y > 7 and y < 16\n        botStrength = botStrength % 3 + 1\n        draw\n        return\n    end\nend\n\nfunc humanBotTurn i:num\n    success := humanTurn i\n    if !success\n        return\n    end\n    if (isGameover)\n        drawGameover\n        return\n    end\n\n    turn = \"x\"\n    draw\n    botTurn\n\n    turn = \"o\"\n    draw\n    if (isGameover)\n        drawGameover\n    end\nend\n\nfunc humanTurn:bool i:num\n    if board[i] != \".\"\n        return false\n    end\n    board[i] = \"o\"\n    return true\nend\n\nfunc isGameover:bool\n    return (emptyCnt) == 0 or (winner) != \".\"\nend\n\nfunc emptyCnt:num\n    cnt := 0\n    for i := range 9\n        if board[i] == \".\"\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\nfunc winner:string\n    if board[0] != \".\" and ((board[1] == board[0] and board[2] == board[0]) or (board[4] == board[0] and board[8] == board[0]) or (board[3] == board[0] and board[6] == board[0]))\n        return board[0]\n    end\n    if board[4] != \".\" and ((board[1] == board[4] and board[7] == board[4]) or (board[3] == board[4] and board[5] == board[4]) or (board[2] == board[4] and board[6] == board[4]))\n        return board[4]\n    end\n    if board[8] != \".\" and ((board[6] == board[8] and board[7] == board[8]) or (board[2] == board[8] and board[5] == board[8]))\n        return board[8]\n    end\n    return \".\" // no winner\nend\n\nfunc botTurn\n    if botStrength == 1\n        bot1Turn\n    else if botStrength == 2\n        bot2Turn\n    else\n        bot3Turn\n    end\nend\n\nfunc bot1Turn\n    target := rand (emptyCnt)\n    cnt := 0\n    for i := range 9\n        if board[i] == \".\"\n            if target == cnt\n                board[i] = \"x\"\n                return\n            end\n            cnt = cnt + 1\n        end\n    end\nend\n\nfunc bot2Turn\n    // try to win in next move\n    for i := range 9\n        if board[i] == \".\"\n            board[i] = \"x\"\n            if (winner) == \"x\"\n                return\n            end\n            board[i] = \".\"\n        end\n    end\n    // try to stop \"o\" from winning in next move\n    for i := range 9\n        if board[i] == \".\"\n            board[i] = \"o\"\n            if (winner) == \"o\"\n                board[i] = \"x\"\n                return\n            end\n            board[i] = \".\"\n        end\n    end\n    // random move if no win or block possible\n    bot1Turn\nend\n\nfunc bot3Turn\n    e := emptyCnt\n    if e == 9\n        bot1Turn\n    else if e == 8 and board[4] == \".\"\n        board[4] = \"x\"\n    else if e == 8 // \"o\" on 4\n        corners := [0 2 6 8]\n        i := corners[rand 4]\n        board[i] = \"x\"\n    else\n        board[minmax \"x\" 0] = \"x\"\n    end\nend\n\nfunc minmax:num turn:string depth:num\n    if (isGameover)\n        return score depth\n    end\n    scores:[]num\n    moves:[]num\n    nextTurn := next turn\n    nextDepth := depth + 1\n    for i := range 9\n        if board[i] == \".\"\n            board[i] = turn\n            scores = scores + [(minmax nextTurn nextDepth)]\n            moves = moves + [i]\n            board[i] = \".\"\n        end\n    end\n\n    idx:num\n    if turn == \"x\"\n        idx = maxIndex scores\n    else\n        idx = minIndex scores\n    end\n    if depth != 0\n        return scores[idx]\n    else\n        return moves[idx]\n    end\nend\n\nfunc score:num depth:num\n    w := winner\n    if w == \"x\"\n        return 10 - depth\n    else if w == \"o\"\n        return -10 + depth\n    end\n    return 0\nend\n\nfunc next:string turn:string\n    if turn == \"o\"\n        return \"x\"\n    end\n    return \"o\"\nend\n\nfunc minIndex:num nums:[]num\n    nmin := nums[0]\n    idx := 0\n    for i := range 1 (len nums)\n        if nums[i] < nmin\n            nmin = nums[i]\n            idx = i\n        end\n    end\n    return idx\nend\n\nfunc maxIndex:num nums:[]num\n    nmax := nums[0]\n    idx := 0\n    for i := range 1 (len nums)\n        if nums[i] > nmax\n            nmax = nums[i]\n            idx = i\n        end\n    end\n    return idx\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // See https://evy.dev#tictactoetext for a simpler, text based version\n// x - bot\n// o - human\n\nboard:[]string\nhumanScore:num\nbotScore:num\nbotStrength := 2\nbotStart := false\nturn:string\n\nfont {family:\"Fira Code, monospace\"}\nlinecap \"round\"\n\nnewGame\n\nfunc newGame\n    board = newBoard\n    if botStart\n        turn = \"x\"\n        draw\n        botTurn\n    end\n    turn = \"o\"\n    draw\n    botStart = !botStart\nend\n\nfunc newBoard:[]string\n    return [\n        \".\" \".\" \".\"\n        \".\" \".\" \".\"\n        \".\" \".\" \".\"\n    ]\nend\n\nfunc drawGameover\n    msg := \"🎀 Tie.\"\n    w := winner\n    if w == \"o\"\n        humanScore = humanScore + 1\n        msg = \"🥳 You win!\"\n    else if w == \"x\"\n        botScore = botScore + 1\n        msg = \"🤖 wins.\"\n    end\n    clear \"white\"\n    drawBoard\n    drawWinningLine\n    drawWinningMsg msg\n    sleep 0.5\n    newGame\nend\n\n// --- graphics ---\n\nfunc draw\n    clear \"white\"\n    drawBoard\n    drawScore\nend\n\nfunc drawBoard\n    // grid\n    vline 37.5 27 98 1 \"black\"\n    vline 62.5 27 98 1 \"black\"\n    hline 12.5 87.5 50 1 \"black\"\n    hline 12.5 87.5 75 1 \"black\"\n\n    // x and o\n    font {size:20}\n    for i := range 9\n        if board[i] != \".\"\n            x := (getX i) - 6\n            y := (getY i) - 6\n            move x y\n            text board[i]\n        end\n    end\nend\n\nfunc drawScore\n    font {size:4}\n    move 13 16\n    text (sprintf \"score     🤖:%.0f    you:%.0f\" botScore humanScore)\n    move 13 10\n    text \"strength  \"+(repeatstr \"🦾\" botStrength)\n    move 13 4\n    if turn == \"x\"\n        text \"turn      🤖 thinking…\"\n    else if turn == \"o\"\n        text \"turn      you\"\n    end\nend\n\nfunc drawWinningLine\n    w := winner\n    if w == \".\"\n        return\n    end\n    l := winningLine w\n    color (hsl 330 100 50 80)\n    width 3\n    move (getX l.i1) (getY l.i1)\n    line (getX l.i2) (getY l.i2)\nend\n\nfunc winningLine:{}num s:string\n    if board[0] == s and board[1] == s and board[2] == s\n        return {i1:0 i2:2}\n    else if board[3] == s and board[4] == s and board[5] == s\n        return {i1:3 i2:5}\n    else if board[6] == s and board[7] == s and board[8] == s\n        return {i1:6 i2:8}\n    else if board[0] == s and board[3] == s and board[6] == s\n        return {i1:0 i2:6}\n    else if board[1] == s and board[4] == s and board[7] == s\n        return {i1:1 i2:7}\n    else if board[2] == s and board[5] == s and board[8] == s\n        return {i1:2 i2:8}\n    else if board[0] == s and board[4] == s and board[8] == s\n        return {i1:0 i2:8}\n    else if board[2] == s and board[4] == s and board[6] == s\n        return {i1:2 i2:6}\n    end\n    return {}\nend\n\nfunc drawWinningMsg msg:string\n    move 13 10\n    color \"black\"\n    font {size:7}\n    text msg\n    sleep 1.5\nend\n\nfunc getX:num i:num\n    return 24 + (i % 3) * 25\nend\n\nfunc getY:num i:num\n    return 88 - (floor i/3) * 25\nend\n\nfunc vline x:num y1:num y2:num w:num c:string\n    line2 x y1 x y2 w c\nend\n\nfunc hline x1:num x2:num y:num w:num c:string\n    line2 x1 y x2 y w c\nend\n\nfunc line2 x1:num y1:num x2:num y2:num w:num c:string\n    width w\n    color c\n    move x1 y1\n    line x2 y2\nend\n\nfunc repeatstr:string s:string cnt:num\n    r:string\n    for range cnt\n        r = r + s\n    end\n    return r\nend\n\n// --- game logic ---\n\non down x:num y:num\n    if y > 25 and x > 13 and x < 87\n        i := floor (x - 12.5)/25\n        j := floor (100 - y)/25\n        humanBotTurn i+j*3\n        return\n    end\n    if x > 35 and x < 55 and y > 7 and y < 16\n        botStrength = botStrength % 3 + 1\n        draw\n        return\n    end\nend\n\nfunc humanBotTurn i:num\n    success := humanTurn i\n    if !success\n        return\n    end\n    if (isGameover)\n        drawGameover\n        return\n    end\n\n    turn = \"x\"\n    draw\n    botTurn\n\n    turn = \"o\"\n    draw\n    if (isGameover)\n        drawGameover\n    end\nend\n\nfunc humanTurn:bool i:num\n    if board[i] != \".\"\n        return false\n    end\n    board[i] = \"o\"\n    return true\nend\n\nfunc isGameover:bool\n    return (emptyCnt) == 0 or (winner) != \".\"\nend\n\nfunc emptyCnt:num\n    cnt := 0\n    for i := range 9\n        if board[i] == \".\"\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\nfunc winner:string\n    if board[0] != \".\" and ((board[1] == board[0] and board[2] == board[0]) or (board[4] == board[0] and board[8] == board[0]) or (board[3] == board[0] and board[6] == board[0]))\n        return board[0]\n    end\n    if board[4] != \".\" and ((board[1] == board[4] and board[7] == board[4]) or (board[3] == board[4] and board[5] == board[4]) or (board[2] == board[4] and board[6] == board[4]))\n        return board[4]\n    end\n    if board[8] != \".\" and ((board[6] == board[8] and board[7] == board[8]) or (board[2] == board[8] and board[5] == board[8]))\n        return board[8]\n    end\n    return \".\" // no winner\nend\n\nfunc botTurn\n    if botStrength == 1\n        bot1Turn\n    else if botStrength == 2\n        bot2Turn\n    else\n        bot3Turn\n    end\nend\n\nfunc bot1Turn\n    target := rand (emptyCnt)\n    cnt := 0\n    for i := range 9\n        if board[i] == \".\"\n            if target == cnt\n                board[i] = \"x\"\n                return\n            end\n            cnt = cnt + 1\n        end\n    end\nend\n\nfunc bot2Turn\n    // try to win in next move\n    for i := range 9\n        if board[i] == \".\"\n            board[i] = \"x\"\n            if (winner) == \"x\"\n                return\n            end\n            board[i] = \".\"\n        end\n    end\n    // try to stop \"o\" from winning in next move\n    for i := range 9\n        if board[i] == \".\"\n            board[i] = \"o\"\n            if (winner) == \"o\"\n                board[i] = \"x\"\n                return\n            end\n            board[i] = \".\"\n        end\n    end\n    // random move if no win or block possible\n    bot1Turn\nend\n\nfunc bot3Turn\n    e := emptyCnt\n    if e == 9\n        bot1Turn\n    else if e == 8 and board[4] == \".\"\n        board[4] = \"x\"\n    else if e == 8 // \"o\" on 4\n        corners := [0 2 6 8]\n        i := corners[rand 4]\n        board[i] = \"x\"\n    else\n        board[minmax \"x\" 0] = \"x\"\n    end\nend\n\nfunc minmax:num turn:string depth:num\n    if (isGameover)\n        return score depth\n    end\n    scores:[]num\n    moves:[]num\n    nextTurn := next turn\n    nextDepth := depth + 1\n    for i := range 9\n        if board[i] == \".\"\n            board[i] = turn\n            scores = scores + [(minmax nextTurn nextDepth)]\n            moves = moves + [i]\n            board[i] = \".\"\n        end\n    end\n\n    idx:num\n    if turn == \"x\"\n        idx = maxIndex scores\n    else\n        idx = minIndex scores\n    end\n    if depth != 0\n        return scores[idx]\n    else\n        return moves[idx]\n    end\nend\n\nfunc score:num depth:num\n    w := winner\n    if w == \"x\"\n        return 10 - depth\n    else if w == \"o\"\n        return -10 + depth\n    end\n    return 0\nend\n\nfunc next:string turn:string\n    if turn == \"o\"\n        return \"x\"\n    end\n    return \"o\"\nend\n\nfunc minIndex:num nums:[]num\n    nmin := nums[0]\n    idx := 0\n    for i := range 1 (len nums)\n        if nums[i] < nmin\n            nmin = nums[i]\n            idx = i\n        end\n    end\n    return idx\nend\n\nfunc maxIndex:num nums:[]num\n    nmax := nums[0]\n    idx := 0\n    for i := range 1 (len nums)\n        if nums[i] > nmax\n            nmax = nums[i]\n            idx = i\n        end\n    end\n    return idx\nend",
  "input: ",
  "input-text ",
  "input-evy while true\n    print \"╔════════════════════════╗\"\n    print \"║ Guess my number (1-10) ║\"\n    print \"╚════════════════════════╝\"\n\n    n := 1 + (rand 10)\n    guess := readn\n\n    while guess != n\n        if guess < n\n            print guess \"Guess higher.\"\n        else\n            print guess \"Guess lower.\"\n        end\n        guess = readn\n    end\n    print guess \"You got it 🥳.\"\n    sleep 2\n    cls\nend\n\n// readn reads a number.\n// If the input is not a number readn\n// prints an error and repeats prompt.\nfunc readn:num\n    while true\n        str := read\n        n := str2num str\n        if !err\n            return n\n        end\n        print \"💣 '\"+str+\"'is not a number. Try again.\"\n    end\n    return -1\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy while true\n    print \"╔════════════════════════╗\"\n    print \"║ Guess my number (1-10) ║\"\n    print \"╚════════════════════════╝\"\n\n    n := 1 + (rand 10)\n    guess := readn\n\n    while guess != n\n        if guess < n\n            print guess \"Guess higher.\"\n        else\n            print guess \"Guess lower.\"\n        end\n        guess = readn\n    end\n    print guess \"You got it 🥳.\"\n    sleep 2\n    cls\nend\n\n// readn reads a number.\n// If the input is not a number readn\n// prints an error and repeats prompt.\nfunc readn:num\n    while true\n        str := read\n        n := str2num str\n        if !err\n            return n\n        end\n        print \"💣 '\"+str+\"'is not a number. Try again.\"\n    end\n    return -1\nend",
  "input: ",
  "input-text ",
  "input-evy on input id:string val:string\n    print \"id:\" id \"val:\" val\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy on input id:string val:string\n    print \"id:\" id \"val:\" val\nend",
  "input: ",
  "input-text ",
  "input-evy move 20 0\nrect 10 30\nrect 20 5\n\nmove 50 50\ncolor \"red\"\ncircle 10\n\ngrid",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy move 20 0\nrect 10 30\nrect 20 5\n\nmove 50 50\ncolor \"red\"\ncircle 10\n\ngrid",
  "input: ",
  "input-text ",
  "input-evy move 10 85\ntext \"“Time is an illusion.\"\nmove 10 78\ntext \"Lunchtime doubly so.”\"\n\n// all font properties\nfont {\n    size:4\n    style:\"italic\" // \"normal\"\n    family:\"Tahomana, sans-serif\" // see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\n    weight:700\n    letterspacing:-0.1 // extra inter-character space\n    align:\"center\" // \"right\", \"left\" (default)\n    baseline:\"middle\" // \"top\", \"bottom\", \"alphabetic\" (default)\n}\nmove 60 72\ncolor \"dodgerblue\"\ntext \"― Douglas Adams\"\n\ncolor \"black\"\nfont {size:6 style:\"normal\" letterspacing:0 align:\"left\" family:\"Fira Code, monospace\"}\nfill \"none\"\n\nmove 10 50\nline 45 50\nmove 10 50\nfont {baseline:\"bottom\"}\ntext \"bottom\"\n\nmove 10 35\nline 45 35\nmove 10 35\nfont {baseline:\"top\"}\ntext \"top\"\n\nmove 10 20\nline 45 20\nmove 10 20\nfont {baseline:\"middle\"}\ntext \"middle\"\n\nmove 10 5\nline 45 5\nmove 10 5\nfont {baseline:\"alphabetic\"}\ntext \"alphabetic\"\n\nmove 70 48\nline 70 56\nmove 70 50\nfont {align:\"left\"}\ntext \"left\"\n\nmove 70 33\nline 70 41\nmove 70 35\nfont {align:\"right\"}\ntext \"right\"\n\nmove 70 18\nline 70 26\nmove 70 20\nfont {align:\"center\"}\ntext \"center\"",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy move 10 85\ntext \"“Time is an illusion.\"\nmove 10 78\ntext \"Lunchtime doubly so.”\"\n\n// all font properties\nfont {\n    size:4\n    style:\"italic\" // \"normal\"\n    family:\"Tahomana, sans-serif\" // see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\n    weight:700\n    letterspacing:-0.1 // extra inter-character space\n    align:\"center\" // \"right\", \"left\" (default)\n    baseline:\"middle\" // \"top\", \"bottom\", \"alphabetic\" (default)\n}\nmove 60 72\ncolor \"dodgerblue\"\ntext \"― Douglas Adams\"\n\ncolor \"black\"\nfont {size:6 style:\"normal\" letterspacing:0 align:\"left\" family:\"Fira Code, monospace\"}\nfill \"none\"\n\nmove 10 50\nline 45 50\nmove 10 50\nfont {baseline:\"bottom\"}\ntext \"bottom\"\n\nmove 10 35\nline 45 35\nmove 10 35\nfont {baseline:\"top\"}\ntext \"top\"\n\nmove 10 20\nline 45 20\nmove 10 20\nfont {baseline:\"middle\"}\ntext \"middle\"\n\nmove 10 5\nline 45 5\nmove 10 5\nfont {baseline:\"alphabetic\"}\ntext \"alphabetic\"\n\nmove 70 48\nline 70 56\nmove 70 50\nfont {align:\"left\"}\ntext \"left\"\n\nmove 70 33\nline 70 41\nmove 70 35\nfont {align:\"right\"}\ntext \"right\"\n\nmove 70 18\nline 70 26\nmove 70 20\nfont {align:\"center\"}\ntext \"center\"",
  "input: ",
  "input-text ",
  "input-evy width 3\nlinecap \"round\"\nmove 5 80\nline 95 80\n\nlinecap \"butt\"\nmove 5 70\nline 95 70\n\nlinecap \"square\"\nmove 5 60\nline 95 60\n\nwidth 1\nmove 5 30\ndash 5 3 1 3\nline 95 30\n\ndash\nmove 5 20\nline 95 20",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy width 3\nlinecap \"round\"\nmove 5 80\nline 95 80\n\nlinecap \"butt\"\nmove 5 70\nline 95 70\n\nlinecap \"square\"\nmove 5 60\nline 95 60\n\nwidth 1\nmove 5 30\ndash 5 3 1 3\nline 95 30\n\ndash\nmove 5 20\nline 95 20",
  "input: ",
  "input-text ",
  "input-evy // Write a function vowelCount which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are \"a\", \"e\", \"i\", \"o\", \"u\". Here, \"y\" is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// vowelCount(\"abcde\") // 2\n// vowelCount(\"ACEDY\") // 3\nfunc vowelCount:num str:string\n    vowels := {a:0 e:0 i:0 o:0 u:0}\n    result := 0\n    str = lower str\n    for c := range str\n        if has vowels c\n            result = result + 1\n        end\n    end\n    if (len str) > 0 and str[-1] == \"y\"\n        result = result + 1\n    end\n    return result\nend\n\nfunc test\n    assert 0 (vowelCount \"\")\n    assert 2 (vowelCount \"abcde\")\n    assert 3 (vowelCount \"Alone\")\n    assert 2 (vowelCount \"key\")\n    assert 1 (vowelCount \"bye\")\n    assert 2 (vowelCount \"keY\")\n    assert 1 (vowelCount \"bYe\")\n    assert 3 (vowelCount \"ACEDY\")\nend\n\ntest",
  "input-python #START:PROMPT\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(vowels_count)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function vowelCount which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are \"a\", \"e\", \"i\", \"o\", \"u\". Here, \"y\" is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// vowelCount(\"abcde\") // 2\n// vowelCount(\"ACEDY\") // 3\nfunc vowelCount:num str:string\n    vowels := {a:0 e:0 i:0 o:0 u:0}\n    result := 0\n    str = lower str\n    for c := range str\n        if has vowels c\n            result = result + 1\n        end\n    end\n    if (len str) > 0 and str[-1] == \"y\"\n        result = result + 1\n    end\n    return result\nend\n\nfunc test\n    assert 0 (vowelCount \"\")\n    assert 2 (vowelCount \"abcde\")\n    assert 3 (vowelCount \"Alone\")\n    assert 2 (vowelCount \"key\")\n    assert 1 (vowelCount \"bye\")\n    assert 2 (vowelCount \"keY\")\n    assert 1 (vowelCount \"bYe\")\n    assert 3 (vowelCount \"ACEDY\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given the lengths of the three sides of a triangle. Return the area of the\n// triangle rounded to 2 decimal points if the three sides form a valid\n// triangle. Otherwise return -1 Three sides make a valid triangle when the\n// sum of any two sides is greater than the third side.\n// Use Heron's formula.\n//\n// Example:\n// triangleArea 3 4 5 // 6.00\n// triangleArea 1 2 10 // -1\nfunc triangleArea:num a:num b:num c:num\n    if a + b <= c or a + c <= b or b + c <= a\n        return -1\n    end\n    result := (a + b + c) * (-a + b + c) * (a - b + c) * (a + b - c)\n    result = 0.25 * (pow result 0.5)\n    return (round result*100) / 100 // round to 2 decimals\nend\n\nfunc test\n    assert 6 (triangleArea 3 4 5)\n    assert -1 (triangleArea 1 2 10)\n    assert 8.18 (triangleArea 4 8 5)\n    assert 1.73 (triangleArea 2 2 2)\n    assert -1 (triangleArea 1 2 3)\n    assert 16.25 (triangleArea 10 5 7)\n    assert -1 (triangleArea 2 6 3)\n    assert 0.43 (triangleArea 1 1 1)\n    assert -1 (triangleArea 2 2 10)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n\n#END:TEST\n#START:CHECK\ncheck(triangle_area)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given the lengths of the three sides of a triangle. Return the area of the\n// triangle rounded to 2 decimal points if the three sides form a valid\n// triangle. Otherwise return -1 Three sides make a valid triangle when the\n// sum of any two sides is greater than the third side.\n// Use Heron's formula.\n//\n// Example:\n// triangleArea 3 4 5 // 6.00\n// triangleArea 1 2 10 // -1\nfunc triangleArea:num a:num b:num c:num\n    if a + b <= c or a + c <= b or b + c <= a\n        return -1\n    end\n    result := (a + b + c) * (-a + b + c) * (a - b + c) * (a + b - c)\n    result = 0.25 * (pow result 0.5)\n    return (round result*100) / 100 // round to 2 decimals\nend\n\nfunc test\n    assert 6 (triangleArea 3 4 5)\n    assert -1 (triangleArea 1 2 10)\n    assert 8.18 (triangleArea 4 8 5)\n    assert 1.73 (triangleArea 2 2 2)\n    assert -1 (triangleArea 1 2 3)\n    assert 16.25 (triangleArea 10 5 7)\n    assert -1 (triangleArea 2 6 3)\n    assert 0.43 (triangleArea 1 1 1)\n    assert -1 (triangleArea 2 2 10)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it,\n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n//\n// Example 1:\n//     Input:\n//         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n//         bucket_capacity : 1\n//     Output: 6\n//\n// Example 2:\n//     Input:\n//         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n//         bucket_capacity : 2\n//     Output: 5\n//\n// Example 3:\n//     Input:\n//         grid : [[0,0,0], [0,0,0]]\n//         bucket_capacity : 5\n//     Output: 0\n//\n// Constraints:\n//     * all wells have the same length\n//     * 1 <= grid.length <= 10^2\n//     * 1 <= grid[1].length <= 10^2\n//     * grid[i][j] -> 0 | 1\n//     * 1 <= capacity <= 10\nfunc lowerCount:num wells:[][]num capacity:num\n    result := 0\n    for well := range wells\n        size := 0\n        for unit := range well\n            size = size + unit\n        end\n        result = result + (ceil size/capacity)\n    end\n    return result\nend\n\nfunc test\n    assert 6 (lowerCount [[0 0 1 0] [0 1 0 0] [1 1 1 1]] 1)\n    assert 5 (lowerCount [[0 0 1 1] [0 0 0 0] [1 1 1 1] [0 1 1 1]] 2)\n    assert 0 (lowerCount [[0 0 0] [0 0 0]] 5)\n    assert 4 (lowerCount [[1 1 1 1] [1 1 1 1]] 2)\n    assert 2 (lowerCount [[1 1 1 1] [1 1 1 1]] 9)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n\n#END:TEST\n#START:CHECK\ncheck(max_fill)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it,\n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n//\n// Example 1:\n//     Input:\n//         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n//         bucket_capacity : 1\n//     Output: 6\n//\n// Example 2:\n//     Input:\n//         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n//         bucket_capacity : 2\n//     Output: 5\n//\n// Example 3:\n//     Input:\n//         grid : [[0,0,0], [0,0,0]]\n//         bucket_capacity : 5\n//     Output: 0\n//\n// Constraints:\n//     * all wells have the same length\n//     * 1 <= grid.length <= 10^2\n//     * 1 <= grid[1].length <= 10^2\n//     * grid[i][j] -> 0 | 1\n//     * 1 <= capacity <= 10\nfunc lowerCount:num wells:[][]num capacity:num\n    result := 0\n    for well := range wells\n        size := 0\n        for unit := range well\n            size = size + unit\n        end\n        result = result + (ceil size/capacity)\n    end\n    return result\nend\n\nfunc test\n    assert 6 (lowerCount [[0 0 1 0] [0 1 0 0] [1 1 1 1]] 1)\n    assert 5 (lowerCount [[0 0 1 1] [0 0 0 0] [1 1 1 1] [0 1 1 1]] 2)\n    assert 0 (lowerCount [[0 0 0] [0 0 0]] 5)\n    assert 4 (lowerCount [[1 1 1 1] [1 1 1 1]] 2)\n    assert 2 (lowerCount [[1 1 1 1] [1 1 1 1]] 9)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// parseNestedParens \"(()()) ((())) () ((())()())\" // [2 3 1 3]\nfunc parse_paren_group:num s:string\n    depth:num\n    max_depth:num\n    for c := range s\n        if c == \"(\"\n            depth = depth + 1\n            max_depth = max depth max_depth\n        else\n            depth = depth - 1\n        end\n    end\n    return max_depth\nend\n\nfunc parseNestedParens:[]num paren_string:string\n    result:[]num\n    for x := range (split paren_string \" \")\n        if x != \"\"\n            result = result + [(parse_paren_group x)]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [2 3 1 3] (parseNestedParens \"(()()) ((())) () ((())()())\")\n    assert [1 2 3 4] (parseNestedParens \"() (()) ((())) (((())))\")\n    assert [4] (parseNestedParens \"(()(())((())))\")\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n#END:TEST\n#START:CHECK\ncheck(parse_nested_parens)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// parseNestedParens \"(()()) ((())) () ((())()())\" // [2 3 1 3]\nfunc parse_paren_group:num s:string\n    depth:num\n    max_depth:num\n    for c := range s\n        if c == \"(\"\n            depth = depth + 1\n            max_depth = max depth max_depth\n        else\n            depth = depth - 1\n        end\n    end\n    return max_depth\nend\n\nfunc parseNestedParens:[]num paren_string:string\n    result:[]num\n    for x := range (split paren_string \" \")\n        if x != \"\"\n            result = result + [(parse_paren_group x)]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [2 3 1 3] (parseNestedParens \"(()()) ((())) () ((())()())\")\n    assert [1 2 3 4] (parseNestedParens \"() (()) ((())) (((())))\")\n    assert [4] (parseNestedParens \"(()(())((())))\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  You are given an array arr of integers and you need to return sum of\n//  absolute values of the integers multiplied by product of all signs of\n//  each number in the array, represented by 1, -1 or 0. Note: return false\n//  for empty arr.\n//\n//  Example:\n//  signedAbsSum  [1, 2, 2, -4] // -9\n//  signedAbsSum  [0, 1] // 0\n//  signedAbsSum  [] // false\nfunc signedAbsSum:any nums:[]num\n    if (len nums) == 0\n        return false\n    end\n    sum := 0\n    s := 1\n\n    for n := range nums\n        sum = sum + (abs n)\n        s = s * (sign n)\n    end\n    return s * sum\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend\n\nfunc sign:num n:num\n    if n < 0\n        return -1\n    end\n    if n > 0\n        return 1\n    end\n    return 0\nend\n\nfunc test\n    assert -9 (signedAbsSum [1 2 2 -4])\n    assert 0 (signedAbsSum [0 1])\n    assert -10 (signedAbsSum [1 1 1 2 3 -1 1])\n    assert false (signedAbsSum [])\n    assert 20 (signedAbsSum [2 4 1 2 -1 -1 9])\n    assert 4 (signedAbsSum [-1 1 -1 1])\n    assert -4 (signedAbsSum [-1 1 1 1])\n    assert 0 (signedAbsSum [-1 1 1 0])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(prod_signs)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  You are given an array arr of integers and you need to return sum of\n//  absolute values of the integers multiplied by product of all signs of\n//  each number in the array, represented by 1, -1 or 0. Note: return false\n//  for empty arr.\n//\n//  Example:\n//  signedAbsSum  [1, 2, 2, -4] // -9\n//  signedAbsSum  [0, 1] // 0\n//  signedAbsSum  [] // false\nfunc signedAbsSum:any nums:[]num\n    if (len nums) == 0\n        return false\n    end\n    sum := 0\n    s := 1\n\n    for n := range nums\n        sum = sum + (abs n)\n        s = s * (sign n)\n    end\n    return s * sum\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend\n\nfunc sign:num n:num\n    if n < 0\n        return -1\n    end\n    if n > 0\n        return 1\n    end\n    return 0\nend\n\nfunc test\n    assert -9 (signedAbsSum [1 2 2 -4])\n    assert 0 (signedAbsSum [0 1])\n    assert -10 (signedAbsSum [1 1 1 2 3 -1 1])\n    assert false (signedAbsSum [])\n    assert 20 (signedAbsSum [2 4 1 2 -1 -1 9])\n    assert 4 (signedAbsSum [-1 1 -1 1])\n    assert -4 (signedAbsSum [-1 1 1 1])\n    assert 0 (signedAbsSum [-1 1 1 0])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n//  the last couple centuries. However, what people don't know is Tribonacci sequence.\n//  Tribonacci sequence is defined by the recurrence:\n//  tri(1) = 3\n//  tri(n) = 1 + n / 2, if n is even.\n//  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n//  For example:\n//  tri(2) = 1 + (2 / 2) = 2\n//  tri(4) = 3\n//  tri(3) = tri(2) + tri(1) + tri(4)\n//         = 2 + 3 + 3 = 8\n//  You are given a non-negative integer number n, you have to a return a list of the\n//  first n + 1 numbers of the Tribonacci sequence.\n//  Examples:\n//  tri(3) = [1, 3, 2, 8]\nfunc trin:[]num n:num\n    result := [1 3] + [1] * (n)\n    result[0] = 1\n    for i := range 2 n+2 2\n        result[i] = 1 + i / 2\n    end\n    for i := range 3 n+1 2\n        result[i] = result[i - 2] + result[i - 1] + result[i + 1]\n    end\n    return result[:n + 1]\nend\n\nfunc test\n    assert [1 3 2 8] (trin 3)\n    assert [1 3 2 8 3] (trin 4)\n    assert [1 3 2 8 3 15] (trin 5)\n    assert [1 3 2 8 3 15 4] (trin 6)\n    assert [1 3 2 8 3 15 4 24] (trin 7)\n    assert [1 3 2 8 3 15 4 24 5] (trin 8)\n    assert [1 3 2 8 3 15 4 24 5 35] (trin 9)\n    assert [1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11] (trin 20)\n    assert [1] (trin 0)\n    assert [1 3] (trin 1)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\n#END:TEST\n#START:CHECK\ncheck(tri)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n//  the last couple centuries. However, what people don't know is Tribonacci sequence.\n//  Tribonacci sequence is defined by the recurrence:\n//  tri(1) = 3\n//  tri(n) = 1 + n / 2, if n is even.\n//  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n//  For example:\n//  tri(2) = 1 + (2 / 2) = 2\n//  tri(4) = 3\n//  tri(3) = tri(2) + tri(1) + tri(4)\n//         = 2 + 3 + 3 = 8\n//  You are given a non-negative integer number n, you have to a return a list of the\n//  first n + 1 numbers of the Tribonacci sequence.\n//  Examples:\n//  tri(3) = [1, 3, 2, 8]\nfunc trin:[]num n:num\n    result := [1 3] + [1] * (n)\n    result[0] = 1\n    for i := range 2 n+2 2\n        result[i] = 1 + i / 2\n    end\n    for i := range 3 n+1 2\n        result[i] = result[i - 2] + result[i - 1] + result[i + 1]\n    end\n    return result[:n + 1]\nend\n\nfunc test\n    assert [1 3 2 8] (trin 3)\n    assert [1 3 2 8 3] (trin 4)\n    assert [1 3 2 8 3 15] (trin 5)\n    assert [1 3 2 8 3 15 4] (trin 6)\n    assert [1 3 2 8 3 15 4 24] (trin 7)\n    assert [1 3 2 8 3 15 4 24 5] (trin 8)\n    assert [1 3 2 8 3 15 4 24 5 35] (trin 9)\n    assert [1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11] (trin 20)\n    assert [1] (trin 0)\n    assert [1 3] (trin 1)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n//  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n//  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n//  Examples\n//  splitWords \"Hello world!\" // [\"Hello\", \"world!\"]\n//  splitWords \"Hello,world!\" // [\"Hello\", \"world!\"]\n//  splitWords \"abcdef\" // 3\nfunc splitWords:any s:string\n    ord := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25}\n    arr := split s \" \"\n    if (len arr) > 1\n        return arr\n    end\n    arr = split s \",\"\n    if (len arr) > 1\n        return arr\n    end\n    result := 0\n    for c := range s\n        if (has ord c) and ord[c] % 2 == 1\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [\"Hello\" \"world!\"] (splitWords \"Hello world!\")\n    assert [\"Hello\" \"world!\"] (splitWords \"Hello,world!\")\n    assert [\"Hello\" \"world,!\"] (splitWords \"Hello world,!\")\n    assert [\"Hello,Hello,world\" \"!\"] (splitWords \"Hello,Hello,world !\")\n    assert 3 (splitWords \"abcdef\")\n    assert 2 (splitWords \"aaabb\")\n    assert 1 (splitWords \"aaaBb\")\n    assert 0 (splitWords \"\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n\n#END:TEST\n#START:CHECK\ncheck(split_words)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n//  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n//  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n//  Examples\n//  splitWords \"Hello world!\" // [\"Hello\", \"world!\"]\n//  splitWords \"Hello,world!\" // [\"Hello\", \"world!\"]\n//  splitWords \"abcdef\" // 3\nfunc splitWords:any s:string\n    ord := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25}\n    arr := split s \" \"\n    if (len arr) > 1\n        return arr\n    end\n    arr = split s \",\"\n    if (len arr) > 1\n        return arr\n    end\n    result := 0\n    for c := range s\n        if (has ord c) and ord[c] % 2 == 1\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [\"Hello\" \"world!\"] (splitWords \"Hello world!\")\n    assert [\"Hello\" \"world!\"] (splitWords \"Hello,world!\")\n    assert [\"Hello\" \"world,!\"] (splitWords \"Hello world,!\")\n    assert [\"Hello,Hello,world\" \"!\"] (splitWords \"Hello,Hello,world !\")\n    assert 3 (splitWords \"abcdef\")\n    assert 2 (splitWords \"aaabb\")\n    assert 1 (splitWords \"aaaBb\")\n    assert 0 (splitWords \"\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n// stringSequence 0 // \"0\"\n// stringSequence 5 // \"0 1 2 3 4 5\"\nfunc stringSequence:string n:num\n    str := \"0\"\n    for x := range n\n        str = sprintf \"%s %v\" str x+1\n    end\n    return str\nend\n\nfunc test\n    assert \"0\" (stringSequence 0)\n    assert \"0 1 2 3\" (stringSequence 3)\n    assert \"0 1 2 3 4 5 6 7 8 9 10\" (stringSequence 10)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return ' '.join([str(x) for x in range(n + 1)])\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\n#END:TEST\n#START:CHECK\ncheck(string_sequence)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n// stringSequence 0 // \"0\"\n// stringSequence 5 // \"0 1 2 3 4 5\"\nfunc stringSequence:string n:num\n    str := \"0\"\n    for x := range n\n        str = sprintf \"%s %v\" str x+1\n    end\n    return str\nend\n\nfunc test\n    assert \"0\" (stringSequence 0)\n    assert \"0 1 2 3\" (stringSequence 3)\n    assert \"0 1 2 3 4 5 6 7 8 9 10\" (stringSequence 10)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment\n// are definitely worth noting down and comparing. Your task is to determine\n// if a person correctly guessed the results of a number of matches. You are\n// given two arrays of scores and guesses of equal length, where each index\n// shows a match. Return an array of the same length denoting how far off\n// each guess was. If they have guessed correctly, the value is 0, and if\n// not, the value is the absolute difference between the guess and the\n// score.\n// example:\n// compare [1,2,3,4,5,1],[1,2,3,4,2,-2] // [0,0,0,0,3,3]\n// compare [0,5,0,0,0,4],[4,1,1,0,0,-2] // [4,4,1,0,0,6]\nfunc compare:[]num scores:[]num guesses:[]num\n    length := len scores\n    result := [0] * length\n    for i := range length\n        result[i] = scores[i] - guesses[i]\n        if result[i] < 0\n            result[i] = -result[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [0 0 0 0 3 3] (compare [1 2 3 4 5 1] [1 2 3 4 2 -2])\n    assert [0 0 0 0 0 0] (compare [0 0 0 0 0 0] [0 0 0 0 0 0])\n    assert [2 4 6] (compare [1 2 3] [-1 -2 -3])\n    assert [2 0 0 1] (compare [1 2 3 5] [-1 2 3 4])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(compare)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment\n// are definitely worth noting down and comparing. Your task is to determine\n// if a person correctly guessed the results of a number of matches. You are\n// given two arrays of scores and guesses of equal length, where each index\n// shows a match. Return an array of the same length denoting how far off\n// each guess was. If they have guessed correctly, the value is 0, and if\n// not, the value is the absolute difference between the guess and the\n// score.\n// example:\n// compare [1,2,3,4,5,1],[1,2,3,4,2,-2] // [0,0,0,0,3,3]\n// compare [0,5,0,0,0,4],[4,1,1,0,0,-2] // [4,4,1,0,0,6]\nfunc compare:[]num scores:[]num guesses:[]num\n    length := len scores\n    result := [0] * length\n    for i := range length\n        result[i] = scores[i] - guesses[i]\n        if result[i] < 0\n            result[i] = -result[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [0 0 0 0 3 3] (compare [1 2 3 4 5 1] [1 2 3 4 2 -2])\n    assert [0 0 0 0 0 0] (compare [0 0 0 0 0 0] [0 0 0 0 0 0])\n    assert [2 4 6] (compare [1 2 3] [-1 -2 -3])\n    assert [2 0 0 1] (compare [1 2 3 5] [-1 2 3 4])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Check if two words have the same characters.\n// sameChars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\" // true\n// sameChars \"abcd\" \"dddddddabc\" // true\n// sameChars \"dddddddabc\" \"abcd\" // true\n// sameChars \"eabcd\" \"dddddddabc\" // false\n// sameChars \"abcd\" \"dddddddabce\" // false\n// sameChars \"eabcdzzzz\" \"dddzzzzzzzddddabc\" // false\nfunc sameChars:bool s1:string s2:string\n    return (set s1) == (set s2)\nend\n\nfunc set:{}bool s:string\n    result:{}bool\n    for c := range s\n        result[c] = true\n    end\n    return result\nend\n\nfunc test\n    assert true (sameChars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n    assert true (sameChars \"abcd\" \"dddddddabc\")\n    assert true (sameChars \"dddddddabc\" \"abcd\")\n    assert false (sameChars \"eabcd\" \"dddddddabc\")\n    assert false (sameChars \"abcd\" \"dddddddabcf\")\n    assert false (sameChars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n    assert false (sameChars \"aabb\" \"aaccc\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return set(s0) == set(s1)\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n\n#END:TEST\n#START:CHECK\ncheck(same_chars)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Check if two words have the same characters.\n// sameChars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\" // true\n// sameChars \"abcd\" \"dddddddabc\" // true\n// sameChars \"dddddddabc\" \"abcd\" // true\n// sameChars \"eabcd\" \"dddddddabc\" // false\n// sameChars \"abcd\" \"dddddddabce\" // false\n// sameChars \"eabcdzzzz\" \"dddzzzzzzzddddabc\" // false\nfunc sameChars:bool s1:string s2:string\n    return (set s1) == (set s2)\nend\n\nfunc set:{}bool s:string\n    result:{}bool\n    for c := range s\n        result[c] = true\n    end\n    return result\nend\n\nfunc test\n    assert true (sameChars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n    assert true (sameChars \"abcd\" \"dddddddabc\")\n    assert true (sameChars \"dddddddabc\" \"abcd\")\n    assert false (sameChars \"eabcd\" \"dddddddabc\")\n    assert false (sameChars \"abcd\" \"dddddddabcf\")\n    assert false (sameChars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n    assert false (sameChars \"aabb\" \"aaccc\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return the number of times the digit 7 appears in integers less than n\n// which are divisible by 11 or 13.\n// fizzBuzz 50 // 0\n// fizzBuzz 78 // 2\n// fizzBuzz 79 // 3\nfunc fizzBuzz:num n:num\n    str:string\n    for i := range n\n        if i % 11 == 0 or i % 13 == 0\n            str = str + (sprint i)\n        end\n    end\n    result := 0\n    for ch := range str\n        if ch == \"7\"\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (fizzBuzz 50)\n    assert 2 (fizzBuzz 78)\n    assert 3 (fizzBuzz 79)\n    assert 3 (fizzBuzz 100)\n    assert 6 (fizzBuzz 200)\n    assert 192 (fizzBuzz 4000)\n    assert 639 (fizzBuzz 10000)\n    assert 8026 (fizzBuzz 100000)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n\n#END:TEST\n#START:CHECK\ncheck(fizz_buzz)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return the number of times the digit 7 appears in integers less than n\n// which are divisible by 11 or 13.\n// fizzBuzz 50 // 0\n// fizzBuzz 78 // 2\n// fizzBuzz 79 // 3\nfunc fizzBuzz:num n:num\n    str:string\n    for i := range n\n        if i % 11 == 0 or i % 13 == 0\n            str = str + (sprint i)\n        end\n    end\n    result := 0\n    for ch := range str\n        if ch == \"7\"\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (fizzBuzz 50)\n    assert 2 (fizzBuzz 78)\n    assert 3 (fizzBuzz 79)\n    assert 3 (fizzBuzz 100)\n    assert 6 (fizzBuzz 200)\n    assert 192 (fizzBuzz 4000)\n    assert 639 (fizzBuzz 10000)\n    assert 8026 (fizzBuzz 100000)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // sumZero takes an array of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// sumZero [1 3 5 0] // false\n// sumZero [1 3 -2 1] // false\n// sumZero [1 2 3 7] // false\n// sumZero [2 4 -5 3 5 7] // true\n// sumZero [1] // false\nfunc sumZero:bool nums:[]num\n    length := len nums\n    for i := range length\n        for j := range i+1 length\n            if nums[i] + nums[j] == 0\n                return true\n            end\n        end\n    end\n    return false\nend\n\nfunc test\n    assert false (sumZero [1 3 5 0])\n    assert false (sumZero [1 3 -2 1])\n    assert false (sumZero [1 2 3 7])\n    assert true (sumZero [2 4 -5 3 5 7])\n    assert false (sumZero [1])\n    assert true (sumZero [-3 9 -1 3 2 30])\n    assert true (sumZero [-3 9 -1 3 2 31])\n    assert false (sumZero [-3 9 -1 4 2 30])\n    assert false (sumZero [-3 9 -1 4 2 31])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n\n#END:TEST\n#START:CHECK\ncheck(pairs_sum_to_zero)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // sumZero takes an array of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// sumZero [1 3 5 0] // false\n// sumZero [1 3 -2 1] // false\n// sumZero [1 2 3 7] // false\n// sumZero [2 4 -5 3 5 7] // true\n// sumZero [1] // false\nfunc sumZero:bool nums:[]num\n    length := len nums\n    for i := range length\n        for j := range i+1 length\n            if nums[i] + nums[j] == 0\n                return true\n            end\n        end\n    end\n    return false\nend\n\nfunc test\n    assert false (sumZero [1 3 5 0])\n    assert false (sumZero [1 3 -2 1])\n    assert false (sumZero [1 2 3 7])\n    assert true (sumZero [2 4 -5 3 5 7])\n    assert false (sumZero [1])\n    assert true (sumZero [-3 9 -1 3 2 30])\n    assert true (sumZero [-3 9 -1 3 2 31])\n    assert false (sumZero [-3 9 -1 4 2 30])\n    assert false (sumZero [-3 9 -1 4 2 31])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You are given a array of numbers.\n// Write a function nextSmallest that returns the 2nd smallest element of the list.\n// Return false if there is no such element.\n// nextSmallest [1 2 3 4 5]) == 2\n// nextSmallest [5 1 4 3 2]) == 2\n// nextSmallest []) == false\n// nextSmallest [1 1]) == false\nfunc nextSmallest:any nums:[]num\n    if (len nums) < 2\n        return false\n    end\n    nums = nums[:] // copy\n    sort nums\n    smallest := nums[0]\n    for i := range 1 (len nums)\n        if nums[i] > smallest\n            return nums[i]\n        end\n    end\n    return false\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert 2 (nextSmallest [1 2 3 4 5])\n    assert 2 (nextSmallest [5 1 4 3 2])\n    assert false (nextSmallest [])\n    assert false (nextSmallest [1 1])\n    assert 1 (nextSmallest [1 1 1 1 0])\n    assert -35 (nextSmallest [-35 34 12 -45])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(next_smallest)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given a array of numbers.\n// Write a function nextSmallest that returns the 2nd smallest element of the list.\n// Return false if there is no such element.\n// nextSmallest [1 2 3 4 5]) == 2\n// nextSmallest [5 1 4 3 2]) == 2\n// nextSmallest []) == false\n// nextSmallest [1 1]) == false\nfunc nextSmallest:any nums:[]num\n    if (len nums) < 2\n        return false\n    end\n    nums = nums[:] // copy\n    sort nums\n    smallest := nums[0]\n    for i := range 1 (len nums)\n        if nums[i] > smallest\n            return nums[i]\n        end\n    end\n    return false\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert 2 (nextSmallest [1 2 3 4 5])\n    assert 2 (nextSmallest [5 1 4 3 2])\n    assert false (nextSmallest [])\n    assert false (nextSmallest [1 1])\n    assert 1 (nextSmallest [1 1 1 1 0])\n    assert -35 (nextSmallest [-35 34 12 -45])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // You are given 2 words. You need to return true if the second word or any of\n// its rotations is a substring in the first word\n//\n// contains \"abcd\" \"abd\" // false\n// contains \"hello\" \"ell\" // true\n// contains \"whassup\" \"psus\" // false\n// contains \"abab\" \"baa\" // true\n// contains \"efef\" \"eeff\" // false\n// contains \"himenss\" \"simen\" // true\nfunc contains:bool s:string sub:string\n    for i := range (len sub)\n        sub1 := sub[i:] + sub[:i]\n        if (index s sub1) != -1\n            return true\n        end\n    end\n    return false\nend\n\nfunc test\n    assert false (contains \"xyzw\" \"xyw\")\n    assert true (contains \"yello\" \"ell\")\n    assert false (contains \"whattup\" \"ptut\")\n    assert true (contains \"efef\" \"fee\")\n    assert false (contains \"abab\" \"aabb\")\n    assert true (contains \"winemtt\" \"tinem\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n\n#END:TEST\n#START:CHECK\ncheck(cycpattern_check)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given 2 words. You need to return true if the second word or any of\n// its rotations is a substring in the first word\n//\n// contains \"abcd\" \"abd\" // false\n// contains \"hello\" \"ell\" // true\n// contains \"whassup\" \"psus\" // false\n// contains \"abab\" \"baa\" // true\n// contains \"efef\" \"eeff\" // false\n// contains \"himenss\" \"simen\" // true\nfunc contains:bool s:string sub:string\n    for i := range (len sub)\n        sub1 := sub[i:] + sub[:i]\n        if (index s sub1) != -1\n            return true\n        end\n    end\n    return false\nend\n\nfunc test\n    assert false (contains \"xyzw\" \"xyw\")\n    assert true (contains \"yello\" \"ell\")\n    assert false (contains \"whattup\" \"ptut\")\n    assert true (contains \"efef\" \"fee\")\n    assert false (contains \"abab\" \"aabb\")\n    assert true (contains \"winemtt\" \"tinem\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Create a function which takes a string representing a file's name, and returns\nabc := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25 A:0 B:1 C:2 D:3 E:4 F:5 G:6 H:7 I:8 J:9 K:10 L:11 M:12 N:13 O:14 P:15 Q:16 R:17 S:18 T:19 U:20 V:21 W:22 X:23 Y:24 Z:25}\n\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions\n// are met:\n// - There should not be more than three digits (0-9) in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from\n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// checkFilename  \"example.txt\" // 'Yes'\n// checkFilename  \"1example.dll\" // 'No' (the name should start with a latin alphapet letter)\nfunc checkFilename:string filename:string\n    ext := {txt:0 exe:0 dll:0}\n    parts := split filename \".\"\n    if (len parts) != 2 or !(has ext parts[1]) or (len parts[0]) == 0 or !(has abc parts[0][0])\n        return \"No\"\n    end\n\n    digitCount := 0\n    for c := range parts[0]\n        str2num c\n        if !err\n            digitCount = digitCount + 1\n        end\n    end\n    if digitCount > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\nfunc test\n    assert \"Yes\" (checkFilename \"example.txt\")\n    assert \"No\" (checkFilename \"1example.dll\")\n    assert \"No\" (checkFilename \"s1sdf3.asd\")\n    assert \"Yes\" (checkFilename \"K.dll\")\n    assert \"Yes\" (checkFilename \"MY16FILE3.exe\")\n    assert \"No\" (checkFilename \"His12FILE94.exe\")\n    assert \"No\" (checkFilename \"_Y.txt\")\n    assert \"No\" (checkFilename \"?aREYA.exe\")\n    assert \"No\" (checkFilename \"/this_is_valid.dll\")\n    assert \"No\" (checkFilename \"this_is_valid.wow\")\n    assert \"Yes\" (checkFilename \"this_is_valid.txt\")\n    assert \"No\" (checkFilename \"this_is_valid.txtexe\")\n    assert \"No\" (checkFilename \"#this2_i4s_5valid.ten\")\n    assert \"No\" (checkFilename \"@this1_is6_valid.exe\")\n    assert \"No\" (checkFilename \"this_is_12valid.6exe4.txt\")\n    assert \"No\" (checkFilename \"all.exe.txt\")\n    assert \"Yes\" (checkFilename \"I563_No.exe\")\n    assert \"Yes\" (checkFilename \"Is3youfault.txt\")\n    assert \"Yes\" (checkFilename \"no_one#knows.dll\")\n    assert \"No\" (checkFilename \"1I563_Yes3.exe\")\n    assert \"No\" (checkFilename \"I563_Yes3.txtt\")\n    assert \"No\" (checkFilename \"final..txt\")\n    assert \"No\" (checkFilename \"final132\")\n    assert \"No\" (checkFilename \"_f4indsartal132.\")\n    assert \"No\" (checkFilename \".txt\")\n    assert \"No\" (checkFilename \"s.\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n\n#END:TEST\n#START:CHECK\ncheck(file_name_check)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Create a function which takes a string representing a file's name, and returns\nabc := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25 A:0 B:1 C:2 D:3 E:4 F:5 G:6 H:7 I:8 J:9 K:10 L:11 M:12 N:13 O:14 P:15 Q:16 R:17 S:18 T:19 U:20 V:21 W:22 X:23 Y:24 Z:25}\n\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions\n// are met:\n// - There should not be more than three digits (0-9) in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from\n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// checkFilename  \"example.txt\" // 'Yes'\n// checkFilename  \"1example.dll\" // 'No' (the name should start with a latin alphapet letter)\nfunc checkFilename:string filename:string\n    ext := {txt:0 exe:0 dll:0}\n    parts := split filename \".\"\n    if (len parts) != 2 or !(has ext parts[1]) or (len parts[0]) == 0 or !(has abc parts[0][0])\n        return \"No\"\n    end\n\n    digitCount := 0\n    for c := range parts[0]\n        str2num c\n        if !err\n            digitCount = digitCount + 1\n        end\n    end\n    if digitCount > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\nfunc test\n    assert \"Yes\" (checkFilename \"example.txt\")\n    assert \"No\" (checkFilename \"1example.dll\")\n    assert \"No\" (checkFilename \"s1sdf3.asd\")\n    assert \"Yes\" (checkFilename \"K.dll\")\n    assert \"Yes\" (checkFilename \"MY16FILE3.exe\")\n    assert \"No\" (checkFilename \"His12FILE94.exe\")\n    assert \"No\" (checkFilename \"_Y.txt\")\n    assert \"No\" (checkFilename \"?aREYA.exe\")\n    assert \"No\" (checkFilename \"/this_is_valid.dll\")\n    assert \"No\" (checkFilename \"this_is_valid.wow\")\n    assert \"Yes\" (checkFilename \"this_is_valid.txt\")\n    assert \"No\" (checkFilename \"this_is_valid.txtexe\")\n    assert \"No\" (checkFilename \"#this2_i4s_5valid.ten\")\n    assert \"No\" (checkFilename \"@this1_is6_valid.exe\")\n    assert \"No\" (checkFilename \"this_is_12valid.6exe4.txt\")\n    assert \"No\" (checkFilename \"all.exe.txt\")\n    assert \"Yes\" (checkFilename \"I563_No.exe\")\n    assert \"Yes\" (checkFilename \"Is3youfault.txt\")\n    assert \"Yes\" (checkFilename \"no_one#knows.dll\")\n    assert \"No\" (checkFilename \"1I563_Yes3.exe\")\n    assert \"No\" (checkFilename \"I563_Yes3.txtt\")\n    assert \"No\" (checkFilename \"final..txt\")\n    assert \"No\" (checkFilename \"final132\")\n    assert \"No\" (checkFilename \"_f4indsartal132.\")\n    assert \"No\" (checkFilename \".txt\")\n    assert \"No\" (checkFilename \"s.\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Write a function that takes a message, and encodes in such a way that it\n//  swaps case of all letters, replaces all vowels in the message with the\n//  letter that appears 2 places ahead of that vowel in the English alphabet.\n//  Assume only letters.\n//\n//  Examples:\n//  >>> encode \"test\"\n//  \"TGST\"\n//  >>> encode \"This is a message\"\n//  \"tHKS KS C MGSSCGG\"\nfunc encode:string str:string\n    map := {a:\"c\" e:\"g\" i:\"k\" o:\"q\" u:\"w\" A:\"C\" E:\"G\" I:\"K\" O:\"Q\" U:\"W\"}\n    result:string\n    for i := range (len str)\n        ch := str[i]\n        if has map ch\n            ch = map[ch]\n        end\n        if \"a\" <= ch\n            result = result + (upper ch)\n        else\n            result = result + (lower ch)\n        end\n    end\n    return result\nend\n\nfunc test\n    assert \"tgst\" (encode \"TEST\")\n    assert \"mWDCSKR\" (encode \"Mudasir\")\n    assert \"ygs\" (encode \"YES\")\n    assert \"tHKS KS C MGSSCGG\" (encode \"This is a message\")\n    assert \"k dQnT kNqW wHcT Tq wRkTg\" (encode \"I DoNt KnOw WhAt tO WrItE\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(encode)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Write a function that takes a message, and encodes in such a way that it\n//  swaps case of all letters, replaces all vowels in the message with the\n//  letter that appears 2 places ahead of that vowel in the English alphabet.\n//  Assume only letters.\n//\n//  Examples:\n//  >>> encode \"test\"\n//  \"TGST\"\n//  >>> encode \"This is a message\"\n//  \"tHKS KS C MGSSCGG\"\nfunc encode:string str:string\n    map := {a:\"c\" e:\"g\" i:\"k\" o:\"q\" u:\"w\" A:\"C\" E:\"G\" I:\"K\" O:\"Q\" U:\"W\"}\n    result:string\n    for i := range (len str)\n        ch := str[i]\n        if has map ch\n            ch = map[ch]\n        end\n        if \"a\" <= ch\n            result = result + (upper ch)\n        else\n            result = result + (lower ch)\n        end\n    end\n    return result\nend\n\nfunc test\n    assert \"tgst\" (encode \"TEST\")\n    assert \"mWDCSKR\" (encode \"Mudasir\")\n    assert \"ygs\" (encode \"YES\")\n    assert \"tHKS KS C MGSSCGG\" (encode \"This is a message\")\n    assert \"k dQnT kNqW wHcT Tq wRkTg\" (encode \"I DoNt KnOw WhAt tO WrItE\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy ascii := {A:65 B:66 C:67 D:68 E:69 F:70 G:71 H:72 I:73 J:74 K:75 L:76 M:77 N:78 O:79 P:80 Q:81 R:82 S:83 T:84 U:85 V:86 W:87 X:88 Y:89 Z:90 a:97 b:98 c:99 d:100 e:101 f:102 g:103 h:104 i:105 j:106 k:107 l:108 m:109 n:110 o:111 p:112 q:113 r:114 s:115 t:116 u:117 v:118 w:119 x:120 y:121 z:122}\nascii[\" \"] = 32\nascii[\"!\"] = 33\nascii[\"\\\"\"] = 34\nascii[\"#\"] = 35\nascii[\"$\"] = 36\nascii[\"%\"] = 37\nascii[\"&\"] = 38\nascii[\"'\"] = 39\nascii[\"(\"] = 40\nascii[\")\"] = 41\nascii[\"*\"] = 42\nascii[\"+\"] = 43\nascii[\",\"] = 44\nascii[\"-\"] = 45\nascii[\".\"] = 46\nascii[\"/\"] = 47\nascii[\"0\"] = 48\nascii[\"1\"] = 49\nascii[\"2\"] = 50\nascii[\"3\"] = 51\nascii[\"4\"] = 52\nascii[\"5\"] = 53\nascii[\"6\"] = 54\nascii[\"7\"] = 55\nascii[\"8\"] = 56\nascii[\"9\"] = 57\nascii[\":\"] = 58\nascii[\";\"] = 59\nascii[\"<\"] = 60\nascii[\"=\"] = 61\nascii[\">\"] = 62\nascii[\"?\"] = 63\nascii[\"@\"] = 64\nascii[\"[\"] = 91\nascii[\"\\\\\"] = 92\nascii[\"]\"] = 93\nascii[\"^\"] = 94\nascii[\"_\"] = 95\nascii[\"`\"] = 96\nascii[\"{\"] = 123\nascii[\"|\"] = 124\nascii[\"}\"] = 125\nascii[\"~\"] = 126\n\n//  Write a function that takes a string and returns an ordered version of it.\n//  Ordered version of string, is a string where all words  separated by space\n//  are replaced by a new word where all the characters arranged in\n//  ascending order based on ascii value.\n//  Note: You should keep the order of words and blank spaces in the sentence.\n//  For example:\n//  antiShuffle \"Hi\"  returns \"Hi\"\n//  antiShuffle \"hello\"  returns \"ehllo\"\n//  antiShuffle \"Hello World!!!\"  returns \"Hello !!!Wdlor\"\nfunc antiShuffle:string s:string\n    words := split s \" \"\n    for i := range (len words)\n        words[i] = sort words[i]\n    end\n    return join words \" \"\nend\n\nfunc sort:string str:string\n    s := str\n    // bubble sort\n    for endIdx := range (len s)-1 0 -1\n        for i := range endIdx\n            if ascii[s[i]] > ascii[s[i + 1]]\n                s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n            end\n        end\n    end\n    return s\nend\n\nfunc test\n    assert \"Hi\" (antiShuffle \"Hi\")\n    assert \"ehllo\" (antiShuffle \"hello\")\n    assert \"bemnru\" (antiShuffle \"number\")\n    assert \"abcd\" (antiShuffle \"abcd\")\n    assert \"Hello !!!Wdlor\" (antiShuffle \"Hello World!!!\")\n    assert \"\" (antiShuffle \"\")\n    assert \".Hi My aemn is Meirst .Rboot How aer ?ouy\" (antiShuffle \"Hi. My name is Mister Robot. How are you?\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(anti_shuffle)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy ascii := {A:65 B:66 C:67 D:68 E:69 F:70 G:71 H:72 I:73 J:74 K:75 L:76 M:77 N:78 O:79 P:80 Q:81 R:82 S:83 T:84 U:85 V:86 W:87 X:88 Y:89 Z:90 a:97 b:98 c:99 d:100 e:101 f:102 g:103 h:104 i:105 j:106 k:107 l:108 m:109 n:110 o:111 p:112 q:113 r:114 s:115 t:116 u:117 v:118 w:119 x:120 y:121 z:122}\nascii[\" \"] = 32\nascii[\"!\"] = 33\nascii[\"\\\"\"] = 34\nascii[\"#\"] = 35\nascii[\"$\"] = 36\nascii[\"%\"] = 37\nascii[\"&\"] = 38\nascii[\"'\"] = 39\nascii[\"(\"] = 40\nascii[\")\"] = 41\nascii[\"*\"] = 42\nascii[\"+\"] = 43\nascii[\",\"] = 44\nascii[\"-\"] = 45\nascii[\".\"] = 46\nascii[\"/\"] = 47\nascii[\"0\"] = 48\nascii[\"1\"] = 49\nascii[\"2\"] = 50\nascii[\"3\"] = 51\nascii[\"4\"] = 52\nascii[\"5\"] = 53\nascii[\"6\"] = 54\nascii[\"7\"] = 55\nascii[\"8\"] = 56\nascii[\"9\"] = 57\nascii[\":\"] = 58\nascii[\";\"] = 59\nascii[\"<\"] = 60\nascii[\"=\"] = 61\nascii[\">\"] = 62\nascii[\"?\"] = 63\nascii[\"@\"] = 64\nascii[\"[\"] = 91\nascii[\"\\\\\"] = 92\nascii[\"]\"] = 93\nascii[\"^\"] = 94\nascii[\"_\"] = 95\nascii[\"`\"] = 96\nascii[\"{\"] = 123\nascii[\"|\"] = 124\nascii[\"}\"] = 125\nascii[\"~\"] = 126\n\n//  Write a function that takes a string and returns an ordered version of it.\n//  Ordered version of string, is a string where all words  separated by space\n//  are replaced by a new word where all the characters arranged in\n//  ascending order based on ascii value.\n//  Note: You should keep the order of words and blank spaces in the sentence.\n//  For example:\n//  antiShuffle \"Hi\"  returns \"Hi\"\n//  antiShuffle \"hello\"  returns \"ehllo\"\n//  antiShuffle \"Hello World!!!\"  returns \"Hello !!!Wdlor\"\nfunc antiShuffle:string s:string\n    words := split s \" \"\n    for i := range (len words)\n        words[i] = sort words[i]\n    end\n    return join words \" \"\nend\n\nfunc sort:string str:string\n    s := str\n    // bubble sort\n    for endIdx := range (len s)-1 0 -1\n        for i := range endIdx\n            if ascii[s[i]] > ascii[s[i + 1]]\n                s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n            end\n        end\n    end\n    return s\nend\n\nfunc test\n    assert \"Hi\" (antiShuffle \"Hi\")\n    assert \"ehllo\" (antiShuffle \"hello\")\n    assert \"bemnru\" (antiShuffle \"number\")\n    assert \"abcd\" (antiShuffle \"abcd\")\n    assert \"Hello !!!Wdlor\" (antiShuffle \"Hello World!!!\")\n    assert \"\" (antiShuffle \"\")\n    assert \".Hi My aemn is Meirst .Rboot How aer ?ouy\" (antiShuffle \"Hi. My name is Mister Robot. How are you?\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sort:[]string arr:[]string\n    result:[]string\n    for s := range arr\n        if (len s) % 2 == 0\n            result = result + [s]\n        end\n    end\n\n    for endIdx := range (len result)-1 0 -1\n        for i := range endIdx\n            if comp result[i] result[i + 1]\n                tmp := result[i]\n                result[i] = result[i + 1]\n                result[i + 1] = tmp\n            end\n        end\n    end\n    return result\nend\n\nfunc comp:bool s1:string s2:string\n    if (len s1) == (len s2)\n        return s1 > s2\n    end\n    return (len s1) > (len s2)\nend\n\nfunc test\n    assert [\"aa\"] (sort [\"aa\" \"a\" \"aaa\"])\n    assert [\"AI\" \"asdf\" \"school\"] (sort [\"school\" \"AI\" \"asdf\" \"b\"])\n    assert [] (sort [\"d\" \"b\" \"c\" \"a\"])\n    assert [\"abcd\" \"dcba\"] (sort [\"d\" \"dcba\" \"abcd\" \"a\"])\n    assert [\"AI\" \"ai\" \"au\"] (sort [\"AI\" \"ai\" \"au\"])\n    assert [] (sort [\"a\" \"b\" \"b\" \"c\" \"c\" \"a\"])\n    assert [\"cc\" \"dd\" \"aaaa\" \"bbbb\"] (sort [\"aaaa\" \"bbbb\" \"dd\" \"cc\"])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n\n#END:TEST\n#START:CHECK\ncheck(sorted_list_sum)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sort:[]string arr:[]string\n    result:[]string\n    for s := range arr\n        if (len s) % 2 == 0\n            result = result + [s]\n        end\n    end\n\n    for endIdx := range (len result)-1 0 -1\n        for i := range endIdx\n            if comp result[i] result[i + 1]\n                tmp := result[i]\n                result[i] = result[i + 1]\n                result[i + 1] = tmp\n            end\n        end\n    end\n    return result\nend\n\nfunc comp:bool s1:string s2:string\n    if (len s1) == (len s2)\n        return s1 > s2\n    end\n    return (len s1) > (len s2)\nend\n\nfunc test\n    assert [\"aa\"] (sort [\"aa\" \"a\" \"aaa\"])\n    assert [\"AI\" \"asdf\" \"school\"] (sort [\"school\" \"AI\" \"asdf\" \"b\"])\n    assert [] (sort [\"d\" \"b\" \"c\" \"a\"])\n    assert [\"abcd\" \"dcba\"] (sort [\"d\" \"dcba\" \"abcd\" \"a\"])\n    assert [\"AI\" \"ai\" \"au\"] (sort [\"AI\" \"ai\" \"au\"])\n    assert [] (sort [\"a\" \"b\" \"b\" \"c\" \"c\" \"a\"])\n    assert [\"cc\" \"dd\" \"aaaa\" \"bbbb\"] (sort [\"aaaa\" \"bbbb\" \"dd\" \"cc\"])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Out of list of strings, return the longest one. Return the first one in\n// case of multiple strings of the same length. Return \"\" in case the input\n// list is empty.\n// longest [] // \"\"\n// longest([\"a\" \"b\" \"c\"]) // \"a\"\n// longest([\"a\" \"bb\" \"ccc\"]) \"ccc\"\nfunc longest:string strings:[]string\n    if (len strings) == 0\n        return \"\"\n    end\n    maxlen := 0\n    for s := range strings\n        if (len s) > maxlen\n            maxlen = (len s)\n        end\n    end\n    for s := range strings\n        if (len s) == maxlen\n            return s\n        end\n    end\n    return \"\"\nend\n\nfunc test\n    assert \"\" (longest [])\n    assert \"x\" (longest [\"x\" \"y\" \"z\"])\n    assert \"zzzz\" (longest [\"x\" \"yyy\" \"zzzz\" \"www\" \"kkkk\" \"abc\"])\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n#END:TEST\n#START:CHECK\ncheck(longest)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Out of list of strings, return the longest one. Return the first one in\n// case of multiple strings of the same length. Return \"\" in case the input\n// list is empty.\n// longest [] // \"\"\n// longest([\"a\" \"b\" \"c\"]) // \"a\"\n// longest([\"a\" \"bb\" \"ccc\"]) \"ccc\"\nfunc longest:string strings:[]string\n    if (len strings) == 0\n        return \"\"\n    end\n    maxlen := 0\n    for s := range strings\n        if (len s) > maxlen\n            maxlen = (len s)\n        end\n    end\n    for s := range strings\n        if (len s) == maxlen\n            return s\n        end\n    end\n    return \"\"\nend\n\nfunc test\n    assert \"\" (longest [])\n    assert \"x\" (longest [\"x\" \"y\" \"z\"])\n    assert \"zzzz\" (longest [\"x\" \"yyy\" \"zzzz\" \"www\" \"kkkk\" \"abc\"])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy abc := \"abcdefghijklmnopqrstuvwxyz\"\nord := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25}\n\n//  Create a function encrypt that takes a string as an argument and\n//  returns a string encrypted with the alphabet being rotated.\n//  The alphabet should be rotated in a manner such that the letters\n//  shift down by two multiplied to two places.\n//  For example:\n//  encrypt \"hi\"  returns \"lm\"\n//  encrypt \"asdfghjkl\"  returns \"ewhjklnop\"\n//  encrypt \"gf\"  returns \"kj\"\n//  encrypt \"et\"  returns \"ix\"\nfunc encrypt:string s:string\n    result := \"\"\n    for ch := range s\n        result = result + abc[(ord[ch] + 4) % 26]\n    end\n    return result\nend\n\nfunc test\n    assert \"lm\" (encrypt \"hi\")\n    assert \"ewhjklnop\" (encrypt \"asdfghjkl\")\n    assert \"kj\" (encrypt \"gf\")\n    assert \"ix\" (encrypt \"et\")\n    assert \"jeiajeaijeiak\" (encrypt \"faewfawefaewg\")\n    assert \"lippsqcjvmirh\" (encrypt \"hellomyfriend\")\n    assert \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" (encrypt \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")\n    assert \"e\" (encrypt \"a\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(encrypt)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy abc := \"abcdefghijklmnopqrstuvwxyz\"\nord := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25}\n\n//  Create a function encrypt that takes a string as an argument and\n//  returns a string encrypted with the alphabet being rotated.\n//  The alphabet should be rotated in a manner such that the letters\n//  shift down by two multiplied to two places.\n//  For example:\n//  encrypt \"hi\"  returns \"lm\"\n//  encrypt \"asdfghjkl\"  returns \"ewhjklnop\"\n//  encrypt \"gf\"  returns \"kj\"\n//  encrypt \"et\"  returns \"ix\"\nfunc encrypt:string s:string\n    result := \"\"\n    for ch := range s\n        result = result + abc[(ord[ch] + 4) % 26]\n    end\n    return result\nend\n\nfunc test\n    assert \"lm\" (encrypt \"hi\")\n    assert \"ewhjklnop\" (encrypt \"asdfghjkl\")\n    assert \"kj\" (encrypt \"gf\")\n    assert \"ix\" (encrypt \"et\")\n    assert \"jeiajeaijeiak\" (encrypt \"faewfawefaewg\")\n    assert \"lippsqcjvmirh\" (encrypt \"hellomyfriend\")\n    assert \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" (encrypt \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")\n    assert \"e\" (encrypt \"a\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // You are given a non-empty list of positive integers. Return the greatest\n// integer that is greater than zero, and has a frequency greater than or\n// equal to the value of the integer itself. The frequency of an integer is\n// the number of times it appears in the list. If no such a value exist,\n// return -1.\n// Examples:\n//     (search [4 1 2 2 3 1]) == 2\n//     (search [1 2 2 3 3 3 4 4 4]) == 3\n//     (search [5 5 4 4 4]) == -1\nfunc search:num nums:[]num\n    freq:{}num\n    for n := range nums\n        ns := sprint n\n        if has freq ns\n            freq[ns] = freq[ns] + 1\n        else\n            freq[ns] = 1\n        end\n    end\n\n    result := -1\n    for ns := range freq\n        f := freq[ns]\n        n := str2num ns\n        if f >= n and n > result\n            result = n\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 1 (search [5 5 5 5 1])\n    assert 4 (search [4 1 4 1 4 4])\n    assert -1 (search [3 3])\n    assert 8 (search [8 8 8 8 8 8 8 8])\n    assert 2 (search [2 3 3 2 2])\n    assert 1 (search [2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1])\n    assert 2 (search [3 2 8 2])\n    assert 1 (search [6 7 1 8 8 10 5 8 5 3 10])\n    assert -1 (search [8 8 3 6 5 6 4])\n    assert 1 (search [6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9])\n    assert 1 (search [1 9 10 1 3])\n    assert 5 (search [6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10])\n    assert 1 (search [1])\n    assert 4 (search [8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5])\n    assert 2 (search [2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10])\n    assert 1 (search [1 6 10 1 6 9 10 8 6 8 7 3])\n    assert 4 (search [9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4])\n    assert 4 (search [2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7])\n    assert 2 (search [9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1])\n    assert -1 (search [5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8])\n    assert -1 (search [10])\n    assert 2 (search [9 7 7 2 4 7 2 10 9 7 5 7 2])\n    assert 1 (search [5 4 10 2 1 1 10 3 6 1 8])\n    assert 1 (search [7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6])\n    assert -1 (search [3 10 10 9 2])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n\n#END:TEST\n#START:CHECK\ncheck(search)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given a non-empty list of positive integers. Return the greatest\n// integer that is greater than zero, and has a frequency greater than or\n// equal to the value of the integer itself. The frequency of an integer is\n// the number of times it appears in the list. If no such a value exist,\n// return -1.\n// Examples:\n//     (search [4 1 2 2 3 1]) == 2\n//     (search [1 2 2 3 3 3 4 4 4]) == 3\n//     (search [5 5 4 4 4]) == -1\nfunc search:num nums:[]num\n    freq:{}num\n    for n := range nums\n        ns := sprint n\n        if has freq ns\n            freq[ns] = freq[ns] + 1\n        else\n            freq[ns] = 1\n        end\n    end\n\n    result := -1\n    for ns := range freq\n        f := freq[ns]\n        n := str2num ns\n        if f >= n and n > result\n            result = n\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 1 (search [5 5 5 5 1])\n    assert 4 (search [4 1 4 1 4 4])\n    assert -1 (search [3 3])\n    assert 8 (search [8 8 8 8 8 8 8 8])\n    assert 2 (search [2 3 3 2 2])\n    assert 1 (search [2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1])\n    assert 2 (search [3 2 8 2])\n    assert 1 (search [6 7 1 8 8 10 5 8 5 3 10])\n    assert -1 (search [8 8 3 6 5 6 4])\n    assert 1 (search [6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9])\n    assert 1 (search [1 9 10 1 3])\n    assert 5 (search [6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10])\n    assert 1 (search [1])\n    assert 4 (search [8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5])\n    assert 2 (search [2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10])\n    assert 1 (search [1 6 10 1 6 9 10 8 6 8 7 3])\n    assert 4 (search [9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4])\n    assert 4 (search [2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7])\n    assert 2 (search [9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1])\n    assert -1 (search [5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8])\n    assert -1 (search [10])\n    assert 2 (search [9 7 7 2 4 7 2 10 9 7 5 7 2])\n    assert 1 (search [5 4 10 2 1 1 10 3 6 1 8])\n    assert 1 (search [7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6])\n    assert -1 (search [3 10 10 9 2])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given two lists operator, and operand. The first list has basic algebra\n// operations, and the second list is a list of integers. Use the two given\n// lists to build the algebraic expression and return the evaluation of this\n// expression. The basic algebra operations:\n// Addition ( + )\n// Subtraction ( - )\n// Multiplication ( * )\n// Floor division ( // )\n// Exponentiation ( ** )\n// Example:\n// operator = [\"+\" \"*\" \"-\"]\n// array = [2 3 4 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Assumption: ** left associative.\n// Note:\n//     The length of operator list is equal to the length of operand list minus one.\n//     Operand is a list of of non-negative integers.\n//     Operator list has at least one operator, and operand list has at least two operands.\nfunc solve:num ops:[]string nums:[]num\n    return solveExp ops nums 0\nend\n\nprecedence:{}num\nprecedence[\"+\"] = 1\nprecedence[\"-\"] = 1\nprecedence[\"*\"] = 2\nprecedence[\"//\"] = 2\nprecedence[\"**\"] = 3\n\nfunc solveExp:num ops:[]string nums:[]num prec:num\n    left := nums[0]\n    while (len ops) != 0 and prec < precedence[ops[0]]\n        op := ops[0]\n        ops = ops[1:]\n        nums = nums[1:]\n        right := solveExp ops nums precedence[op]\n        left = solveOp left op right\n    end\n    return left\nend\n\nfunc solveOp:num a:num op:string b:num\n    if op == \"+\"\n        return a + b\n    else if op == \"-\"\n        return a - b\n    else if op == \"*\"\n        return a * b\n    else if op == \"//\"\n        return floor a/b\n    else if op == \"**\"\n        return pow a b\n    end\n    print \"unknown op\" op\n    return -1\nend\n\nfunc test\n    assert 37 (solve [\"**\" \"*\" \"+\"] [2 3 4 5])\n    assert 9 (solve [\"+\" \"*\" \"-\"] [2 3 4 5])\n    assert 8 (solve [\"//\" \"*\"] [7 3 4])\n    assert 7 (solve [\"+\" \"*\"] [1 2 3])\n    assert 5 (solve [\"*\" \"+\"] [1 2 3])\n    assert 14 (solve [\"*\" \"+\" \"*\"] [1 2 3 4])\n    assert 11 (solve [\"+\" \"*\" \"+\"] [1 2 3 4])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(do_algebra)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given two lists operator, and operand. The first list has basic algebra\n// operations, and the second list is a list of integers. Use the two given\n// lists to build the algebraic expression and return the evaluation of this\n// expression. The basic algebra operations:\n// Addition ( + )\n// Subtraction ( - )\n// Multiplication ( * )\n// Floor division ( // )\n// Exponentiation ( ** )\n// Example:\n// operator = [\"+\" \"*\" \"-\"]\n// array = [2 3 4 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Assumption: ** left associative.\n// Note:\n//     The length of operator list is equal to the length of operand list minus one.\n//     Operand is a list of of non-negative integers.\n//     Operator list has at least one operator, and operand list has at least two operands.\nfunc solve:num ops:[]string nums:[]num\n    return solveExp ops nums 0\nend\n\nprecedence:{}num\nprecedence[\"+\"] = 1\nprecedence[\"-\"] = 1\nprecedence[\"*\"] = 2\nprecedence[\"//\"] = 2\nprecedence[\"**\"] = 3\n\nfunc solveExp:num ops:[]string nums:[]num prec:num\n    left := nums[0]\n    while (len ops) != 0 and prec < precedence[ops[0]]\n        op := ops[0]\n        ops = ops[1:]\n        nums = nums[1:]\n        right := solveExp ops nums precedence[op]\n        left = solveOp left op right\n    end\n    return left\nend\n\nfunc solveOp:num a:num op:string b:num\n    if op == \"+\"\n        return a + b\n    else if op == \"-\"\n        return a - b\n    else if op == \"*\"\n        return a * b\n    else if op == \"//\"\n        return floor a/b\n    else if op == \"**\"\n        return pow a b\n    end\n    print \"unknown op\" op\n    return -1\nend\n\nfunc test\n    assert 37 (solve [\"**\" \"*\" \"+\"] [2 3 4 5])\n    assert 9 (solve [\"+\" \"*\" \"-\"] [2 3 4 5])\n    assert 8 (solve [\"//\" \"*\"] [7 3 4])\n    assert 7 (solve [\"+\" \"*\"] [1 2 3])\n    assert 5 (solve [\"*\" \"+\"] [1 2 3])\n    assert 14 (solve [\"*\" \"+\" \"*\"] [1 2 3 4])\n    assert 11 (solve [\"+\" \"*\" \"+\"] [1 2 3 4])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given an array representing a branch of a tree that has non-negative\n// integer nodes your task is to pluck one of the nodes and return it. The\n// plucked node should be the node with the smallest even value. If multiple\n// nodes with the same smallest even value are found return the node that has\n// smallest index.\n//\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n//\n// Example 1:\n//   Input: [4 2 3]\n//   Output: [2 1]\n//   Explanation: 2 has the smallest even value, and 2 has the smallest index.\n//\n// Example 2:\n//   Input: [1 2 3]\n//   Output: [2 1]\n//   Explanation: 2 has the smallest even value, and 2 has the smallest index.\n//\n// Example 3:\n//   Input: []\n//   Output: []\n//\n// Example 4:\n//   Input: [5, 0, 3, 0, 4, 2]\n//   Output: [0, 1]\n//   Explanation: 0 is the smallest value, but  there are two zeros,\n//   so we will choose the first zero, which has the smallest index.\n//\n// Constraints:\n//     1 <= len(nodes) <= 10000\n//     0 <= val\nfunc pluck:[]num nums:[]num\n    idx := -1\n    val := -1\n    for i := range (len nums)\n        n := nums[i]\n        if n % 2 == 0 and (val == -1 or n < val)\n            idx = i\n            val = n\n        end\n    end\n    if idx == -1\n        return []\n    end\n    return [val idx]\nend\n\nfunc test\n    assert [2 1] (pluck [4 2 3])\n    assert [2 1] (pluck [1 2 3])\n    assert [] (pluck [])\n    assert [0 1] (pluck [5 0 3 0 4 2])\n    assert [0 3] (pluck [1 2 3 0 5 3])\n    assert [4 1] (pluck [5 4 8 4 8])\n    assert [6 1] (pluck [7 6 7 1])\n    assert [] (pluck [7 9 7 1])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n\n#END:TEST\n#START:CHECK\ncheck(pluck)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given an array representing a branch of a tree that has non-negative\n// integer nodes your task is to pluck one of the nodes and return it. The\n// plucked node should be the node with the smallest even value. If multiple\n// nodes with the same smallest even value are found return the node that has\n// smallest index.\n//\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n//\n// Example 1:\n//   Input: [4 2 3]\n//   Output: [2 1]\n//   Explanation: 2 has the smallest even value, and 2 has the smallest index.\n//\n// Example 2:\n//   Input: [1 2 3]\n//   Output: [2 1]\n//   Explanation: 2 has the smallest even value, and 2 has the smallest index.\n//\n// Example 3:\n//   Input: []\n//   Output: []\n//\n// Example 4:\n//   Input: [5, 0, 3, 0, 4, 2]\n//   Output: [0, 1]\n//   Explanation: 0 is the smallest value, but  there are two zeros,\n//   so we will choose the first zero, which has the smallest index.\n//\n// Constraints:\n//     1 <= len(nodes) <= 10000\n//     0 <= val\nfunc pluck:[]num nums:[]num\n    idx := -1\n    val := -1\n    for i := range (len nums)\n        n := nums[i]\n        if n % 2 == 0 and (val == -1 or n < val)\n            idx = i\n            val = n\n        end\n    end\n    if idx == -1\n        return []\n    end\n    return [val idx]\nend\n\nfunc test\n    assert [2 1] (pluck [4 2 3])\n    assert [2 1] (pluck [1 2 3])\n    assert [] (pluck [])\n    assert [0 1] (pluck [5 0 3 0 4 2])\n    assert [0 3] (pluck [1 2 3 0 5 3])\n    assert [4 1] (pluck [5 4 8 4 8])\n    assert [6 1] (pluck [7 6 7 1])\n    assert [] (pluck [7 9 7 1])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n//  Example\n//  isSum 4 // false\n//  isSum 6 // false\n//  isSum 8 // true\nfunc isSum:bool n:num\n    return n % 2 == 0 and n >= 8\nend\n\nfunc test\n    assert false (isSum 4)\n    assert false (isSum 6)\n    assert true (isSum 8)\n    assert true (isSum 10)\n    assert false (isSum 11)\n    assert true (isSum 12)\n    assert false (isSum 13)\n    assert true (isSum 16)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return n%2 == 0 and n >= 8\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n\n#END:TEST\n#START:CHECK\ncheck(is_equal_to_sum_even)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n//  Example\n//  isSum 4 // false\n//  isSum 6 // false\n//  isSum 8 // true\nfunc isSum:bool n:num\n    return n % 2 == 0 and n >= 8\nend\n\nfunc test\n    assert false (isSum 4)\n    assert false (isSum 6)\n    assert true (isSum 8)\n    assert true (isSum 10)\n    assert false (isSum 11)\n    assert true (isSum 12)\n    assert false (isSum 13)\n    assert true (isSum 16)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return median of elements in the list l.\n// median [3 1 2 4 5] // 3\n// median [-10 4 6 1000 10 20] // 15.0\nfunc median:num nums:[]num\n    length := len nums\n    if length == 0\n        return -1\n    end\n    result := nums[:]\n    sort result\n    if length % 2 == 1\n        return result[floor length/2]\n    else\n        return (result[length / 2 - 1] + result[length / 2]) / 2\n    end\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert 3 (median [3 1 2 4 5])\n    assert 8 (median [-10 4 6 1000 10 20])\n    assert 5 (median [5])\n    assert 5.5 (median [6 5])\n    assert 7 (median [8 1 3 9 9 2 7])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n\n#END:TEST\n#START:CHECK\ncheck(median)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return median of elements in the list l.\n// median [3 1 2 4 5] // 3\n// median [-10 4 6 1000 10 20] // 15.0\nfunc median:num nums:[]num\n    length := len nums\n    if length == 0\n        return -1\n    end\n    result := nums[:]\n    sort result\n    if length % 2 == 1\n        return result[floor length/2]\n    else\n        return (result[length / 2 - 1] + result[length / 2]) / 2\n    end\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert 3 (median [3 1 2 4 5])\n    assert 8 (median [-10 4 6 1000 10 20])\n    assert 5 (median [5])\n    assert 5.5 (median [6 5])\n    assert 7 (median [8 1 3 9 9 2 7])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return n-th Fibonacci number.\n// fib 10  // 55\n// fib 1  // 1\n// fib 8  // 21\nfunc fib:num n:num\n    if n < 2\n        return n\n    end\n    return (fib n-1) + (fib n-2)\nend\n\nfunc test\n    assert 55 (fib 10)\n    assert 1 (fib 1)\n    assert 21 (fib 8)\n    assert 89 (fib 11)\n    assert 144 (fib 12)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n\n#END:TEST\n#START:CHECK\ncheck(fib)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return n-th Fibonacci number.\n// fib 10  // 55\n// fib 1  // 1\n// fib 8  // 21\nfunc fib:num n:num\n    if n < 2\n        return n\n    end\n    return (fib n-1) + (fib n-2)\nend\n\nfunc test\n    assert 55 (fib 10)\n    assert 1 (fib 1)\n    assert 21 (fib 8)\n    assert 89 (fib 11)\n    assert 144 (fib 12)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You're a hungry rabbit, and you already have eaten a certain number of\n// carrots, but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your\n// meals, the number of carrots left after your meals ] if there are not\n// enough remaining carrots, you will eat all remaining carrots, but will\n// still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n//     the number of carrots that you have eaten.\n// @need : integer\n//     the number of carrots that you need to eat.\n// @remaining : integer\n//     the number of remaining carrots that exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\nfunc eat:[]num done:num need:num stock:num\n    if need <= stock\n        return [done+need stock-need]\n    else\n        return [done+stock 0]\n    end\nend\n\nfunc test\n    assert [11 4] (eat 5 6 10)\n    assert [12 1] (eat 4 8 9)\n    assert [11 0] (eat 1 10 10)\n    assert [7 0] (eat 2 11 5)\n    assert [9 2] (eat 4 5 7)\n    assert [5 0] (eat 4 5 1)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n\n#END:TEST\n#START:CHECK\ncheck(eat)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You're a hungry rabbit, and you already have eaten a certain number of\n// carrots, but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your\n// meals, the number of carrots left after your meals ] if there are not\n// enough remaining carrots, you will eat all remaining carrots, but will\n// still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n//     the number of carrots that you have eaten.\n// @need : integer\n//     the number of carrots that you need to eat.\n// @remaining : integer\n//     the number of remaining carrots that exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\nfunc eat:[]num done:num need:num stock:num\n    if need <= stock\n        return [done+need stock-need]\n    else\n        return [done+stock 0]\n    end\nend\n\nfunc test\n    assert [11 4] (eat 5 6 10)\n    assert [12 1] (eat 4 8 9)\n    assert [11 0] (eat 1 10 10)\n    assert [7 0] (eat 2 11 5)\n    assert [9 2] (eat 4 5 7)\n    assert [5 0] (eat 4 5 1)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy abc := \"abcdefghijklmnopqrstuvwxyz\"\nord := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25}\n\n// encode returns encoded string by shifting every character by 5 in the\n// alphabet. Message is all lowercase ascii.\nfunc encode:string str:string\n    result := \"\"\n    for ch := range str\n        result = result + abc[(ord[ch] + 5) % 26]\n    end\n    return result\nend\n\n// decode takes as input string encoded with encode_shift function. Returns\n// decoded string.\nfunc decode:string str:string\n    result := \"\"\n    for ch := range str\n        result = result + abc[(ord[ch] + 21) % 26]\n    end\n    return result\nend\n\nfunc test\n    assert \"\" (encode \"\")\n    assert \"\" (decode \"\")\n    assert \"fg\" (encode \"ab\")\n    assert \"ab\" (decode \"fg\")\n    assert abc (decode (encode abc))\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n\n#END:TEST\n#START:CHECK\ncheck(decode_shift)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy abc := \"abcdefghijklmnopqrstuvwxyz\"\nord := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25}\n\n// encode returns encoded string by shifting every character by 5 in the\n// alphabet. Message is all lowercase ascii.\nfunc encode:string str:string\n    result := \"\"\n    for ch := range str\n        result = result + abc[(ord[ch] + 5) % 26]\n    end\n    return result\nend\n\n// decode takes as input string encoded with encode_shift function. Returns\n// decoded string.\nfunc decode:string str:string\n    result := \"\"\n    for ch := range str\n        result = result + abc[(ord[ch] + 21) % 26]\n    end\n    return result\nend\n\nfunc test\n    assert \"\" (encode \"\")\n    assert \"\" (decode \"\")\n    assert \"fg\" (encode \"ab\")\n    assert \"ab\" (decode \"fg\")\n    assert abc (decode (encode abc))\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Input to this function is a string containing multiple groups of nested\n// parentheses. Your goal is to separate those group into separate strings\n// and return the list of those. Separate groups are balanced (each open\n// brace is properly closed) and not nested within each other Ignore any\n// spaces in the input string.\n//\n//    separateParenGroups \"( ) (( )) (( )( ))\"\n//    // [\"()\" \"(())\" \"(()())\"]\n//\nfunc separateParenGroups:[]string paren_string:string\n    result:[]string\n    current_string:string\n    current_depth:num\n    current_depth = 0\n\n    for c := range (len paren_string)\n        if paren_string[c] == \"(\"\n            current_depth = current_depth + 1\n            current_string = current_string + paren_string[c]\n        else if paren_string[c] == \")\"\n            current_depth = current_depth - 1\n            current_string = current_string + paren_string[c]\n\n            if current_depth == 0\n                result = result + [current_string]\n                current_string = \"\"\n            end\n        end\n    end\n\n    return result\nend\n\nfunc test\n    assert [\"(()())\" \"((()))\" \"()\" \"((())()())\"] (separateParenGroups \"(()()) ((())) () ((())()())\")\n    assert [\"()\" \"(())\" \"((()))\" \"(((())))\"] (separateParenGroups \"() (()) ((())) (((())))\")\n    assert [\"(()(())((())))\"] (separateParenGroups \"(()(())((())))\")\n    assert [\"()\" \"(())\" \"(()())\"] (separateParenGroups \"( ) (( )) (( )( ))\")\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n\n#END:TEST\n#START:CHECK\ncheck(separate_paren_groups)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Input to this function is a string containing multiple groups of nested\n// parentheses. Your goal is to separate those group into separate strings\n// and return the list of those. Separate groups are balanced (each open\n// brace is properly closed) and not nested within each other Ignore any\n// spaces in the input string.\n//\n//    separateParenGroups \"( ) (( )) (( )( ))\"\n//    // [\"()\" \"(())\" \"(()())\"]\n//\nfunc separateParenGroups:[]string paren_string:string\n    result:[]string\n    current_string:string\n    current_depth:num\n    current_depth = 0\n\n    for c := range (len paren_string)\n        if paren_string[c] == \"(\"\n            current_depth = current_depth + 1\n            current_string = current_string + paren_string[c]\n        else if paren_string[c] == \")\"\n            current_depth = current_depth - 1\n            current_string = current_string + paren_string[c]\n\n            if current_depth == 0\n                result = result + [current_string]\n                current_string = \"\"\n            end\n        end\n    end\n\n    return result\nend\n\nfunc test\n    assert [\"(()())\" \"((()))\" \"()\" \"((())()())\"] (separateParenGroups \"(()()) ((())) () ((())()())\")\n    assert [\"()\" \"(())\" \"((()))\" \"(((())))\"] (separateParenGroups \"() (()) ((())) (((())))\")\n    assert [\"(()(())((())))\"] (separateParenGroups \"(()(())((())))\")\n    assert [\"()\" \"(())\" \"(()())\"] (separateParenGroups \"( ) (( )) (( )( ))\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a positive integer n, return the product of the odd digits.\n//  Return 0 if all digits are even.\n//  For example:\n//  digitProd 1 // 1\n//  digitProd 4 // 0\n//  digitProd 235 // 15\nfunc digitProd:num n:num\n    product := 1\n    hasOdds := false\n    while n > 0\n        digit := n % 10\n        if digit % 2 == 1\n            product = product * digit\n            hasOdds = true\n        end\n        n = floor n/10\n    end\n    if hasOdds\n        return product\n    end\n    return 0\nend\n\nfunc test\n    assert 5 (digitProd 5)\n    assert 5 (digitProd 54)\n    assert 1 (digitProd 120)\n    assert 5 (digitProd 5014)\n    assert 315 (digitProd 98765)\n    assert 2625 (digitProd 5576543)\n    assert 0 (digitProd 2468)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n\n#END:TEST\n#START:CHECK\ncheck(digits)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a positive integer n, return the product of the odd digits.\n//  Return 0 if all digits are even.\n//  For example:\n//  digitProd 1 // 1\n//  digitProd 4 // 0\n//  digitProd 235 // 15\nfunc digitProd:num n:num\n    product := 1\n    hasOdds := false\n    while n > 0\n        digit := n % 10\n        if digit % 2 == 1\n            product = product * digit\n            hasOdds = true\n        end\n        n = floor n/10\n    end\n    if hasOdds\n        return product\n    end\n    return 0\nend\n\nfunc test\n    assert 5 (digitProd 5)\n    assert 5 (digitProd 54)\n    assert 1 (digitProd 120)\n    assert 5 (digitProd 5014)\n    assert 315 (digitProd 98765)\n    assert 2625 (digitProd 5576543)\n    assert 0 (digitProd 2468)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You will be given a number in decimal form and your task is to convert it\n// to binary format. The function should return a string, with each character\n// representing a binary number. Each character in the string will be '0'\n// or '1'.\n//\n// There will be an extra couple of characters 'db' at the beginning and at\n// the end of the string. The extra characters are there to help with the\n// format.\n//\n// Examples:\n// convert 15 // \"db1111db\"\n// convert 32 // \"db100000db\"\nfunc convert:string n:num\n    if n == 0\n        return \"db0db\"\n    end\n    result := \"\"\n    while n > 0\n        if n % 2 == 0\n            result = \"0\" + result\n        else\n            result = \"1\" + result\n        end\n        n = floor n/2\n    end\n    return \"db\" + result + \"db\"\nend\n\nfunc test\n    assert \"db0db\" (convert 0)\n    assert \"db100000db\" (convert 32)\n    assert \"db1100111db\" (convert 103)\n    assert \"db1111db\" (convert 15)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(decimal_to_binary)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You will be given a number in decimal form and your task is to convert it\n// to binary format. The function should return a string, with each character\n// representing a binary number. Each character in the string will be '0'\n// or '1'.\n//\n// There will be an extra couple of characters 'db' at the beginning and at\n// the end of the string. The extra characters are there to help with the\n// format.\n//\n// Examples:\n// convert 15 // \"db1111db\"\n// convert 32 // \"db100000db\"\nfunc convert:string n:num\n    if n == 0\n        return \"db0db\"\n    end\n    result := \"\"\n    while n > 0\n        if n % 2 == 0\n            result = \"0\" + result\n        else\n            result = \"1\" + result\n        end\n        n = floor n/2\n    end\n    return \"db\" + result + \"db\"\nend\n\nfunc test\n    assert \"db0db\" (convert 0)\n    assert \"db100000db\" (convert 32)\n    assert \"db1100111db\" (convert 103)\n    assert \"db1111db\" (convert 15)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n//     Input: arr = [111 21 3 4000 5 6 7 8 9]  k = 4\n//     Output: 24 # sum of 21 + 3\n// Constraints:\n//     1. 1 <= len(arr) <= 100\n//     2. 1 <= k <= len(arr)\nfunc solve:num nums:[]num k:num\n    result := 0\n    for i := range k\n        if nums[i] < 100\n            result = result + nums[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert -4 (solve [1 -2 -3 41 57 76 87 88 99] 3)\n    assert 0 (solve [111 121 3 4000 5 6] 2)\n    assert 125 (solve [11 21 3 90 5 6 7 8 9] 4)\n    assert 24 (solve [111 21 3 4000 5 6 7 8 9] 4)\n    assert 1 (solve [1] 1)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(add_elements)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n//     Input: arr = [111 21 3 4000 5 6 7 8 9]  k = 4\n//     Output: 24 # sum of 21 + 3\n// Constraints:\n//     1. 1 <= len(arr) <= 100\n//     2. 1 <= k <= len(arr)\nfunc solve:num nums:[]num k:num\n    result := 0\n    for i := range k\n        if nums[i] < 100\n            result = result + nums[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert -4 (solve [1 -2 -3 41 57 76 87 88 99] 3)\n    assert 0 (solve [111 121 3 4000 5 6] 2)\n    assert 125 (solve [11 21 3 90 5 6 7 8 9] 4)\n    assert 24 (solve [111 21 3 4000 5 6 7 8 9] 4)\n    assert 1 (solve [1] 1)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// compare 1 2.5 // 2.5\n// compare 1 \"23\" // \"23\"\n// compare \"5,1\" \"6\" // \"6\"\n// compare \"1\" 1 // false\nfunc compare:any a:any b:any\n    an := toNum a\n    bn := toNum b\n    if an == bn\n        return false\n    else if an > bn\n        return a\n    end\n    return b\nend\n\nfunc toNum:num a:any\n    aType := typeof a\n    if aType == \"num\"\n        return a.(num)\n    end\n    sn := a.(string)\n    sn = replace sn \",\" \".\"\n    return str2num sn\nend\n\nfunc test\n    assert 2 (compare 1 2)\n    assert 2.5 (compare 1 2.5)\n    assert 3 (compare 2 3)\n    assert 6 (compare 5 6)\n    assert \"2,3\" (compare 1 \"2,3\")\n    assert \"6\" (compare \"5,1\" \"6\")\n    assert \"2\" (compare \"1\" \"2\")\n    assert false (compare \"1\" 1)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(compare_one)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// compare 1 2.5 // 2.5\n// compare 1 \"23\" // \"23\"\n// compare \"5,1\" \"6\" // \"6\"\n// compare \"1\" 1 // false\nfunc compare:any a:any b:any\n    an := toNum a\n    bn := toNum b\n    if an == bn\n        return false\n    else if an > bn\n        return a\n    end\n    return b\nend\n\nfunc toNum:num a:any\n    aType := typeof a\n    if aType == \"num\"\n        return a.(num)\n    end\n    sn := a.(string)\n    sn = replace sn \",\" \".\"\n    return str2num sn\nend\n\nfunc test\n    assert 2 (compare 1 2)\n    assert 2.5 (compare 1 2.5)\n    assert 3 (compare 2 3)\n    assert 6 (compare 5 6)\n    assert \"2,3\" (compare 1 \"2,3\")\n    assert \"6\" (compare \"5,1\" \"6\")\n    assert \"2\" (compare \"1\" \"2\")\n    assert false (compare \"1\" 1)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n//",
  "input-python #START:PROMPT\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,",
  "output: ",
  "output-text ",
  "output-evy // Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n//",
  "input: ",
  "input-text ",
  "input-evy // You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m).\n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// avg 1 5 // \"0b11\"\n// avg 7 5 // -1\n// avg 10 20 // \"0b1111\"\n// avg 20 33 // \"0b11010\"\nfunc avg:any n:num m:num\n    if m < n\n        return -1\n    end\n    a := round (m + n)/2\n    result := \"\"\n    while a > 0\n        result = (sprint a%2) + result\n        a = floor a/2\n    end\n    return \"0b\" + result\nend\n\nfunc test\n    assert \"0b11\" (avg 1 5)\n    assert \"0b1010\" (avg 7 13)\n    assert \"0b1111001011\" (avg 964 977)\n    assert \"0b1111100101\" (avg 996 997)\n    assert \"0b1011000010\" (avg 560 851)\n    assert \"0b101101110\" (avg 185 546)\n    assert \"0b110101101\" (avg 362 496)\n    assert \"0b1001110010\" (avg 350 902)\n    assert \"0b11010111\" (avg 197 233)\n    assert -1 (avg 7 5)\n    assert -1 (avg 5 1)\n    assert \"0b101\" (avg 5 5)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n\n#END:TEST\n#START:CHECK\ncheck(rounded_avg)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m).\n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// avg 1 5 // \"0b11\"\n// avg 7 5 // -1\n// avg 10 20 // \"0b1111\"\n// avg 20 33 // \"0b11010\"\nfunc avg:any n:num m:num\n    if m < n\n        return -1\n    end\n    a := round (m + n)/2\n    result := \"\"\n    while a > 0\n        result = (sprint a%2) + result\n        a = floor a/2\n    end\n    return \"0b\" + result\nend\n\nfunc test\n    assert \"0b11\" (avg 1 5)\n    assert \"0b1010\" (avg 7 13)\n    assert \"0b1111001011\" (avg 964 977)\n    assert \"0b1111100101\" (avg 996 997)\n    assert \"0b1011000010\" (avg 560 851)\n    assert \"0b101101110\" (avg 185 546)\n    assert \"0b110101101\" (avg 362 496)\n    assert \"0b1001110010\" (avg 350 902)\n    assert \"0b11010111\" (avg 197 233)\n    assert -1 (avg 7 5)\n    assert -1 (avg 5 1)\n    assert \"0b101\" (avg 5 5)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given an array of nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSum [2 3 4 1 2 4] // 1\n// minSum [-1 -2 -3] // -6\nfunc minSum:num nums:[]num\n    ms := nums[0]\n    runningSum := ms\n\n    for n := range nums[1:]\n        if n < runningSum + n\n            runningSum = n\n        else\n            runningSum = runningSum + n\n        end\n        if runningSum < ms\n            ms = runningSum\n        end\n    end\n    return ms\nend\n\nfunc test\n    assert -5 (minSum [2 3 -4 1 -2 4])\n    assert -7 (minSum [2 -1 1 -6 2 3 -4 1 -3 4])\n    assert 1 (minSum [2 3 4 1 2 4])\n    assert -6 (minSum [-1 -2 -3])\n    assert -14 (minSum [-1 -2 -3 2 -10])\n    assert -10000000000000000 (minSum [-10000000000000000])\n    assert 0 (minSum [0 10 20 1000000])\n    assert -6 (minSum [-1 -2 -3 10 -5])\n    assert -6 (minSum [100 -1 -2 -3 10 -5])\n    assert 3 (minSum [10 11 13 8 3 4])\n    assert -33 (minSum [100 -33 32 -1 0 -2])\n    assert -10 (minSum [-10])\n    assert 7 (minSum [7])\n    assert -1 (minSum [1 -1])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\n#END:TEST\n#START:CHECK\ncheck(minSubArraySum)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given an array of nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSum [2 3 4 1 2 4] // 1\n// minSum [-1 -2 -3] // -6\nfunc minSum:num nums:[]num\n    ms := nums[0]\n    runningSum := ms\n\n    for n := range nums[1:]\n        if n < runningSum + n\n            runningSum = n\n        else\n            runningSum = runningSum + n\n        end\n        if runningSum < ms\n            ms = runningSum\n        end\n    end\n    return ms\nend\n\nfunc test\n    assert -5 (minSum [2 3 -4 1 -2 4])\n    assert -7 (minSum [2 -1 1 -6 2 3 -4 1 -3 4])\n    assert 1 (minSum [2 3 4 1 2 4])\n    assert -6 (minSum [-1 -2 -3])\n    assert -14 (minSum [-1 -2 -3 2 -10])\n    assert -10000000000000000 (minSum [-10000000000000000])\n    assert 0 (minSum [0 10 20 1000000])\n    assert -6 (minSum [-1 -2 -3 10 -5])\n    assert -6 (minSum [100 -1 -2 -3 10 -5])\n    assert 3 (minSum [10 11 13 8 3 4])\n    assert -33 (minSum [100 -33 32 -1 0 -2])\n    assert -10 (minSum [-10])\n    assert 7 (minSum [7])\n    assert -1 (minSum [1 -1])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // From a supplied list of numbers (of length at least two) select and return\n// two that are the closest to each other and return them in order\n// (smaller number, larger number).\n//\n// findClosest [1.0 2.0 3.0 4.0 5.0 2.2] // [2.0 2.2]\n// findClosest [1.0 2.0 3.0 4.0 5.0 2.0] // [2.0 2.0]\nfunc findClosest:[]num nums:[]num\n    distance := -1\n    length := len nums\n    result := [0] * 2\n\n    for i := range length\n        for j := range length\n            if i != j\n                d := abs nums[i]-nums[j]\n                if d < distance or distance == -1\n                    distance = d\n                    result[0] = nums[i]\n                    result[1] = nums[j]\n                end\n            end\n        end\n    end\n    if result[1] < result[0]\n        return [result[1] result[0]]\n    end\n    return result\nend\n\nfunc abs:num n:num\n    if n >= 0\n        return n\n    end\n    return -n\nend\n\nfunc test\n    assert [3.9 4] (findClosest [1 2 3.9 4 5 2.2])\n    assert [5 5.9] (findClosest [1 2 5.9 4 5])\n    assert [2 2.2] (findClosest [1 2 3 4 5 2.2])\n    assert [2 2] (findClosest [1 2 3 4 5 2])\n    assert [2.2 3.1] (findClosest [1.1 2.2 3.1 4.1 5.1])\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n\n#END:TEST\n#START:CHECK\ncheck(find_closest_elements)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // From a supplied list of numbers (of length at least two) select and return\n// two that are the closest to each other and return them in order\n// (smaller number, larger number).\n//\n// findClosest [1.0 2.0 3.0 4.0 5.0 2.2] // [2.0 2.2]\n// findClosest [1.0 2.0 3.0 4.0 5.0 2.0] // [2.0 2.0]\nfunc findClosest:[]num nums:[]num\n    distance := -1\n    length := len nums\n    result := [0] * 2\n\n    for i := range length\n        for j := range length\n            if i != j\n                d := abs nums[i]-nums[j]\n                if d < distance or distance == -1\n                    distance = d\n                    result[0] = nums[i]\n                    result[1] = nums[j]\n                end\n            end\n        end\n    end\n    if result[1] < result[0]\n        return [result[1] result[0]]\n    end\n    return result\nend\n\nfunc abs:num n:num\n    if n >= 0\n        return n\n    end\n    return -n\nend\n\nfunc test\n    assert [3.9 4] (findClosest [1 2 3.9 4 5 2.2])\n    assert [5 5.9] (findClosest [1 2 5.9 4 5])\n    assert [2 2.2] (findClosest [1 2 3 4 5 2.2])\n    assert [2 2] (findClosest [1 2 3 4 5 2])\n    assert [2.2 3.1] (findClosest [1.1 2.2 3.1 4.1 5.1])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// isPower 1 4 // true: 4^0 == 1\n// isPower 2 2 // true: 2^1 == 2\n// isPower 8 2 // true: 2^3 == 8\n// isPower 3 2 // false\n// isPower 3 1 // false\n// isPower 5 3 // false\nfunc isPower:bool x:num n:num\n    for exp := range x\n        x2 := pow n exp\n        if x == x2\n            return true\n        end\n        if x2 > x\n            return false\n        end\n    end\n    return false\nend\n\nfunc test\n    assert true (isPower 1 1)\n    assert true (isPower 1 12)\n    assert false (isPower 12 1)\n    assert true (isPower 16 2)\n    assert false (isPower 143214 16)\n    assert true (isPower 4 2)\n    assert true (isPower 9 3)\n    assert true (isPower 16 4)\n    assert false (isPower 24 2)\n    assert false (isPower 128 4)\n    assert false (isPower 12 6)\n    assert true (isPower 1 1)\n    assert true (isPower 1 12)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(is_simple_power)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// isPower 1 4 // true: 4^0 == 1\n// isPower 2 2 // true: 2^1 == 2\n// isPower 8 2 // true: 2^3 == 8\n// isPower 3 2 // false\n// isPower 3 1 // false\n// isPower 5 3 // false\nfunc isPower:bool x:num n:num\n    for exp := range x\n        x2 := pow n exp\n        if x == x2\n            return true\n        end\n        if x2 > x\n            return false\n        end\n    end\n    return false\nend\n\nfunc test\n    assert true (isPower 1 1)\n    assert true (isPower 1 12)\n    assert false (isPower 12 1)\n    assert true (isPower 16 2)\n    assert false (isPower 143214 16)\n    assert true (isPower 4 2)\n    assert true (isPower 9 3)\n    assert true (isPower 16 4)\n    assert false (isPower 24 2)\n    assert false (isPower 128 4)\n    assert false (isPower 12 6)\n    assert true (isPower 1 1)\n    assert true (isPower 1 12)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // The fib3 number sequence is a sequence similar to the Fibonacci sequence\n// that's defined as follows:\n// (fib3 0) == 0\n// (fib3 1) == 0\n// (fib3 2) == 1\n// (fib3 n) == (fib3 n-1) + (fib3 n-2) + fib3 n-3).\n// Please write a function to efficiently compute the n-th element of the fib3\n// number sequence.\n// fib3 1 // 0\n// fib3 5 // 4\n// fib3 8 // 24\nfunc fib3:num n:num\n    result := [0 0 1]\n    if n < 3\n        return result[n]\n    end\n    for range n-2\n        result = result + [result[-1]+result[-2]+result[-3]]\n    end\n    return result[-1]\nend\n\nfunc test\n    assert 1 (fib3 2)\n    assert 0 (fib3 1)\n    assert 4 (fib3 5)\n    assert 24 (fib3 8)\n    assert 81 (fib3 10)\n    assert 274 (fib3 12)\n    assert 927 (fib3 14)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\n#END:TEST\n#START:CHECK\ncheck(fibfib)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // The fib3 number sequence is a sequence similar to the Fibonacci sequence\n// that's defined as follows:\n// (fib3 0) == 0\n// (fib3 1) == 0\n// (fib3 2) == 1\n// (fib3 n) == (fib3 n-1) + (fib3 n-2) + fib3 n-3).\n// Please write a function to efficiently compute the n-th element of the fib3\n// number sequence.\n// fib3 1 // 0\n// fib3 5 // 4\n// fib3 8 // 24\nfunc fib3:num n:num\n    result := [0 0 1]\n    if n < 3\n        return result[n]\n    end\n    for range n-2\n        result = result + [result[-1]+result[-2]+result[-3]]\n    end\n    return result[-1]\nend\n\nfunc test\n    assert 1 (fib3 2)\n    assert 0 (fib3 1)\n    assert 4 (fib3 5)\n    assert 24 (fib3 8)\n    assert 81 (fib3 10)\n    assert 274 (fib3 12)\n    assert 927 (fib3 14)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Write a function that takes an array of numbers as input and returns\n// the number of elements in the array that are greater than 10 and both\n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73, 14, -15]) => 1\n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nfunc filter:num nums:[]num\n    result := 0\n    for n := range nums\n        if n > 10 and (n % 2 == 1)\n            if n < 0\n                n = -n\n            end\n            n1 := str2num (sprint n)[0]\n            if n1 % 2 == 1\n                result = result + 1\n            end\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (filter [5 -2 1 -5])\n    assert 1 (filter [15 -73 14 -15])\n    assert 2 (filter [33 -2 -3 45 21 109])\n    assert 4 (filter [43 -12 93 125 121 109])\n    assert 3 (filter [71 -2 -33 75 21 19])\n    assert 0 (filter [1])\n    assert 0 (filter [])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n\n#END:TEST\n#START:CHECK\ncheck(specialFilter)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function that takes an array of numbers as input and returns\n// the number of elements in the array that are greater than 10 and both\n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73, 14, -15]) => 1\n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nfunc filter:num nums:[]num\n    result := 0\n    for n := range nums\n        if n > 10 and (n % 2 == 1)\n            if n < 0\n                n = -n\n            end\n            n1 := str2num (sprint n)[0]\n            if n1 % 2 == 1\n                result = result + 1\n            end\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (filter [5 -2 1 -5])\n    assert 1 (filter [15 -73 14 -15])\n    assert 2 (filter [33 -2 -3 45 21 109])\n    assert 4 (filter [43 -12 93 125 121 109])\n    assert 3 (filter [71 -2 -33 75 21 19])\n    assert 0 (filter [1])\n    assert 0 (filter [])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters\n// in the extension's name, the strength is given by the fraction CAP - SM.\n// You should find the strongest extension and return a string in this\n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n// (its strength is -1).\n// Example:\n// strongest 'my_class' ['AA', 'Be', 'CC'] // 'my_class.AA'\nfunc strongest:string c:string exts:[]string\n    exts = exts[:]\n    sort exts\n    return c + \".\" + exts[0]\nend\n\nfunc sort arr:[]string\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if (strength arr[i]) < (strength arr[i + 1])\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc strength:num s:string\n    result := 0\n    for c := range s\n        if c >= \"A\" and c <= \"Z\"\n            result = result + 1\n        else if c >= \"a\" and c <= \"z\"\n            result = result - 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert \"Watashi.eIGHt8OKe\" (strongest \"Watashi\" [\"tEN\" \"niNE\" \"eIGHt8OKe\"])\n    assert \"Boku123.YEs.WeCaNe\" (strongest \"Boku123\" [\"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"])\n    assert \"__YESIMHERE.NuLl__\" (strongest \"__YESIMHERE\" [\"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\"])\n    assert \"K.TAR\" (strongest \"K\" [\"Ta\" \"TAR\" \"t234An\" \"cosSo\"])\n    assert \"__HAHA.123\" (strongest \"__HAHA\" [\"Tab\" \"123\" \"781345\" \"-_-\"])\n    assert \"YameRore.okIWILL123\" (strongest \"YameRore\" [\"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"])\n    assert \"finNNalLLly.WoW\" (strongest \"finNNalLLly\" [\"Die\" \"NowW\" \"Wow\" \"WoW\"])\n    assert \"_.Bb\" (strongest \"_\" [\"Bb\" \"91245\"])\n    assert \"Sp.671235\" (strongest \"Sp\" [\"671235\" \"Bb\"])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n\n#END:TEST\n#START:CHECK\ncheck(Strongest_Extension)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters\n// in the extension's name, the strength is given by the fraction CAP - SM.\n// You should find the strongest extension and return a string in this\n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n// (its strength is -1).\n// Example:\n// strongest 'my_class' ['AA', 'Be', 'CC'] // 'my_class.AA'\nfunc strongest:string c:string exts:[]string\n    exts = exts[:]\n    sort exts\n    return c + \".\" + exts[0]\nend\n\nfunc sort arr:[]string\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if (strength arr[i]) < (strength arr[i + 1])\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc strength:num s:string\n    result := 0\n    for c := range s\n        if c >= \"A\" and c <= \"Z\"\n            result = result + 1\n        else if c >= \"a\" and c <= \"z\"\n            result = result - 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert \"Watashi.eIGHt8OKe\" (strongest \"Watashi\" [\"tEN\" \"niNE\" \"eIGHt8OKe\"])\n    assert \"Boku123.YEs.WeCaNe\" (strongest \"Boku123\" [\"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"])\n    assert \"__YESIMHERE.NuLl__\" (strongest \"__YESIMHERE\" [\"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\"])\n    assert \"K.TAR\" (strongest \"K\" [\"Ta\" \"TAR\" \"t234An\" \"cosSo\"])\n    assert \"__HAHA.123\" (strongest \"__HAHA\" [\"Tab\" \"123\" \"781345\" \"-_-\"])\n    assert \"YameRore.okIWILL123\" (strongest \"YameRore\" [\"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"])\n    assert \"finNNalLLly.WoW\" (strongest \"finNNalLLly\" [\"Die\" \"NowW\" \"Wow\" \"WoW\"])\n    assert \"_.Bb\" (strongest \"_\" [\"Bb\" \"91245\"])\n    assert \"Sp.671235\" (strongest \"Sp\" [\"671235\" \"Bb\"])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // This function takes an array l and returns an array l' such that l' is\n// identical to l in the indices that are not divisible by three, while its\n// values at the indices that are divisible by three are equal to the\n// values of the corresponding indices of l, but sorted.\n// sort_third [1 2 3] // [1 2 3]\n// sort_third [5 6 3 4 8 9 2] // [2 6 3 4 8 9 5]\nfunc sort_third:[]num nums:[]num\n    div3:[]num\n    for i := range 0 (len nums) 3\n        div3 = div3 + [nums[i]]\n    end\n    sort div3\n    result := [0] * (len nums)\n\n    for i := range (len nums)\n        if i % 3 == 0\n            result[i] = div3[i / 3]\n        else\n            result[i] = nums[i]\n        end\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 2 3] (sort_third [1 2 3])\n    assert [1 3 -5 2 -3 3 5 0 123 9 -10] (sort_third [5 3 -5 2 -3 3 9 0 123 1 -10])\n    assert [-10 8 -12 3 23 2 4 11 12 5] (sort_third [5 8 -12 4 23 2 3 11 12 -10])\n    assert [2 6 3 4 8 9 5] (sort_third [5 6 3 4 8 9 2])\n    assert [2 8 3 4 6 9 5] (sort_third [5 8 3 4 6 9 2])\n    assert [2 6 9 4 8 3 5] (sort_third [5 6 9 4 8 3 2])\n    assert [2 6 3 4 8 9 5 1] (sort_third [5 6 3 4 8 9 2 1])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n\n#END:TEST\n#START:CHECK\ncheck(sort_third)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // This function takes an array l and returns an array l' such that l' is\n// identical to l in the indices that are not divisible by three, while its\n// values at the indices that are divisible by three are equal to the\n// values of the corresponding indices of l, but sorted.\n// sort_third [1 2 3] // [1 2 3]\n// sort_third [5 6 3 4 8 9 2] // [2 6 3 4 8 9 5]\nfunc sort_third:[]num nums:[]num\n    div3:[]num\n    for i := range 0 (len nums) 3\n        div3 = div3 + [nums[i]]\n    end\n    sort div3\n    result := [0] * (len nums)\n\n    for i := range (len nums)\n        if i % 3 == 0\n            result[i] = div3[i / 3]\n        else\n            result[i] = nums[i]\n        end\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 2 3] (sort_third [1 2 3])\n    assert [1 3 -5 2 -3 3 5 0 123 9 -10] (sort_third [5 3 -5 2 -3 3 9 0 123 1 -10])\n    assert [-10 8 -12 3 23 2 4 11 12 5] (sort_third [5 8 -12 4 23 2 3 11 12 -10])\n    assert [2 6 3 4 8 9 5] (sort_third [5 6 3 4 8 9 2])\n    assert [2 8 3 4 6 9 5] (sort_third [5 8 3 4 6 9 2])\n    assert [2 6 9 4 8 3 5] (sort_third [5 6 9 4 8 3 2])\n    assert [2 6 3 4 8 9 5 1] (sort_third [5 6 3 4 8 9 2 1])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Create a function that takes a string value representing a number\n//  and returns the closest integer to it. If the number is equidistant\n//  from two integers, round it away from zero.\n//  closest \"10\" // 10\n//  closest \"15.3\" // 15\n//\n//  Note:\n//  Rounding away from zero means that if the given number is equidistant\n//  from two integers, the one you should return is the one that is the\n//  farthest from zero. For example closest \"14.5\"  should\n//  return 15 and closest \"-14.5\"  should return -15.\nfunc closest:num s:string\n    n := str2num s\n    return round n\nend\n\nfunc test\n    assert 10 (closest \"10\")\n    assert 15 (closest \"14.5\")\n    assert -16 (closest \"-15.5\")\n    assert 15 (closest \"15.3\")\n    assert 0 (closest \"0\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n\n#END:TEST\n#START:CHECK\ncheck(closest_integer)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Create a function that takes a string value representing a number\n//  and returns the closest integer to it. If the number is equidistant\n//  from two integers, round it away from zero.\n//  closest \"10\" // 10\n//  closest \"15.3\" // 15\n//\n//  Note:\n//  Rounding away from zero means that if the given number is equidistant\n//  from two integers, the one you should return is the one that is the\n//  farthest from zero. For example closest \"14.5\"  should\n//  return 15 and closest \"-14.5\"  should return -15.\nfunc closest:num s:string\n    n := str2num s\n    return round n\nend\n\nfunc test\n    assert 10 (closest \"10\")\n    assert 15 (closest \"14.5\")\n    assert -16 (closest \"-15.5\")\n    assert 15 (closest \"15.3\")\n    assert 0 (closest \"0\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // For a given number n, find the largest number that divides n evenly, smaller than n\n// largestDivisor(15) // 5\nfunc largestDivisor:num n:num\n    for i := range n-1 0 -1\n        if n % i == 0\n            return i\n        end\n    end\n    return -1\nend\n\nfunc test\n    assert 1 (largestDivisor 3)\n    assert 1 (largestDivisor 7)\n    assert 5 (largestDivisor 10)\n    assert 50 (largestDivisor 100)\n    assert 7 (largestDivisor 49)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n\n#END:TEST\n#START:CHECK\ncheck(largest_divisor)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // For a given number n, find the largest number that divides n evenly, smaller than n\n// largestDivisor(15) // 5\nfunc largestDivisor:num n:num\n    for i := range n-1 0 -1\n        if n % i == 0\n            return i\n        end\n    end\n    return -1\nend\n\nfunc test\n    assert 1 (largestDivisor 3)\n    assert 1 (largestDivisor 7)\n    assert 5 (largestDivisor 10)\n    assert 50 (largestDivisor 100)\n    assert 7 (largestDivisor 49)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // In this task, you will be given a string that represents a number of apples and oranges\n// that are distributed in a basket of fruit this basket contains\n// apples, oranges, and mango fruits. Given the string that represents the total number of\n// the oranges and apples and an integer that represent the total number of the fruits\n// in the basket return the number of the mango fruits in the basket.\n// for example:\n// mangoCount \"5 apples and 6 oranges\" 19 // 19 - 5 - 6 = 8\n// mangoCount \"0 apples and 1 oranges\"3 //  3 - 0 - 1 = 2\n// mangoCount \"2 apples and 3 oranges\" 100 //  100 - 2 - 3 = 95\n// mangoCount \"100 apples and 1 oranges\"120 //  120 - 100 - 1 = 19\nfunc mangoCount:num str:string total:num\n    words := split str \" \"\n    apples := str2num words[0]\n    oranges := str2num words[3]\n    return total - apples - oranges\nend\n\nfunc test\n    assert 8 (mangoCount \"5 apples and 6 oranges\" 19)\n    assert 10 (mangoCount \"5 apples and 6 oranges\" 21)\n    assert 2 (mangoCount \"0 apples and 1 oranges\" 3)\n    assert 2 (mangoCount \"1 apples and 0 oranges\" 3)\n    assert 95 (mangoCount \"2 apples and 3 oranges\" 100)\n    assert 0 (mangoCount \"2 apples and 3 oranges\" 5)\n    assert 19 (mangoCount \"1 apples and 100 oranges\" 120)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n\n#END:TEST\n#START:CHECK\ncheck(fruit_distribution)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // In this task, you will be given a string that represents a number of apples and oranges\n// that are distributed in a basket of fruit this basket contains\n// apples, oranges, and mango fruits. Given the string that represents the total number of\n// the oranges and apples and an integer that represent the total number of the fruits\n// in the basket return the number of the mango fruits in the basket.\n// for example:\n// mangoCount \"5 apples and 6 oranges\" 19 // 19 - 5 - 6 = 8\n// mangoCount \"0 apples and 1 oranges\"3 //  3 - 0 - 1 = 2\n// mangoCount \"2 apples and 3 oranges\" 100 //  100 - 2 - 3 = 95\n// mangoCount \"100 apples and 1 oranges\"120 //  120 - 100 - 1 = 19\nfunc mangoCount:num str:string total:num\n    words := split str \" \"\n    apples := str2num words[0]\n    oranges := str2num words[3]\n    return total - apples - oranges\nend\n\nfunc test\n    assert 8 (mangoCount \"5 apples and 6 oranges\" 19)\n    assert 10 (mangoCount \"5 apples and 6 oranges\" 21)\n    assert 2 (mangoCount \"0 apples and 1 oranges\" 3)\n    assert 2 (mangoCount \"1 apples and 0 oranges\" 3)\n    assert 95 (mangoCount \"2 apples and 3 oranges\" 100)\n    assert 0 (mangoCount \"2 apples and 3 oranges\" 5)\n    assert 19 (mangoCount \"1 apples and 100 oranges\" 120)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make nums1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between nums1 and nums2:.\n// If it is possible to exchange elements between the nums1 and nums2: to make\n// all the elements of nums1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// solve([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// solve([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunc solve:string nums1:[]num nums2:[]num\n    odds1 := count nums1 1\n    evens2 := count nums2 0\n    if odds1 <= evens2\n        return \"YES\"\n    end\n    return \"NO\"\nend\n\nfunc count:num nums:[]num remainderMod2:num\n    result := 0\n    for n := range nums\n        if n % 2 == remainderMod2\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert \"YES\" (solve [1 2 3 4] [1 2 3 4])\n    assert \"NO\" (solve [1 2 3 4] [1 5 3 4])\n    assert \"YES\" (solve [1 2 3 4] [2 1 4 3])\n    assert \"YES\" (solve [5 7 3] [2 6 4])\n    assert \"NO\" (solve [5 7 3] [2 6 3])\n    assert \"NO\" (solve [3 2 6 1 8 9] [3 5 5 1 1 1])\n    assert \"YES\" (solve [100 200] [200 200])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n\n#END:TEST\n#START:CHECK\ncheck(exchange)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make nums1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between nums1 and nums2:.\n// If it is possible to exchange elements between the nums1 and nums2: to make\n// all the elements of nums1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// solve([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// solve([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunc solve:string nums1:[]num nums2:[]num\n    odds1 := count nums1 1\n    evens2 := count nums2 0\n    if odds1 <= evens2\n        return \"YES\"\n    end\n    return \"NO\"\nend\n\nfunc count:num nums:[]num remainderMod2:num\n    result := 0\n    for n := range nums\n        if n % 2 == remainderMod2\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert \"YES\" (solve [1 2 3 4] [1 2 3 4])\n    assert \"NO\" (solve [1 2 3 4] [1 5 3 4])\n    assert \"YES\" (solve [1 2 3 4] [2 1 4 3])\n    assert \"YES\" (solve [5 7 3] [2 6 4])\n    assert \"NO\" (solve [5 7 3] [2 6 3])\n    assert \"NO\" (solve [3 2 6 1 8 9] [3 5 5 1 1 1])\n    assert \"YES\" (solve [100 200] [200 200])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Input is a space-delimited string of numerals from \"zero\" to \"nine\".\n// Valid choices are \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\" and \"nine\".\n// Return the string with numbers sorted from smallest to largest\n// sortNumbers \"three one five\" // \"one three five\"\nfunc sortNumbers:string numbers:string\n    map := {zero:0 one:1 two:2 three:3 four:4 five:5 six:6 seven:7 eight:8 nine:9}\n    arr := split numbers \" \"\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if map[arr[i]] > map[arr[i + 1]]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\n    return join arr \" \"\nend\n\nfunc test\n    assert \"\" (sortNumbers \"\")\n    assert \"three\" (sortNumbers \"three\")\n    assert \"three five nine\" (sortNumbers \"three five nine\")\n    assert \"zero four five seven eight nine\" (sortNumbers \"five zero four seven nine eight\")\n    assert \"zero one two three four five six\" (sortNumbers \"six five four three two one zero\")\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n\n#END:TEST\n#START:CHECK\ncheck(sort_numbers)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Input is a space-delimited string of numerals from \"zero\" to \"nine\".\n// Valid choices are \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\" and \"nine\".\n// Return the string with numbers sorted from smallest to largest\n// sortNumbers \"three one five\" // \"one three five\"\nfunc sortNumbers:string numbers:string\n    map := {zero:0 one:1 two:2 three:3 four:4 five:5 six:6 seven:7 eight:8 nine:9}\n    arr := split numbers \" \"\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if map[arr[i]] > map[arr[i + 1]]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\n    return join arr \" \"\nend\n\nfunc test\n    assert \"\" (sortNumbers \"\")\n    assert \"three\" (sortNumbers \"three\")\n    assert \"three five nine\" (sortNumbers \"three five nine\")\n    assert \"zero four five seven eight nine\" (sortNumbers \"five zero four seven nine eight\")\n    assert \"zero one two three four five six\" (sortNumbers \"six five four three two one zero\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  You are given two intervals, where each interval is a pair of integers.\n//  For example, interval = [start end] = [1 2]. The given intervals are\n//  closed which means that the interval (start, end) includes both start and\n//  end.\n//  For each given interval, it is assumed that its start is less or equal its end.\n//  Your task is to determine whether the length of intersection of these two\n//  intervals is a prime number.\n//  Example, the intersection of the intervals [1 3], [2 4] is [2 3]\n//  which its length is 1, which not a prime number.\n//  If the length of the intersection is a prime number, return \"YES\",\n//  otherwise, return \"NO\".\n//  If the two intervals don't intersect, return \"NO\".\n//  intersection [1 2] [2 3] // \"NO\"\n//  intersection [-1 1] [0 4] // \"NO\"\n//  intersection [-3 -1] [-5 5] // \"YES\"\nfunc intersectPrime:string interval1:[]num interval2:[]num\n    left := max interval1[0] interval2[0]\n    right := min interval1[1] interval2[1]\n    length := right - left\n    if isPrime length\n        return \"YES\"\n    end\n    return \"NO\"\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 n\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert \"NO\" (intersectPrime [1 2] [2 3])\n    assert \"NO\" (intersectPrime [-1 1] [0 4])\n    assert \"YES\" (intersectPrime [-3 -1] [-5 5])\n    assert \"YES\" (intersectPrime [-2 2] [-4 0])\n    assert \"NO\" (intersectPrime [-11 2] [-1 -1])\n    assert \"NO\" (intersectPrime [1 2] [3 5])\n    assert \"NO\" (intersectPrime [1 2] [1 2])\n    assert \"NO\" (intersectPrime [-2 -2] [-3 -2])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n\n#END:TEST\n#START:CHECK\ncheck(intersection)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  You are given two intervals, where each interval is a pair of integers.\n//  For example, interval = [start end] = [1 2]. The given intervals are\n//  closed which means that the interval (start, end) includes both start and\n//  end.\n//  For each given interval, it is assumed that its start is less or equal its end.\n//  Your task is to determine whether the length of intersection of these two\n//  intervals is a prime number.\n//  Example, the intersection of the intervals [1 3], [2 4] is [2 3]\n//  which its length is 1, which not a prime number.\n//  If the length of the intersection is a prime number, return \"YES\",\n//  otherwise, return \"NO\".\n//  If the two intervals don't intersect, return \"NO\".\n//  intersection [1 2] [2 3] // \"NO\"\n//  intersection [-1 1] [0 4] // \"NO\"\n//  intersection [-3 -1] [-5 5] // \"YES\"\nfunc intersectPrime:string interval1:[]num interval2:[]num\n    left := max interval1[0] interval2[0]\n    right := min interval1[1] interval2[1]\n    length := right - left\n    if isPrime length\n        return \"YES\"\n    end\n    return \"NO\"\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 n\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert \"NO\" (intersectPrime [1 2] [2 3])\n    assert \"NO\" (intersectPrime [-1 1] [0 4])\n    assert \"YES\" (intersectPrime [-3 -1] [-5 5])\n    assert \"YES\" (intersectPrime [-2 2] [-4 0])\n    assert \"NO\" (intersectPrime [-11 2] [-1 -1])\n    assert \"NO\" (intersectPrime [1 2] [3 5])\n    assert \"NO\" (intersectPrime [1 2] [1 2])\n    assert \"NO\" (intersectPrime [-2 -2] [-3 -2])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n//\n// Example 1:\n//\n//     Input: 3\n//     Output: [1, 2]\n//     Explanation:\n//     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n//\n// Example 2:\n//\n//     Input: 12\n//     Output: [4, 6]\n//     Explanation:\n//     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n//\n// Note:\n//     1. 1 <= n <= 10^3\n//     2. returned tuple has the number of even and odd integer palindromes respectively.\nfunc palindromeCount:[]num n:num\n    even := 0\n    odd := 0\n    for i := range 1 n+1\n        if (isPalindrome i)\n            if i % 2 == 1\n                odd = odd + 1\n            else\n                even = even + 1\n            end\n        end\n    end\n    return [even odd]\nend\n\nfunc isPalindrome:bool n:num\n    if n < 10\n        return true\n    end\n    s := sprint n\n    for i := range (len s)/2\n        if s[i] != s[-i - 1]\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert [8 13] (palindromeCount 123)\n    assert [4 6] (palindromeCount 12)\n    assert [1 2] (palindromeCount 3)\n    assert [6 8] (palindromeCount 63)\n    assert [5 6] (palindromeCount 25)\n    assert [4 6] (palindromeCount 19)\n    assert [4 5] (palindromeCount 9)\n    assert [0 1] (palindromeCount 1)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(even_odd_palindrome)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n//\n// Example 1:\n//\n//     Input: 3\n//     Output: [1, 2]\n//     Explanation:\n//     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n//\n// Example 2:\n//\n//     Input: 12\n//     Output: [4, 6]\n//     Explanation:\n//     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n//\n// Note:\n//     1. 1 <= n <= 10^3\n//     2. returned tuple has the number of even and odd integer palindromes respectively.\nfunc palindromeCount:[]num n:num\n    even := 0\n    odd := 0\n    for i := range 1 n+1\n        if (isPalindrome i)\n            if i % 2 == 1\n                odd = odd + 1\n            else\n                even = even + 1\n            end\n        end\n    end\n    return [even odd]\nend\n\nfunc isPalindrome:bool n:num\n    if n < 10\n        return true\n    end\n    s := sprint n\n    for i := range (len s)/2\n        if s[i] != s[-i - 1]\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert [8 13] (palindromeCount 123)\n    assert [4 6] (palindromeCount 12)\n    assert [1 2] (palindromeCount 3)\n    assert [6 8] (palindromeCount 63)\n    assert [5 6] (palindromeCount 25)\n    assert [4 6] (palindromeCount 19)\n    assert [4 5] (palindromeCount 9)\n    assert [0 1] (palindromeCount 1)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  It is the last week of the semester and the teacher has to give the grades\n//  to students. The teacher has been making her own algorithm for grading.\n//  The only problem is, she has lost the code she used for grading.\n//  She has given you an array of GPAs for some students and you have to write\n//  a function that can output an array of letter grades using the following table:\n//           GPA       |    Letter grade\n//            4.0                A+\n//          > 3.7                A\n//          > 3.3                A-\n//          > 3.0                B+\n//          > 2.7                B\n//          > 2.3                B-\n//          > 2.0                C+\n//          > 1.7                C\n//          > 1.3                C-\n//          > 1.0                D+\n//          > 0.7                D\n//          > 0.0                D-\n//            0.0                E\n//  Example:\n//  grade_equation [4.0, 3, 1.7, 2, 3.5]  ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc grades:[]string gpas:[]num\n    result:[]string\n    for gpa := range gpas\n        result = result + [(grade gpa)]\n    end\n    return result\nend\n\nfunc grade:string gpa:num\n    if gpa == 4\n        return \"A+\"\n    else if gpa > 3.7\n        return \"A\"\n    else if gpa > 3.3\n        return \"A-\"\n    else if gpa > 3\n        return \"B+\"\n    else if gpa > 2.7\n        return \"B\"\n    else if gpa > 2.3\n        return \"B-\"\n    else if gpa > 2\n        return \"C+\"\n    else if gpa > 1.7\n        return \"C\"\n    else if gpa > 1.3\n        return \"C-\"\n    else if gpa > 1\n        return \"D+\"\n    else if gpa > 0.7\n        return \"D\"\n    else if gpa > 0\n        return \"D-\"\n    else if gpa == 0\n        return \"E\"\n    end\n    return sprint \"invalid gpa\" gpa\nend\n\nfunc test\n    assert [\"A+\" \"B\" \"C-\" \"C\" \"A-\"] (grades [4 3 1.7 2 3.5])\n    assert [\"D+\"] (grades [1.2])\n    assert [\"D-\"] (grades [0.5])\n    assert [\"E\"] (grades [0])\n    assert [\"D\" \"D-\" \"C-\" \"B\" \"B+\"] (grades [1 0.3 1.5 2.8 3.3])\n    assert [\"E\" \"D-\"] (grades [0 0.7])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(numerical_letter_grade)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  It is the last week of the semester and the teacher has to give the grades\n//  to students. The teacher has been making her own algorithm for grading.\n//  The only problem is, she has lost the code she used for grading.\n//  She has given you an array of GPAs for some students and you have to write\n//  a function that can output an array of letter grades using the following table:\n//           GPA       |    Letter grade\n//            4.0                A+\n//          > 3.7                A\n//          > 3.3                A-\n//          > 3.0                B+\n//          > 2.7                B\n//          > 2.3                B-\n//          > 2.0                C+\n//          > 1.7                C\n//          > 1.3                C-\n//          > 1.0                D+\n//          > 0.7                D\n//          > 0.0                D-\n//            0.0                E\n//  Example:\n//  grade_equation [4.0, 3, 1.7, 2, 3.5]  ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc grades:[]string gpas:[]num\n    result:[]string\n    for gpa := range gpas\n        result = result + [(grade gpa)]\n    end\n    return result\nend\n\nfunc grade:string gpa:num\n    if gpa == 4\n        return \"A+\"\n    else if gpa > 3.7\n        return \"A\"\n    else if gpa > 3.3\n        return \"A-\"\n    else if gpa > 3\n        return \"B+\"\n    else if gpa > 2.7\n        return \"B\"\n    else if gpa > 2.3\n        return \"B-\"\n    else if gpa > 2\n        return \"C+\"\n    else if gpa > 1.7\n        return \"C\"\n    else if gpa > 1.3\n        return \"C-\"\n    else if gpa > 1\n        return \"D+\"\n    else if gpa > 0.7\n        return \"D\"\n    else if gpa > 0\n        return \"D-\"\n    else if gpa == 0\n        return \"E\"\n    end\n    return sprint \"invalid gpa\" gpa\nend\n\nfunc test\n    assert [\"A+\" \"B\" \"C-\" \"C\" \"A-\"] (grades [4 3 1.7 2 3.5])\n    assert [\"D+\"] (grades [1.2])\n    assert [\"D-\"] (grades [0.5])\n    assert [\"E\"] (grades [0])\n    assert [\"D\" \"D-\" \"C-\" \"B\" \"B+\"] (grades [1 0.3 1.5 2.8 3.3])\n    assert [\"E\" \"D-\"] (grades [0 0.7])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Given an array of integers find the largest prime value and return the sum\n// of its digits.\n// largestPrimeSumOfDigits [0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3] // 10\n// largestPrimeSumOfDigits [1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1] // 25\n// largestPrimeSumOfDigits [1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3] // 13\n// largestPrimeSumOfDigits [0 724 32 71 99 32 6 0 5 91 83 0 5 6] // 11\n// largestPrimeSumOfDigits [0 81 12 3 1 21] // 3\n// largestPrimeSumOfDigits [0 8 1 2 1 7] // 7\nfunc largestPrimeSumOfDigits:num nums:[]num\n    largest := 0\n    for n := range nums\n        if (isPrime n) and n > largest\n            largest = n\n        end\n    end\n    return sumOfDigits largest\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 n\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc sumOfDigits:num n:num\n    result := 0\n    while n > 0\n        result = result + n % 10\n        n = floor n/10\n    end\n    return result\nend\n\nfunc test\n    assert 10 (largestPrimeSumOfDigits [0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3])\n    assert 25 (largestPrimeSumOfDigits [1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1])\n    assert 13 (largestPrimeSumOfDigits [1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3])\n    assert 11 (largestPrimeSumOfDigits [0 724 32 71 99 32 6 0 5 91 83 0 5 6])\n    assert 3 (largestPrimeSumOfDigits [0 81 12 3 1 21])\n    assert 7 (largestPrimeSumOfDigits [0 8 1 2 1 7])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n\n#END:TEST\n#START:CHECK\ncheck(skjkasdkd)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given an array of integers find the largest prime value and return the sum\n// of its digits.\n// largestPrimeSumOfDigits [0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3] // 10\n// largestPrimeSumOfDigits [1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1] // 25\n// largestPrimeSumOfDigits [1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3] // 13\n// largestPrimeSumOfDigits [0 724 32 71 99 32 6 0 5 91 83 0 5 6] // 11\n// largestPrimeSumOfDigits [0 81 12 3 1 21] // 3\n// largestPrimeSumOfDigits [0 8 1 2 1 7] // 7\nfunc largestPrimeSumOfDigits:num nums:[]num\n    largest := 0\n    for n := range nums\n        if (isPrime n) and n > largest\n            largest = n\n        end\n    end\n    return sumOfDigits largest\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 n\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc sumOfDigits:num n:num\n    result := 0\n    while n > 0\n        result = result + n % 10\n        n = floor n/10\n    end\n    return result\nend\n\nfunc test\n    assert 10 (largestPrimeSumOfDigits [0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3])\n    assert 25 (largestPrimeSumOfDigits [1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1])\n    assert 13 (largestPrimeSumOfDigits [1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3])\n    assert 11 (largestPrimeSumOfDigits [0 724 32 71 99 32 6 0 5 91 83 0 5 6])\n    assert 3 (largestPrimeSumOfDigits [0 81 12 3 1 21])\n    assert 7 (largestPrimeSumOfDigits [0 8 1 2 1 7])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Evaluates polynomial with coefficients xs at point x.\n// return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\nfunc polyxs:num xs:[]num x:num\n    print xs x\n    return 0\nend\n\n// xs are coefficients of a polynomial.\n// find_zero find x such that poly(x) = 0.\n// find_zero returns only only zero point, even if there are many.\n// Moreover, find_zero only takes list xs having even number of coefficients\n// and largest non zero coefficient as it guarantees\n// a solution.\n// round(find_zero([1, 2]), 2) # f(x) = 1 + 2x // -0.5\n// round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 // 1.0\nfunc find_zero:num xs:[]num\n    print xs\n    // [begin end_ ] := [-1.0 1.0 ]\n    // while .poly (xs begin) * .poly (xs end_) > 0\n    //     begin = begin * 2.0\n    //     end_ = end_ * 2.0\n    // end\n    // while end_ - begin > 1e-10\n    //     center := begin + end_ / 2.0\n    //     if .poly (xs center) * .poly (xs begin) > 0\n    //         begin := center\n    //         center\n    //     else\n    //         end_ := center\n    //     end\n    // end\n    // return begin\n    return 0\nend\n\nfunc test\n    // rng := random.Random (42)\n    //     ncoeff := 2 * rng.randint (1 4)\n    //     coeffs := []\n    //         coeff := rng.randint (-10 10)\n    //         if coeff == 0\n    //             coeff = 1\n    //         end\n    //         coeffs = coeffs + [coeff]\n    //     end\n    //     solution := .candidate (copy.deepcopy (coeffs))\n    //     assert math.fabs (.poly (coeffs solution)) < 0.0001\n    // end\nend\n\ntest",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // Evaluates polynomial with coefficients xs at point x.\n// return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\nfunc polyxs:num xs:[]num x:num\n    print xs x\n    return 0\nend\n\n// xs are coefficients of a polynomial.\n// find_zero find x such that poly(x) = 0.\n// find_zero returns only only zero point, even if there are many.\n// Moreover, find_zero only takes list xs having even number of coefficients\n// and largest non zero coefficient as it guarantees\n// a solution.\n// round(find_zero([1, 2]), 2) # f(x) = 1 + 2x // -0.5\n// round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 // 1.0\nfunc find_zero:num xs:[]num\n    print xs\n    // [begin end_ ] := [-1.0 1.0 ]\n    // while .poly (xs begin) * .poly (xs end_) > 0\n    //     begin = begin * 2.0\n    //     end_ = end_ * 2.0\n    // end\n    // while end_ - begin > 1e-10\n    //     center := begin + end_ / 2.0\n    //     if .poly (xs center) * .poly (xs begin) > 0\n    //         begin := center\n    //         center\n    //     else\n    //         end_ := center\n    //     end\n    // end\n    // return begin\n    return 0\nend\n\nfunc test\n    // rng := random.Random (42)\n    //     ncoeff := 2 * rng.randint (1 4)\n    //     coeffs := []\n    //         coeff := rng.randint (-10 10)\n    //         if coeff == 0\n    //             coeff = 1\n    //         end\n    //         coeffs = coeffs + [coeff]\n    //     end\n    //     solution := .candidate (copy.deepcopy (coeffs))\n    //     assert math.fabs (.poly (coeffs solution)) < 0.0001\n    // end\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // From a given list of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// rollingMax([1, 2, 3, 2, 3, 4, 2]) // [1, 2, 3, 3, 3, 4, 4]\nfunc rollingMax:[]num numbers:[]num\n    if numbers == []\n        return []\n    end\n    running_max := numbers[0]\n    result:[]num\n    for number := range numbers\n        if number > running_max\n            running_max = number\n        end\n        result = result + [running_max]\n    end\n    return result\nend\n\nfunc test\n    assert [] (rollingMax [])\n    assert [1 2 3 4] (rollingMax [1 2 3 4])\n    assert [4 4 4 4] (rollingMax [4 3 2 1])\n    assert [3 3 3 100 100] (rollingMax [3 2 3 100 3])\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\n#END:TEST\n#START:CHECK\ncheck(rolling_max)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // From a given list of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// rollingMax([1, 2, 3, 2, 3, 4, 2]) // [1, 2, 3, 3, 3, 4, 4]\nfunc rollingMax:[]num numbers:[]num\n    if numbers == []\n        return []\n    end\n    running_max := numbers[0]\n    result:[]num\n    for number := range numbers\n        if number > running_max\n            running_max = number\n        end\n        result = result + [running_max]\n    end\n    return result\nend\n\nfunc test\n    assert [] (rollingMax [])\n    assert [1 2 3 4] (rollingMax [1 2 3 4])\n    assert [4 4 4 4] (rollingMax [4 3 2 1])\n    assert [3 3 3 100 100] (rollingMax [3 2 3 100 3])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // primeFib returns n-th number that is a Fibonacci number and it's also\n// prime.\n// primeFib(1) // 2\n// primeFib(2) // 3\n// primeFib(3) // 5\n// primeFib(4) // 13\n// primeFib(5) // 89\nfunc primeFib:num n:num\n    f := [0 1]\n    while true\n        f = f + [f[-1]+f[-2]]\n        if isPrime f[-1]\n            n = n - 1\n        end\n        if n == 0\n            return f[-1]\n        end\n    end\n    return -1\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n\n    for k := range 2 (min (ceil (sqrt n))+1 n-1)\n        if n % k == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert 2 (primeFib 1)\n    assert 3 (primeFib 2)\n    assert 5 (primeFib 3)\n    assert 13 (primeFib 4)\n    assert 89 (primeFib 5)\n    assert 233 (primeFib 6)\n    assert 1597 (primeFib 7)\n    assert 28657 (primeFib 8)\n    assert 514229 (primeFib 9)\n    assert 433494437 (primeFib 10)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n\n#END:TEST\n#START:CHECK\ncheck(prime_fib)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // primeFib returns n-th number that is a Fibonacci number and it's also\n// prime.\n// primeFib(1) // 2\n// primeFib(2) // 3\n// primeFib(3) // 5\n// primeFib(4) // 13\n// primeFib(5) // 89\nfunc primeFib:num n:num\n    f := [0 1]\n    while true\n        f = f + [f[-1]+f[-2]]\n        if isPrime f[-1]\n            n = n - 1\n        end\n        if n == 0\n            return f[-1]\n        end\n    end\n    return -1\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n\n    for k := range 2 (min (ceil (sqrt n))+1 n-1)\n        if n % k == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert 2 (primeFib 1)\n    assert 3 (primeFib 2)\n    assert 5 (primeFib 3)\n    assert 13 (primeFib 4)\n    assert 89 (primeFib 5)\n    assert 233 (primeFib 6)\n    assert 1597 (primeFib 7)\n    assert 28657 (primeFib 8)\n    assert 514229 (primeFib 9)\n    assert 433494437 (primeFib 10)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n//  each cell of the grid contains a value. Every integer in the range [1, N * N]\n//  inclusive appears exactly once on the cells of the grid.\n//\n//  You have to find the minimum path of length k in the grid. You can start\n//  from any cell, and in each step you can move to any of the neighbor cells,\n//  in other words, you can go to cells which share an edge with you current\n//  cell.\n//  Please note that a path of length k means visiting exactly k cells (not\n//  necessarily distinct).\n//  You CANNOT go off the grid.\n//  A path A (of length k) is considered less than a path B (of length k) if\n//  after making the ordered lists of the values on the cells that A and B go\n//  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n//  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n//  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n//  lst_A[j] = lst_B[j].\n//  It is guaranteed that the answer is unique.\n//  Return an ordered list of the values on the cells that the minimum path go through.\n//\n//  Examples:\n//\n//      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n//      Output: [1, 2, 1]\n//\n//      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n//      Output: [1]\nfunc minPath:[]num g:[][]num k:num\n    n := len g\n    val := n * n + 1\n    for i := range n\n        for j := range n\n            if g[i][j] == 1\n                if i != 0\n                    val = min val g[i - 1][j]\n                end\n                if j != 0\n                    val = min val g[i][j - 1]\n                end\n                if i != n - 1\n                    val = min val g[i + 1][j]\n                end\n                if j != n - 1\n                    val = min val g[i][j + 1]\n                end\n            end\n        end\n    end\n    result:[]num\n    for i := range k\n        if i % 2 == 0\n            result = result + [1]\n        else\n            result = result + [val]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [1 2 1] (minPath [[1 2 3] [4 5 6] [7 8 9]] 3)\n    assert [1] (minPath [[5 9 3] [4 1 6] [7 8 2]] 1)\n    assert [1 2 1 2] (minPath [[1 2 3 4] [5 6 7 8] [9 10 11 12] [13 14 15 16]] 4)\n    assert [1 10 1 10 1 10 1] (minPath [[6 4 13 10] [5 7 12 1] [3 16 11 15] [8 14 9 2]] 7)\n    assert [1 7 1 7 1] (minPath [[8 14 9 2] [6 4 13 15] [5 7 1 12] [3 10 11 16]] 5)\n    assert [1 6 1 6 1 6 1 6 1] (minPath [[11 8 7 2] [5 16 14 4] [9 3 15 6] [12 13 10 1]] 9)\n    assert [1 6 1 6 1 6 1 6 1 6 1 6] (minPath [[12 13 10 1] [9 3 15 6] [5 16 14 4] [11 8 7 2]] 12)\n    assert [1 3 1 3 1 3 1 3] (minPath [[2 7 4] [3 1 5] [6 8 9]] 8)\n    assert [1 5 1 5 1 5 1 5] (minPath [[6 1 5] [3 8 9] [2 7 4]] 8)\n    assert [1 2 1 2 1 2 1 2 1 2] (minPath [[1 2] [3 4]] 10)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n\n#END:TEST\n#START:CHECK\ncheck(minPath)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n//  each cell of the grid contains a value. Every integer in the range [1, N * N]\n//  inclusive appears exactly once on the cells of the grid.\n//\n//  You have to find the minimum path of length k in the grid. You can start\n//  from any cell, and in each step you can move to any of the neighbor cells,\n//  in other words, you can go to cells which share an edge with you current\n//  cell.\n//  Please note that a path of length k means visiting exactly k cells (not\n//  necessarily distinct).\n//  You CANNOT go off the grid.\n//  A path A (of length k) is considered less than a path B (of length k) if\n//  after making the ordered lists of the values on the cells that A and B go\n//  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n//  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n//  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n//  lst_A[j] = lst_B[j].\n//  It is guaranteed that the answer is unique.\n//  Return an ordered list of the values on the cells that the minimum path go through.\n//\n//  Examples:\n//\n//      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n//      Output: [1, 2, 1]\n//\n//      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n//      Output: [1]\nfunc minPath:[]num g:[][]num k:num\n    n := len g\n    val := n * n + 1\n    for i := range n\n        for j := range n\n            if g[i][j] == 1\n                if i != 0\n                    val = min val g[i - 1][j]\n                end\n                if j != 0\n                    val = min val g[i][j - 1]\n                end\n                if i != n - 1\n                    val = min val g[i + 1][j]\n                end\n                if j != n - 1\n                    val = min val g[i][j + 1]\n                end\n            end\n        end\n    end\n    result:[]num\n    for i := range k\n        if i % 2 == 0\n            result = result + [1]\n        else\n            result = result + [val]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [1 2 1] (minPath [[1 2 3] [4 5 6] [7 8 9]] 3)\n    assert [1] (minPath [[5 9 3] [4 1 6] [7 8 2]] 1)\n    assert [1 2 1 2] (minPath [[1 2 3 4] [5 6 7 8] [9 10 11 12] [13 14 15 16]] 4)\n    assert [1 10 1 10 1 10 1] (minPath [[6 4 13 10] [5 7 12 1] [3 16 11 15] [8 14 9 2]] 7)\n    assert [1 7 1 7 1] (minPath [[8 14 9 2] [6 4 13 15] [5 7 1 12] [3 10 11 16]] 5)\n    assert [1 6 1 6 1 6 1 6 1] (minPath [[11 8 7 2] [5 16 14 4] [9 3 15 6] [12 13 10 1]] 9)\n    assert [1 6 1 6 1 6 1 6 1 6 1 6] (minPath [[12 13 10 1] [9 3 15 6] [5 16 14 4] [11 8 7 2]] 12)\n    assert [1 3 1 3 1 3 1 3] (minPath [[2 7 4] [3 1 5] [6 8 9]] 8)\n    assert [1 5 1 5 1 5 1 5] (minPath [[6 1 5] [3 8 9] [2 7 4]] 8)\n    assert [1 2 1 2 1 2 1 2 1 2] (minPath [[1 2] [3 4]] 10)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // This function takes an array l and returns an array l' such that\n//  l' is identical to l in the odd indices, while its values at the even indices are equal\n//  to the values of the even indices of l, but sorted.\n//\n//  sortEven [1 2 3] // [1 2 3]\n//  sortEven [5 6 3 4] // [3 6 5 4]\nfunc sortEven:[]num nums:[]num\n    even:[]num\n    for i := range 0 (len nums) 2\n        even = even + [nums[i]]\n    end\n    sort even\n    result := [0] * (len nums)\n\n    for i := range (len nums)\n        if i % 2 == 0\n            result[i] = even[i / 2]\n        else\n            result[i] = nums[i]\n        end\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 2 3] (sortEven [1 2 3])\n    assert [-10 3 -5 2 -3 3 5 0 9 1 123] (sortEven [5 3 -5 2 -3 3 9 0 123 1 -10])\n    assert [-12 8 3 4 5 2 12 11 23 -10] (sortEven [5 8 -12 4 23 2 3 11 12 -10])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n\n#END:TEST\n#START:CHECK\ncheck(sort_even)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // This function takes an array l and returns an array l' such that\n//  l' is identical to l in the odd indices, while its values at the even indices are equal\n//  to the values of the even indices of l, but sorted.\n//\n//  sortEven [1 2 3] // [1 2 3]\n//  sortEven [5 6 3 4] // [3 6 5 4]\nfunc sortEven:[]num nums:[]num\n    even:[]num\n    for i := range 0 (len nums) 2\n        even = even + [nums[i]]\n    end\n    sort even\n    result := [0] * (len nums)\n\n    for i := range (len nums)\n        if i % 2 == 0\n            result[i] = even[i / 2]\n        else\n            result[i] = nums[i]\n        end\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 2 3] (sortEven [1 2 3])\n    assert [-10 3 -5 2 -3 3 5 0 9 1 123] (sortEven [5 3 -5 2 -3 3 9 0 123 1 -10])\n    assert [-12 8 3 4 5 2 12 11 23 -10] (sortEven [5 8 -12 4 23 2 3 11 12 -10])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a dictionary, return true if all keys are strings in lower\n// case or all keys are strings in upper case, else return false.\n// The function should return false if the given dictionary is empty.\n// sameCaseKey {\"a\":\"apple\", \"b\":\"banana\"} // true\n// sameCaseKey {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"} // false\n// sameCaseKey {\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"} // false\n// sameCaseKey {\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"} // false\n// sameCaseKey {\"STATE\":\"NC\", \"ZIP\":\"12345\" } // true\nfunc sameCaseKey:bool m:{}string\n    up := false\n    low := false\n    for key := range m\n        lkey := lower key\n        ukey := upper key\n        if key == lkey and key != ukey\n            low = true\n        else if key == ukey and key != lkey\n            up = true\n        else\n            return false // no letters in key\n        end\n    end\n    return up != low\nend\n\nfunc test\n    assert true (sameCaseKey {p:\"pineapple\" b:\"banana\"})\n    assert false (sameCaseKey {p:\"pineapple\" A:\"banana\" B:\"banana\"})\n    assert false (sameCaseKey {p:\"pineapple\" _:\"banana\" a:\"apple\"})\n    assert false (sameCaseKey {Name:\"John\" Age:\"36\" City:\"Houston\"})\n    assert true (sameCaseKey {STATE:\"NC\" ZIP:\"12345\"})\n    assert true (sameCaseKey {fruit:\"Orange\" taste:\"Sweet\"})\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n\n#END:TEST\n#START:CHECK\ncheck(check_dict_case)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a dictionary, return true if all keys are strings in lower\n// case or all keys are strings in upper case, else return false.\n// The function should return false if the given dictionary is empty.\n// sameCaseKey {\"a\":\"apple\", \"b\":\"banana\"} // true\n// sameCaseKey {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"} // false\n// sameCaseKey {\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"} // false\n// sameCaseKey {\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"} // false\n// sameCaseKey {\"STATE\":\"NC\", \"ZIP\":\"12345\" } // true\nfunc sameCaseKey:bool m:{}string\n    up := false\n    low := false\n    for key := range m\n        lkey := lower key\n        ukey := upper key\n        if key == lkey and key != ukey\n            low = true\n        else if key == ukey and key != lkey\n            up = true\n        else\n            return false // no letters in key\n        end\n    end\n    return up != low\nend\n\nfunc test\n    assert true (sameCaseKey {p:\"pineapple\" b:\"banana\"})\n    assert false (sameCaseKey {p:\"pineapple\" A:\"banana\" B:\"banana\"})\n    assert false (sameCaseKey {p:\"pineapple\" _:\"banana\" a:\"apple\"})\n    assert false (sameCaseKey {Name:\"John\" Age:\"36\" City:\"Houston\"})\n    assert true (sameCaseKey {STATE:\"NC\" ZIP:\"12345\"})\n    assert true (sameCaseKey {fruit:\"Orange\" taste:\"Sweet\"})\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy //  You are given a string s. Your task is to check if the string is happy or\n//  not. A string is happy if its length is at least 3 and every 3\n//  consecutive letters are distinct\n//\n//  For example:\n//  happy \"a\" // false\n//  happy \"aa\" // false\n//  happy \"abcd\" // true\n//  happy \"aabb\" // false\n//  happy \"adb\" // true\n//  happy \"xyy\" // false\nfunc happy:bool s:string\n    length := len s\n    if length < 3\n        return false\n    end\n    for i := range length-2\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert false (happy \"a\")\n    assert false (happy \"aa\")\n    assert true (happy \"abcd\")\n    assert false (happy \"aabb\")\n    assert true (happy \"adb\")\n    assert false (happy \"xyy\")\n    assert true (happy \"iopaxpoi\")\n    assert false (happy \"iopaxioi\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n\n#END:TEST\n#START:CHECK\ncheck(is_happy)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  You are given a string s. Your task is to check if the string is happy or\n//  not. A string is happy if its length is at least 3 and every 3\n//  consecutive letters are distinct\n//\n//  For example:\n//  happy \"a\" // false\n//  happy \"aa\" // false\n//  happy \"abcd\" // true\n//  happy \"aabb\" // false\n//  happy \"adb\" // true\n//  happy \"xyy\" // false\nfunc happy:bool s:string\n    length := len s\n    if length < 3\n        return false\n    end\n    for i := range length-2\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert false (happy \"a\")\n    assert false (happy \"aa\")\n    assert true (happy \"abcd\")\n    assert false (happy \"aabb\")\n    assert true (happy \"adb\")\n    assert false (happy \"xyy\")\n    assert true (happy \"iopaxpoi\")\n    assert false (happy \"iopaxioi\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Given a string s and a natural number n, you have been tasked to implement\n// a function that returns a list of all words from string s that contain exactly\n// n consonants, in the order in which these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// selectWords \"Mary had a little lamb\" 4 // [\"little\"]\n// selectWords \"Mary had a little lamb\" 3 // [\"Mary\" \"lamb\"]\n// selectWords \"simple white space\" 2 // []\n// selectWords \"Hello world\" 4 // [\"world\"]\n// selectWords \"Uncle sam\" 3 // [\"Uncle\"]\nfunc selectWords:[]string s:string targetConsonants:num\n    words := split s \" \"\n    vowels := {a:0 e:0 i:0 o:0 u:0}\n    result:[]string\n    for word := range words\n        consonants := 0\n        lword := lower word\n        for c := range lword\n            if !(has vowels c)\n                consonants = consonants + 1\n            end\n        end\n        if consonants == targetConsonants\n            result = result + [word]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [\"little\"] (selectWords \"Mary had a little lamb\" 4)\n    assert [\"Mary\" \"lamb\"] (selectWords \"Mary had a little lamb\" 3)\n    assert [] (selectWords \"simple white space\" 2)\n    assert [\"world\"] (selectWords \"Hello world\" 4)\n    assert [\"Uncle\"] (selectWords \"Uncle sam\" 3)\n    assert [] (selectWords \"\" 4)\n    assert [\"b\" \"c\" \"d\" \"f\"] (selectWords \"a b c d e f\" 1)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n\n#END:TEST\n#START:CHECK\ncheck(select_words)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a string s and a natural number n, you have been tasked to implement\n// a function that returns a list of all words from string s that contain exactly\n// n consonants, in the order in which these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// selectWords \"Mary had a little lamb\" 4 // [\"little\"]\n// selectWords \"Mary had a little lamb\" 3 // [\"Mary\" \"lamb\"]\n// selectWords \"simple white space\" 2 // []\n// selectWords \"Hello world\" 4 // [\"world\"]\n// selectWords \"Uncle sam\" 3 // [\"Uncle\"]\nfunc selectWords:[]string s:string targetConsonants:num\n    words := split s \" \"\n    vowels := {a:0 e:0 i:0 o:0 u:0}\n    result:[]string\n    for word := range words\n        consonants := 0\n        lword := lower word\n        for c := range lword\n            if !(has vowels c)\n                consonants = consonants + 1\n            end\n        end\n        if consonants == targetConsonants\n            result = result + [word]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [\"little\"] (selectWords \"Mary had a little lamb\" 4)\n    assert [\"Mary\" \"lamb\"] (selectWords \"Mary had a little lamb\" 3)\n    assert [] (selectWords \"simple white space\" 2)\n    assert [\"world\"] (selectWords \"Hello world\" 4)\n    assert [\"Uncle\"] (selectWords \"Uncle sam\" 3)\n    assert [] (selectWords \"\" 4)\n    assert [\"b\" \"c\" \"d\" \"f\"] (selectWords \"a b c d e f\" 1)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a positive integer n, you have to make a pile of n levels of stones.\n//  The first level has n stones.\n//  The number of stones in the next level is:\n//      - the next odd number if n is odd.\n//      - the next even number if n is even.\n//  Return the number of stones in each level in an array, where element at index\n//  i represents the number of stones in the level (i+1).\n//\n//  makePile 3 //  [3, 5, 7]\nfunc makePile:[]num n:num\n    arr:[]num\n    for i := range n\n        arr = arr + [n+2*i]\n    end\n    return arr\nend\n\nfunc test\n    assert [3 5 7] (makePile 3)\n    assert [4 6 8 10] (makePile 4)\n    assert [5 7 9 11 13] (makePile 5)\n    assert [6 8 10 12 14 16] (makePile 6)\n    assert [8 10 12 14 16 18 20 22] (makePile 8)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return [n + 2*i for i in range(n)]\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(make_a_pile)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a positive integer n, you have to make a pile of n levels of stones.\n//  The first level has n stones.\n//  The number of stones in the next level is:\n//      - the next odd number if n is odd.\n//      - the next even number if n is even.\n//  Return the number of stones in each level in an array, where element at index\n//  i represents the number of stones in the level (i+1).\n//\n//  makePile 3 //  [3, 5, 7]\nfunc makePile:[]num n:num\n    arr:[]num\n    for i := range n\n        arr = arr + [n+2*i]\n    end\n    return arr\nend\n\nfunc test\n    assert [3 5 7] (makePile 3)\n    assert [4 6 8 10] (makePile 4)\n    assert [5 7 9 11 13] (makePile 5)\n    assert [6 8 10 12 14 16] (makePile 6)\n    assert [8 10 12 14 16 18 20 22] (makePile 8)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a string s, count the number of uppercase vowels in even indices.\n//\n//  For example:\n//  countUpper \"aBCdEf\" // 1\n//  countUpper \"abcdefg\" // 0\n//  countUpper \"dBBE\" // 0\nfunc countUpper:num s:string\n    m := {A:0 E:0 I:0 O:0 U:0}\n    result := 0\n    for i := range 0 (len s) 2\n        if has m s[i]\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 1 (countUpper \"aBCdEf\")\n    assert 0 (countUpper \"abcdefg\")\n    assert 0 (countUpper \"dBBE\")\n    assert 0 (countUpper \"B\")\n    assert 1 (countUpper \"U\")\n    assert 0 (countUpper \"\")\n    assert 2 (countUpper \"EEEE\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" total-fails total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(count_upper)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a string s, count the number of uppercase vowels in even indices.\n//\n//  For example:\n//  countUpper \"aBCdEf\" // 1\n//  countUpper \"abcdefg\" // 0\n//  countUpper \"dBBE\" // 0\nfunc countUpper:num s:string\n    m := {A:0 E:0 I:0 O:0 U:0}\n    result := 0\n    for i := range 0 (len s) 2\n        if has m s[i]\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 1 (countUpper \"aBCdEf\")\n    assert 0 (countUpper \"abcdefg\")\n    assert 0 (countUpper \"dBBE\")\n    assert 0 (countUpper \"B\")\n    assert 1 (countUpper \"U\")\n    assert 0 (countUpper \"\")\n    assert 2 (countUpper \"EEEE\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" total-fails total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// flipCase \"Hello\" // \"hELLO\"\nfunc flipCase:string str:string\n    result:string\n    for i := range (len str)\n        ch := str[i]\n        if \"a\" <= ch\n            result = result + (upper ch)\n        else\n            result = result + (lower ch)\n        end\n\n    end\n    return result\nend\n\nfunc test\n    assert \"\" (flipCase \"\")\n    assert \"hELLO!\" (flipCase \"Hello!\")\n    assert \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" (flipCase \"These violent delights have violent ends\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return string.swapcase()\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n\n#END:TEST\n#START:CHECK\ncheck(flip_case)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// flipCase \"Hello\" // \"hELLO\"\nfunc flipCase:string str:string\n    result:string\n    for i := range (len str)\n        ch := str[i]\n        if \"a\" <= ch\n            result = result + (upper ch)\n        else\n            result = result + (lower ch)\n        end\n\n    end\n    return result\nend\n\nfunc test\n    assert \"\" (flipCase \"\")\n    assert \"hELLO!\" (flipCase \"Hello!\")\n    assert \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" (flipCase \"These violent delights have violent ends\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given an array arr of integers and a positive integer k, return a sorted list\n//  of length k with the maximum k numbers in arr.\n//\n//  Example 1:\n//\n//      Input: arr = [-3, -4, 5], k = 3\n//      Output: [-4, -3, 5]\n//\n//  Example 2:\n//\n//      Input: arr = [4, -4, 4], k = 2\n//      Output: [4, 4]\n//\n//  Example 3:\n//\n//      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n//      Output: [2]\n//\n//  Note:\n//      1. The length of the array will be in the range of [1, 1000].\n//      2. The elements in the array will be in the range of [-1000, 1000].\n//      3. 0 <= k <= len(arr)\nfunc maxArr:[]num nums:[]num n:num\n    if n == 0\n        return []\n    end\n\n    nums = nums[:]\n    sort nums\n    return nums[-n:]\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [-4 -3 5] (maxArr [-3 -4 5] 3)\n    assert [4 4] (maxArr [4 -4 4] 2)\n    assert [2] (maxArr [-3 2 1 2 -1 -2 1] 1)\n    assert [2 20 123] (maxArr [123 -123 20 0 1 2 -3] 3)\n    assert [0 1 2 20] (maxArr [-123 20 0 1 2 -3] 4)\n    assert [-13 -8 0 0 3 5 15] (maxArr [5 15 0 3 -13 -8 0] 7)\n    assert [3 5] (maxArr [-1 0 2 5 3 -10] 2)\n    assert [5] (maxArr [1 0 5 -7] 1)\n    assert [-4 4] (maxArr [4 -4] 2)\n    assert [-10 10] (maxArr [-10 10] 2)\n    assert [] (maxArr [1 2 3 -23 243 -400 0] 0)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n\n#END:TEST\n#START:CHECK\ncheck(maximum)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given an array arr of integers and a positive integer k, return a sorted list\n//  of length k with the maximum k numbers in arr.\n//\n//  Example 1:\n//\n//      Input: arr = [-3, -4, 5], k = 3\n//      Output: [-4, -3, 5]\n//\n//  Example 2:\n//\n//      Input: arr = [4, -4, 4], k = 2\n//      Output: [4, 4]\n//\n//  Example 3:\n//\n//      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n//      Output: [2]\n//\n//  Note:\n//      1. The length of the array will be in the range of [1, 1000].\n//      2. The elements in the array will be in the range of [-1000, 1000].\n//      3. 0 <= k <= len(arr)\nfunc maxArr:[]num nums:[]num n:num\n    if n == 0\n        return []\n    end\n\n    nums = nums[:]\n    sort nums\n    return nums[-n:]\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [-4 -3 5] (maxArr [-3 -4 5] 3)\n    assert [4 4] (maxArr [4 -4 4] 2)\n    assert [2] (maxArr [-3 2 1 2 -1 -2 1] 1)\n    assert [2 20 123] (maxArr [123 -123 20 0 1 2 -3] 3)\n    assert [0 1 2 20] (maxArr [-123 20 0 1 2 -3] 4)\n    assert [-13 -8 0 0 3 5 15] (maxArr [5 15 0 3 -13 -8 0] 7)\n    assert [3 5] (maxArr [-1 0 2 5 3 -10] 2)\n    assert [5] (maxArr [1 0 5 -7] 1)\n    assert [-4 4] (maxArr [4 -4] 2)\n    assert [-10 10] (maxArr [-10 10] 2)\n    assert [] (maxArr [1 2 3 -23 243 -400 0] 0)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  The special factorial is defined as:\n//  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n//  where n > 0\n//  For example:\n//  specialFact 4 //  288\n//  The function will receive an integer as input and should return the special\n//  factorial of this integer.\nfunc specialFact:num n:num\n    fact := 1\n    result := 1\n    for i := range 1 n+1\n        fact = fact * i\n        result = result * fact\n    end\n    return result\nend\n\nfunc test\n    assert 2 (specialFact 2)\n    assert 288 (specialFact 4)\n    assert 34560 (specialFact 5)\n    assert 125411328000 (specialFact 7)\n    assert 1 (specialFact 1)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n\n#END:TEST\n#START:CHECK\ncheck(special_factorial)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  The special factorial is defined as:\n//  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n//  where n > 0\n//  For example:\n//  specialFact 4 //  288\n//  The function will receive an integer as input and should return the special\n//  factorial of this integer.\nfunc specialFact:num n:num\n    fact := 1\n    result := 1\n    for i := range 1 n+1\n        fact = fact * i\n        result = result * fact\n    end\n    return result\nend\n\nfunc test\n    assert 2 (specialFact 2)\n    assert 288 (specialFact 4)\n    assert 34560 (specialFact 5)\n    assert 125411328000 (specialFact 7)\n    assert 1 (specialFact 1)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return only positive numbers in the list.\n// getPositive [-1 2 -4 5 6] // [2, 5, 6]\n// getPositive [5 3 -5 2 -3 3 9 0 123 1 -10] // [5 3 2 3 9 123 1]\nfunc getPositive:[]num nums:[]num\n    result:[]num\n    for n := range nums\n        if n > 0\n            result = result + [n]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [4 5 6] (getPositive [-1 -2 4 5 6])\n    assert [5 3 2 3 3 9 123 1] (getPositive [5 3 -5 2 3 3 9 0 123 1 -10])\n    assert [] (getPositive [-1 -2])\n    assert [] (getPositive [])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return [e for e in l if e > 0]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n\n#END:TEST\n#START:CHECK\ncheck(get_positive)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return only positive numbers in the list.\n// getPositive [-1 2 -4 5 6] // [2, 5, 6]\n// getPositive [5 3 -5 2 -3 3 9 0 123 1 -10] // [5 3 2 3 9 123 1]\nfunc getPositive:[]num nums:[]num\n    result:[]num\n    for n := range nums\n        if n > 0\n            result = result + [n]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [4 5 6] (getPositive [-1 -2 4 5 6])\n    assert [5 3 2 3 3 9 123 1] (getPositive [5 3 -5 2 3 3 9 0 123 1 -10])\n    assert [] (getPositive [-1 -2])\n    assert [] (getPositive [])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// convertBase 8 3 // \"22\"\n// convertBase 8 2 // \"1000\"\n// convertBase 7 2 // \"111\"\nfunc convertBase:string n:num base:num\n    if n == 0\n        return \"0\"\n    end\n    result := \"\"\n    while n > 0\n        result = (sprint n%base) + result\n        n = floor n/base\n    end\n    return result\nend\n\nfunc test\n    assert \"22\" (convertBase 8 3)\n    assert \"100\" (convertBase 9 3)\n    assert \"11101010\" (convertBase 234 2)\n    assert \"10000\" (convertBase 16 2)\n    assert \"1000\" (convertBase 8 2)\n    assert \"111\" (convertBase 7 2)\n    for x := range 9\n        assert (sprint x) (convertBase x x+1)\n    end\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n\n#END:TEST\n#START:CHECK\ncheck(change_base)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// convertBase 8 3 // \"22\"\n// convertBase 8 2 // \"1000\"\n// convertBase 7 2 // \"111\"\nfunc convertBase:string n:num base:num\n    if n == 0\n        return \"0\"\n    end\n    result := \"\"\n    while n > 0\n        result = (sprint n%base) + result\n        n = floor n/base\n    end\n    return result\nend\n\nfunc test\n    assert \"22\" (convertBase 8 3)\n    assert \"100\" (convertBase 9 3)\n    assert \"11101010\" (convertBase 234 2)\n    assert \"10000\" (convertBase 16 2)\n    assert \"1000\" (convertBase 8 2)\n    assert \"111\" (convertBase 7 2)\n    for x := range 9\n        assert (sprint x) (convertBase x x+1)\n    end\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // For a given array of number, return an array consisting of a sum and a product of all the integers in the array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// sumProduct [] // (0, 1)\n// sumProduct [1, 2, 3, 4] // (10, 24)\nfunc sumProduct:[]num numbers:[]num\n    sum_value := 0\n    prod_value := 1\n    for number := range numbers\n        sum_value = sum_value + number\n        prod_value = prod_value * number\n    end\n    return [sum_value prod_value]\nend\n\nfunc test\n    assert [0 1] (sumProduct [])\n    assert [3 1] (sumProduct [1 1 1])\n    assert [100 0] (sumProduct [100 0])\n    assert [15 105] (sumProduct [3 5 7])\n    assert [10 10] (sumProduct [10])\nend\n\nfails := 0\ntotal := 0\n\nfunc assert want:any got:any\n    total = total + 1\n    if (sprintf \"%v\" want) != (sprintf \"%v\" got)\n        fails = fails + 1\n        printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\n    end\nend\n\nfunc finished\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nfinished",
  "input-python #START:PROMPT\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n\n#END:TEST\n#START:CHECK\ncheck(sum_product)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // For a given array of number, return an array consisting of a sum and a product of all the integers in the array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// sumProduct [] // (0, 1)\n// sumProduct [1, 2, 3, 4] // (10, 24)\nfunc sumProduct:[]num numbers:[]num\n    sum_value := 0\n    prod_value := 1\n    for number := range numbers\n        sum_value = sum_value + number\n        prod_value = prod_value * number\n    end\n    return [sum_value prod_value]\nend\n\nfunc test\n    assert [0 1] (sumProduct [])\n    assert [3 1] (sumProduct [1 1 1])\n    assert [100 0] (sumProduct [100 0])\n    assert [15 105] (sumProduct [3 5 7])\n    assert [10 10] (sumProduct [10])\nend\n\nfails := 0\ntotal := 0\n\nfunc assert want:any got:any\n    total = total + 1\n    if (sprintf \"%v\" want) != (sprintf \"%v\" got)\n        fails = fails + 1\n        printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\n    end\nend\n\nfunc finished\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nfinished",
  "input: ",
  "input-text ",
  "input-evy // test if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// hasCloseElements [1.0 2.0 3.0] 0.5 // false\n// hasCloseElements [1.0 2.8 3.0 4.0 5.0 2.0] 0.3 // true\nfunc hasCloseElements:bool numbers:[]num threshold:num\n    for idx := range (len numbers)\n        for idx2 := range (len numbers)\n            if idx != idx2\n                distance := abs (numbers[idx] - numbers[idx2])\n                if distance < threshold\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n\nfunc test\n    assert true (hasCloseElements [1 2 3.9 4 5 2.2] 0.3)\n    assert false (hasCloseElements [1 2 3.9 4 5 2.2] 0.05)\n    assert true (hasCloseElements [1 2 5.9 4 5] 0.95)\n    assert false (hasCloseElements [1 2 5.9 4 5] 0.8)\n    assert true (hasCloseElements [1 2 3 4 5 2] 0.1)\n    assert true (hasCloseElements [1.1 2.2 3.1 4.1 5.1] 1)\n    assert false (hasCloseElements [1.1 2.2 3.1 4.1 5.1] 0.5)\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n\n#END:TEST\n#START:CHECK\ncheck(has_close_elements)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // test if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// hasCloseElements [1.0 2.0 3.0] 0.5 // false\n// hasCloseElements [1.0 2.8 3.0 4.0 5.0 2.0] 0.3 // true\nfunc hasCloseElements:bool numbers:[]num threshold:num\n    for idx := range (len numbers)\n        for idx2 := range (len numbers)\n            if idx != idx2\n                distance := abs (numbers[idx] - numbers[idx2])\n                if distance < threshold\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n\nfunc test\n    assert true (hasCloseElements [1 2 3.9 4 5 2.2] 0.3)\n    assert false (hasCloseElements [1 2 3.9 4 5 2.2] 0.05)\n    assert true (hasCloseElements [1 2 5.9 4 5] 0.95)\n    assert false (hasCloseElements [1 2 5.9 4 5] 0.8)\n    assert true (hasCloseElements [1 2 3 4 5 2] 0.1)\n    assert true (hasCloseElements [1.1 2.2 3.1 4.1 5.1] 1)\n    assert false (hasCloseElements [1.1 2.2 3.1 4.1 5.1] 0.5)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// derivative [3 1 2 4 5] // [1 4 12 20]\n// derivative [1 2 3] // [2 6]\nfunc derivative:[]num xs:[]num\n    result := xs[1:]\n    for i := range 1 (len result)\n        result[i] = result[i] * (i + 1)\n    end\n    return result\nend\n\nfunc test\n    assert [1 4 12 20] (derivative [3 1 2 4 5])\n    assert [2 6] (derivative [1 2 3])\n    assert [2 2] (derivative [3 2 1])\n    assert [2 2 0 16] (derivative [3 2 1 0 4])\n    assert [] (derivative [1])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n\n#END:TEST\n#START:CHECK\ncheck(derivative)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// derivative [3 1 2 4 5] // [1 4 12 20]\n// derivative [1 2 3] // [2 6]\nfunc derivative:[]num xs:[]num\n    result := xs[1:]\n    for i := range 1 (len result)\n        result[i] = result[i] * (i + 1)\n    end\n    return result\nend\n\nfunc test\n    assert [1 4 12 20] (derivative [3 1 2 4 5])\n    assert [2 6] (derivative [1 2 3])\n    assert [2 2] (derivative [3 2 1])\n    assert [2 2 0 16] (derivative [3 2 1 0 4])\n    assert [] (derivative [1])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Write a function that takes an number a and returns true\n// if this number is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nfunc iscube:bool n:num\n    if n < 0\n        n = -n //abs\n    end\n    cuberoot := pow n 1/3\n    n2 := pow (round cuberoot) 3\n    return (round n2) == n\nend\n\nfunc test\n    assert true (iscube 1)\n    assert false (iscube 2)\n    assert true (iscube -1)\n    assert true (iscube 64)\n    assert false (iscube 180)\n    assert true (iscube 1000)\n    assert true (iscube 0)\n    assert false (iscube 1729)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n\n#END:TEST\n#START:CHECK\ncheck(iscube)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function that takes an number a and returns true\n// if this number is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nfunc iscube:bool n:num\n    if n < 0\n        n = -n //abs\n    end\n    cuberoot := pow n 1/3\n    n2 := pow (round cuberoot) 3\n    return (round n2) == n\nend\n\nfunc test\n    assert true (iscube 1)\n    assert false (iscube 2)\n    assert true (iscube -1)\n    assert true (iscube 64)\n    assert false (iscube 180)\n    assert true (iscube 1000)\n    assert true (iscube 0)\n    assert false (iscube 1729)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // sum is a function that sums numbers from 1 to n.\n// sum 30 // 465\n// sum 100 // 5050\n// sum 5 // 15\n// sum 10 // 55\n// sum 1 // 1\nfunc sum:num n:num\n    return n * (n + 1) / 2\nend\n\nfunc test\n    assert 1 (sum 1)\n    assert 21 (sum 6)\n    assert 66 (sum 11)\n    assert 465 (sum 30)\n    assert 5050 (sum 100)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return sum(range(n + 1))\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n\n#END:TEST\n#START:CHECK\ncheck(sum_to_n)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // sum is a function that sums numbers from 1 to n.\n// sum 30 // 465\n// sum 100 // 5050\n// sum 5 // 15\n// sum 10 // 55\n// sum 1 // 1\nfunc sum:num n:num\n    return n * (n + 1) / 2\nend\n\nfunc test\n    assert 1 (sum 1)\n    assert 21 (sum 6)\n    assert 66 (sum 11)\n    assert 465 (sum 30)\n    assert 5050 (sum 100)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given an array of positive integers x. return a sorted array of all\n// elements that doesn't have any even digits.\n// Note: Returned list should be sorted in increasing order.\n// oddDigits [15 33 1422 1] // [1 15 33]\n// oddDigits [152 323 1422 10] // []\n\nfunc oddDigits:[]num nums:[]num\n    result:[]num\n    for n := range nums\n        if hasNoEvenDigits n\n            result = result + [n]\n        end\n    end\n    sort result\n    return result\nend\n\nfunc hasNoEvenDigits:bool n:num\n    while n > 0\n        if n % 2 == 0\n            return false\n        end\n        n = floor n/10\n    end\n    return true\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 15 33] (oddDigits [15 33 1422 1])\n    assert [] (oddDigits [152 323 1422 10])\n    assert [111 151] (oddDigits [12345 2033 111 151])\n    assert [31 135] (oddDigits [135 103 31])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(unique_digits)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given an array of positive integers x. return a sorted array of all\n// elements that doesn't have any even digits.\n// Note: Returned list should be sorted in increasing order.\n// oddDigits [15 33 1422 1] // [1 15 33]\n// oddDigits [152 323 1422 10] // []\n\nfunc oddDigits:[]num nums:[]num\n    result:[]num\n    for n := range nums\n        if hasNoEvenDigits n\n            result = result + [n]\n        end\n    end\n    sort result\n    return result\nend\n\nfunc hasNoEvenDigits:bool n:num\n    while n > 0\n        if n % 2 == 0\n            return false\n        end\n        n = floor n/10\n    end\n    return true\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 15 33] (oddDigits [15 33 1422 1])\n    assert [] (oddDigits [152 323 1422 10])\n    assert [111 151] (oddDigits [12345 2033 111 151])\n    assert [31 135] (oddDigits [135 103 31])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n//\n// solve [\"1234567\"] // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// solve([\"3\",\"11111111\"])\n// [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc solve:[]string arr:[]string\n    result:[]string\n    for s := range arr\n        n := oddCount s\n        r := sprintf \"the number of odd elements %vn the str%vng %v of the %vnput.\" n n n n\n        result = result + [r]\n    end\n    return result\nend\n\nfunc oddCount:num s:string\n    result := 0\n    for c := range s\n        n := str2num c\n        if n % 2 == 1\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert (solve [\"1234567\"]) [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    assert (solve [\"3\" \"11111111\"]) [\n        \"the number of odd elements 1n the str1ng 1 of the 1nput.\"\n        \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\n    ]\n    assert (solve [\"271\" \"137\" \"314\"]) [\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    ]\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(odd_count)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n//\n// solve [\"1234567\"] // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// solve([\"3\",\"11111111\"])\n// [ \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc solve:[]string arr:[]string\n    result:[]string\n    for s := range arr\n        n := oddCount s\n        r := sprintf \"the number of odd elements %vn the str%vng %v of the %vnput.\" n n n n\n        result = result + [r]\n    end\n    return result\nend\n\nfunc oddCount:num s:string\n    result := 0\n    for c := range s\n        n := str2num c\n        if n % 2 == 1\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert (solve [\"1234567\"]) [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    assert (solve [\"3\" \"11111111\"]) [\n        \"the number of odd elements 1n the str1ng 1 of the 1nput.\"\n        \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\n    ]\n    assert (solve [\"271\" \"137\" \"314\"]) [\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    ]\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Create a function that returns an array [a, b], where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as false.\n// Examples:\n// maxNegMinPos [2, 4, 1, 3, 5, 7] // [false 1]\n// maxNegMinPos [] // [false false]\n// maxNegMinPos [0] // [false false]\nfunc maxNegMinPos:[]any nums:[]num\n    maxNeg:any\n    minPos:any\n    for n := range nums\n        if n < 0 and ((typeof maxNeg) == \"bool\" or n > maxNeg.(num))\n            maxNeg = n\n        end\n        if n > 0 and ((typeof minPos) == \"bool\" or n < minPos.(num))\n            minPos = n\n        end\n    end\n    return [maxNeg minPos]\nend\n\nfunc test\n    assert [false 1] (maxNegMinPos [2 4 1 3 5 7])\n    assert [false 1] (maxNegMinPos [2 4 1 3 5 7 0])\n    assert (anyArr [-2 1]) (maxNegMinPos [1 3 2 4 5 6 -2])\n    assert (anyArr [-7 2]) (maxNegMinPos [4 5 3 6 2 7 -7])\n    assert (anyArr [-9 2]) (maxNegMinPos [7 3 8 4 9 2 5 -9])\n    assert (anyArr [false false]) (maxNegMinPos [])\n    assert (anyArr [false false]) (maxNegMinPos [0])\n    assert [-1 false] (maxNegMinPos [-1 -3 -5 -6])\n    assert [-1 false] (maxNegMinPos [-1 -3 -5 -6 0])\n    assert (anyArr [-3 1]) (maxNegMinPos [-6 -4 -4 -3 1])\n    assert (anyArr [-3 1]) (maxNegMinPos [-6 -4 -4 -3 -100 1])\nend\n\nfunc anyArr:[]any a:[]any\n    return a\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n#END:TEST\n#START:CHECK\ncheck(largest_smallest_integers)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Create a function that returns an array [a, b], where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as false.\n// Examples:\n// maxNegMinPos [2, 4, 1, 3, 5, 7] // [false 1]\n// maxNegMinPos [] // [false false]\n// maxNegMinPos [0] // [false false]\nfunc maxNegMinPos:[]any nums:[]num\n    maxNeg:any\n    minPos:any\n    for n := range nums\n        if n < 0 and ((typeof maxNeg) == \"bool\" or n > maxNeg.(num))\n            maxNeg = n\n        end\n        if n > 0 and ((typeof minPos) == \"bool\" or n < minPos.(num))\n            minPos = n\n        end\n    end\n    return [maxNeg minPos]\nend\n\nfunc test\n    assert [false 1] (maxNegMinPos [2 4 1 3 5 7])\n    assert [false 1] (maxNegMinPos [2 4 1 3 5 7 0])\n    assert (anyArr [-2 1]) (maxNegMinPos [1 3 2 4 5 6 -2])\n    assert (anyArr [-7 2]) (maxNegMinPos [4 5 3 6 2 7 -7])\n    assert (anyArr [-9 2]) (maxNegMinPos [7 3 8 4 9 2 5 -9])\n    assert (anyArr [false false]) (maxNegMinPos [])\n    assert (anyArr [false false]) (maxNegMinPos [0])\n    assert [-1 false] (maxNegMinPos [-1 -3 -5 -6])\n    assert [-1 false] (maxNegMinPos [-1 -3 -5 -6 0])\n    assert (anyArr [-3 1]) (maxNegMinPos [-6 -4 -4 -3 1])\n    assert (anyArr [-3 1]) (maxNegMinPos [-6 -4 -4 -3 -100 1])\nend\n\nfunc anyArr:[]any a:[]any\n    return a\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n//\n//  The Collatz conjecture is a conjecture in mathematics that concerns a\n//  sequence defined as follows: start with any positive integer n. Then each\n//  term is obtained from the previous term as follows: if the previous term\n//  is even, the next term is one half of the previous term. If the previous\n//  term is odd, the next term is 3 times the previous term plus 1. The\n//  conjecture is that no matter what value of n, the sequence will always\n//  reach 1.\n//\n//  Note:\n//      1. Collatz(1) is [1].\n//      2. returned list sorted in increasing order.\n//\n//  For example:\n//  oddCollatz(5) returns [1, 5]\n//  The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\nfunc oddCollatz:[]num n:num\n    collatz := [n]\n    while n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n            n = n * 3 + 1\n        end\n        collatz = collatz + [n]\n    end\n    result:[]num\n    for n := range collatz\n        if n % 2 == 1\n            result = result + [n]\n        end\n    end\n    sort result\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 5 7 11 13 17] (oddCollatz 14)\n    assert [1 5] (oddCollatz 5)\n    assert [1 3 5] (oddCollatz 12)\n    assert [1] (oddCollatz 1)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(get_odd_collatz)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n//\n//  The Collatz conjecture is a conjecture in mathematics that concerns a\n//  sequence defined as follows: start with any positive integer n. Then each\n//  term is obtained from the previous term as follows: if the previous term\n//  is even, the next term is one half of the previous term. If the previous\n//  term is odd, the next term is 3 times the previous term plus 1. The\n//  conjecture is that no matter what value of n, the sequence will always\n//  reach 1.\n//\n//  Note:\n//      1. Collatz(1) is [1].\n//      2. returned list sorted in increasing order.\n//\n//  For example:\n//  oddCollatz(5) returns [1, 5]\n//  The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\nfunc oddCollatz:[]num n:num\n    collatz := [n]\n    while n > 1\n        if n % 2 == 0\n            n = n / 2\n        else\n            n = n * 3 + 1\n        end\n        collatz = collatz + [n]\n    end\n    result:[]num\n    for n := range collatz\n        if n % 2 == 1\n            result = result + [n]\n        end\n    end\n    sort result\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 5 7 11 13 17] (oddCollatz 14)\n    assert [1 5] (oddCollatz 5)\n    assert [1 3 5] (oddCollatz 12)\n    assert [1] (oddCollatz 1)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return a greatest common divisor of two integers a and b\n// gcd(3, 5) // 1\n// gcd(25, 15) // 5\nfunc gcd:num a:num b:num\n    while b != 0\n        tmp := a\n        a = b\n        b = tmp % b\n    end\n    return a\nend\n\nfunc test\n    assert 1 (gcd 3 7)\n    assert 5 (gcd 10 15)\n    assert 7 (gcd 49 14)\n    assert 12 (gcd 144 60)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    while b:\n        a, b = b, a % b\n    return a\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n\n#END:TEST\n#START:CHECK\ncheck(greatest_common_divisor)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return a greatest common divisor of two integers a and b\n// gcd(3, 5) // 1\n// gcd(25, 15) // 5\nfunc gcd:num a:num b:num\n    while b != 0\n        tmp := a\n        a = b\n        b = tmp % b\n    end\n    return a\nend\n\nfunc test\n    assert 1 (gcd 3 7)\n    assert 5 (gcd 10 15)\n    assert 7 (gcd 49 14)\n    assert 12 (gcd 144 60)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return sorted unique elements in an array\n// unique [5, 3, 5, 2, 3, 3, 9, 0, 123] [0, 2, 3, 5, 9, 123]\nfunc unique:[]num nums:[]num\n    if (len nums) < 2\n        return nums\n    end\n\n    nums2 := nums[:]\n    sort nums2\n    result := [nums2[0]]\n\n    for n := range nums2\n        if n != result[-1]\n            result = result + [n]\n        end\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [0 2 3 5 9 123] (unique [5 3 5 2 3 3 9 0 123])\n    assert [] (unique [])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return sorted(list(set(l)))\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n\n#END:TEST\n#START:CHECK\ncheck(unique)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return sorted unique elements in an array\n// unique [5, 3, 5, 2, 3, 3, 9, 0, 123] [0, 2, 3, 5, 9, 123]\nfunc unique:[]num nums:[]num\n    if (len nums) < 2\n        return nums\n    end\n\n    nums2 := nums[:]\n    sort nums2\n    result := [nums2[0]]\n\n    for n := range nums2\n        if n != result[-1]\n            result = result + [n]\n        end\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [0 2 3 5 9 123] (unique [5 3 5 2 3 3 9 0 123])\n    assert [] (unique [])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return length of given string\n// strlen \"\" // 0\n// strlen \"abc\" // 3\nfunc strlen:num str:string\n    return len str\nend\n\nfunc test\n    assert 0 (strlen \"\")\n    assert 1 (strlen \"x\")\n    assert 9 (strlen \"asdasnakj\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return len(string)\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n\n#END:TEST\n#START:CHECK\ncheck(strlen)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return length of given string\n// strlen \"\" // 0\n// strlen \"abc\" // 3\nfunc strlen:num str:string\n    return len str\nend\n\nfunc test\n    assert 0 (strlen \"\")\n    assert 1 (strlen \"x\")\n    assert 9 (strlen \"asdasnakj\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n//     Input: sentence = \"This is a test\"\n//     Output: \"is\"\n// Example 2:\n//     Input: sentence = \"lets go for swimming\"\n//     Output: \"go for\"\n// Constraints:\n//     * 1 <= len(sentence) <= 100\n//     * sentence contains only letters\nfunc primeWords:string s:string\n    words := split s \" \"\n    result:[]string\n    for word := range words\n        if (isPrime (len word))\n            result = result + [word]\n        end\n    end\n    return join result \" \"\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 n\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert \"is\" (primeWords \"This is a test\")\n    assert \"go for\" (primeWords \"lets go for swimming\")\n    assert \"there is no place\" (primeWords \"there is no place available here\")\n    assert \"Hi am Hussein\" (primeWords \"Hi I am Hussein\")\n    assert \"go for it\" (primeWords \"go for it\")\n    assert \"\" (primeWords \"here\")\n    assert \"is\" (primeWords \"here is\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n\n#END:TEST\n#START:CHECK\ncheck(words_in_sentence)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n//     Input: sentence = \"This is a test\"\n//     Output: \"is\"\n// Example 2:\n//     Input: sentence = \"lets go for swimming\"\n//     Output: \"go for\"\n// Constraints:\n//     * 1 <= len(sentence) <= 100\n//     * sentence contains only letters\nfunc primeWords:string s:string\n    words := split s \" \"\n    result:[]string\n    for word := range words\n        if (isPrime (len word))\n            result = result + [word]\n        end\n    end\n    return join result \" \"\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 n\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert \"is\" (primeWords \"This is a test\")\n    assert \"go for\" (primeWords \"lets go for swimming\")\n    assert \"there is no place\" (primeWords \"there is no place available here\")\n    assert \"Hi am Hussein\" (primeWords \"Hi I am Hussein\")\n    assert \"go for it\" (primeWords \"go for it\")\n    assert \"\" (primeWords \"here\")\n    assert \"is\" (primeWords \"here is\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You are given a positive integer n. You have to create an integer array a of length n.\n//     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n//     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n//     Input: n = 5\n//     Output: 1\n//     Explanation:\n//     a = [1, 3, 7, 13, 21]\n//     The only valid triple is (1, 7, 13).\nfunc triples:num n:num\n    arr:[]num\n    for i := range 1 n+1\n        arr = arr + [i*i-i+1]\n    end\n    result := 0\n    for i := range n\n        for j := range i+1 n\n            for k := range j+1 n\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0\n                    result = result + 1\n                end\n            end\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 1 (triples 5)\n    assert 4 (triples 6)\n    assert 36 (triples 10)\n    assert 53361 (triples 100)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n#END:TEST\n#START:CHECK\ncheck(get_max_triples)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given a positive integer n. You have to create an integer array a of length n.\n//     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n//     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n//     Input: n = 5\n//     Output: 1\n//     Explanation:\n//     a = [1, 3, 7, 13, 21]\n//     The only valid triple is (1, 7, 13).\nfunc triples:num n:num\n    arr:[]num\n    for i := range 1 n+1\n        arr = arr + [i*i-i+1]\n    end\n    result := 0\n    for i := range n\n        for j := range i+1 n\n            for k := range j+1 n\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0\n                    result = result + 1\n                end\n            end\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 1 (triples 5)\n    assert 4 (triples 6)\n    assert 36 (triples 10)\n    assert 53361 (triples 100)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given an array of non-negative integers, return a copy of the given array\n// after sorting, you will sort the given array in ascending order if the sum\n// of first index value and last index value is odd, or sort it in descending\n// order if the sum  of first index value and last index value is even.\n//\n// Note: don't change the given array.\n// sortArray [] // []\n// sortArray [5] // [5]\n// sortArray [2 4 3 0 1 5] // [0 1 2 3 4 5]\n// sortArray [2 4 3 0 1 5 6] // [6 5 4 3 2 1 0]\nfunc sortArray:[]num nums:[]num\n    if (len nums) <= 1\n        return nums\n    end\n    result := nums[:]\n    asc := (nums[0] + nums[-1]) % 2 == 1\n    sort result asc\n    return result\nend\n\nfunc sort arr:[]num asc:bool\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if (asc and arr[i] > arr[i + 1]) or (!asc and arr[i] < arr[i + 1])\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [] (sortArray [])\n    assert [5] (sortArray [5])\n    assert [0 1 2 3 4 5] (sortArray [2 4 3 0 1 5])\n    assert [6 5 4 3 2 1 0] (sortArray [2 4 3 0 1 5 6])\n    assert [1 2] (sortArray [2 1])\n    assert [0 11 15 32 42 87] (sortArray [15 42 87 32 11 0])\n    assert [23 21 14 11] (sortArray [21 14 23 11])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n\n#END:TEST\n#START:CHECK\ncheck(sort_array)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given an array of non-negative integers, return a copy of the given array\n// after sorting, you will sort the given array in ascending order if the sum\n// of first index value and last index value is odd, or sort it in descending\n// order if the sum  of first index value and last index value is even.\n//\n// Note: don't change the given array.\n// sortArray [] // []\n// sortArray [5] // [5]\n// sortArray [2 4 3 0 1 5] // [0 1 2 3 4 5]\n// sortArray [2 4 3 0 1 5 6] // [6 5 4 3 2 1 0]\nfunc sortArray:[]num nums:[]num\n    if (len nums) <= 1\n        return nums\n    end\n    result := nums[:]\n    asc := (nums[0] + nums[-1]) % 2 == 1\n    sort result asc\n    return result\nend\n\nfunc sort arr:[]num asc:bool\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if (asc and arr[i] > arr[i + 1]) or (!asc and arr[i] < arr[i + 1])\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [] (sortArray [])\n    assert [5] (sortArray [5])\n    assert [0 1 2 3 4 5] (sortArray [2 4 3 0 1 5])\n    assert [6 5 4 3 2 1 0] (sortArray [2 4 3 0 1 5 6])\n    assert [1 2] (sortArray [2 1])\n    assert [0 11 15 32 42 87] (sortArray [15 42 87 32 11 0])\n    assert [23 21 14 11] (sortArray [21 14 23 11])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Return true if all numbers in the list l are below threshold t.\n// below [1 2 4 10] 100// true\n// below [1 20 4 10] 5 // false\nfunc below:bool nums:[]num t:num\n    for n := range nums\n        if n >= t\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert true (below [1 2 4 10] 100)\n    assert false (below [1 20 4 10] 5)\n    assert true (below [1 20 4 10] 21)\n    assert true (below [1 20 4 10] 22)\n    assert true (below [1 8 4 10] 11)\n    assert false (below [1 8 4 10] 10)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n\n#END:TEST\n#START:CHECK\ncheck(below_threshold)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return true if all numbers in the list l are below threshold t.\n// below [1 2 4 10] 100// true\n// below [1 20 4 10] 5 // false\nfunc below:bool nums:[]num t:num\n    for n := range nums\n        if n >= t\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert true (below [1 2 4 10] 100)\n    assert false (below [1 20 4 10] 5)\n    assert true (below [1 20 4 10] 21)\n    assert true (below [1 20 4 10] 22)\n    assert true (below [1 8 4 10] 11)\n    assert false (below [1 8 4 10] 10)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  You are given a 2 dimensional data set  as a nested lists, which is\n//  similar to a matrix, however, unlike matrices, each row may contain a\n//  different number of columns. Given lst, and integer x, find integers x in\n//  the list, and return list of tuples, [ x1, y1 ,  x2, y2  ...] such that\n//  each tuple is a coordinate -  row, columns , starting with 0. Sort\n//  coordinates initially by rows in ascending order. Also, sort coordinates\n//  of the row by columns in descending order.\n//\n//  Examples:\n//  coords [\n//    [1 2 3 4 5 6]\n//    [1 2 3 4 1 6]\n//    [1 2 3 4 5 1]\n//  ] 1 == [0 0 1 4 1 0 2 5 2 0]\n//  coords []  1  == []\n//  coords [[]  [1]  [1  2  3]]  3  == [ 2  2 ]\nfunc coords:[]num m:[][]num n:num\n    result:[]num\n    for i := range (len m)\n        row := m[i]\n        for j := range (len row)-1 -1 -1\n            if row[j] == n\n                result = result + [i j]\n            end\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [[0 0] [1 4] [1 0] [2 5] [2 0]] (coords [[1 2 3 4 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1)\n    assert [[0 1] [1 1] [2 1] [3 1] [4 1] [5 1]] (coords [[1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6]] 2)\n    assert [[0 0] [1 0] [2 1] [2 0] [3 2] [3 0] [4 3] [4 0] [5 4] [5 0] [6 5] [6 0]] (coords [[1 2 3 4 5 6] [1 2 3 4 5 6] [1 1 3 4 5 6] [1 2 1 4 5 6] [1 2 3 1 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1)\n    assert [] (coords [] 1)\n    assert [] (coords [[1]] 2)\n    assert [[2 2]] (coords [[] [1] [1 2 3]] 3)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(get_row)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  You are given a 2 dimensional data set  as a nested lists, which is\n//  similar to a matrix, however, unlike matrices, each row may contain a\n//  different number of columns. Given lst, and integer x, find integers x in\n//  the list, and return list of tuples, [ x1, y1 ,  x2, y2  ...] such that\n//  each tuple is a coordinate -  row, columns , starting with 0. Sort\n//  coordinates initially by rows in ascending order. Also, sort coordinates\n//  of the row by columns in descending order.\n//\n//  Examples:\n//  coords [\n//    [1 2 3 4 5 6]\n//    [1 2 3 4 1 6]\n//    [1 2 3 4 5 1]\n//  ] 1 == [0 0 1 4 1 0 2 5 2 0]\n//  coords []  1  == []\n//  coords [[]  [1]  [1  2  3]]  3  == [ 2  2 ]\nfunc coords:[]num m:[][]num n:num\n    result:[]num\n    for i := range (len m)\n        row := m[i]\n        for j := range (len row)-1 -1 -1\n            if row[j] == n\n                result = result + [i j]\n            end\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [[0 0] [1 4] [1 0] [2 5] [2 0]] (coords [[1 2 3 4 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1)\n    assert [[0 1] [1 1] [2 1] [3 1] [4 1] [5 1]] (coords [[1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6] [1 2 3 4 5 6]] 2)\n    assert [[0 0] [1 0] [2 1] [2 0] [3 2] [3 0] [4 3] [4 0] [5 4] [5 0] [6 5] [6 0]] (coords [[1 2 3 4 5 6] [1 2 3 4 5 6] [1 1 3 4 5 6] [1 2 1 4 5 6] [1 2 3 1 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1)\n    assert [] (coords [] 1)\n    assert [] (coords [[1]] 2)\n    assert [[2 2]] (coords [[] [1] [1 2 3]] 3)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy //  Create a function that takes 3 numbers.\n//  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//  Returns false in any other cases.\n//\n//  Examples\n//  sum 5, 2, 7  // true\n//  sum 3, 2, 2  // false\n//  sum 3, -2, 1  // true\n//  sum 3.6, -2.2, 2  // false\nfunc sum:bool x:num y:num z:num\n    return ((x + y == z) or (x + z == y) or (y + z == x)) and (int x) and (int y) and (int z)\nend\n\nfunc int:bool n:num\n    return n == (round n)\nend\n\nfunc test\n    assert true (sum 2 3 1)\n    assert false (sum 2.5 2 3)\n    assert false (sum 1.5 5 3.5)\n    assert false (sum 2 6 2)\n    assert true (sum 4 2 2)\n    assert false (sum 2.2 2.2 2.2)\n    assert true (sum -4 6 2)\n    assert true (sum 2 1 1)\n    assert true (sum 3 4 7)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(any_int)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Create a function that takes 3 numbers.\n//  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//  Returns false in any other cases.\n//\n//  Examples\n//  sum 5, 2, 7  // true\n//  sum 3, 2, 2  // false\n//  sum 3, -2, 1  // true\n//  sum 3.6, -2.2, 2  // false\nfunc sum:bool x:num y:num z:num\n    return ((x + y == z) or (x + z == y) or (y + z == x)) and (int x) and (int y) and (int z)\nend\n\nfunc int:bool n:num\n    return n == (round n)\nend\n\nfunc test\n    assert true (sum 2 3 1)\n    assert false (sum 2.5 2 3)\n    assert false (sum 1.5 5 3.5)\n    assert false (sum 2 6 2)\n    assert true (sum 4 2 2)\n    assert false (sum 2.2 2.2 2.2)\n    assert true (sum -4 6 2)\n    assert true (sum 2 1 1)\n    assert true (sum 3 4 7)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // There are eight planets in our solar system: the closest to the Sun\n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2.\n// The function should return a tuple containing all planets whose orbits are\n// located between the orbit of planet1 and the orbit of planet2, sorted by\n// the proximity to the sun.\n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names.\n// Examples\n// between \"Jupiter\" \"Neptune\" // [\"Saturn\" \"Uranus\"]\n// between \"Earth\" \"Mercury\" // [\"Venus\"]\n// between \"Mercury\" \"Uranus\" // [\"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"]\nfunc between:[]string p1:string p2:string\n    planets := [\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"]\n    lookup:{}num\n    for i := range (len planets)\n        lookup[planets[i]] = i\n    end\n    if !(has lookup p1) or !(has lookup p2) or p1 == p2\n        return []\n    end\n    if lookup[p1] > lookup[p2]\n        return planets[lookup[p2] + 1:lookup[p1]]\n    end\n    return planets[lookup[p1] + 1:lookup[p2]]\nend\n\nfunc test\n    assert [\"Saturn\" \"Uranus\"] (between \"Jupiter\" \"Neptune\")\n    assert [\"Venus\"] (between \"Earth\" \"Mercury\")\n    assert [\"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"] (between \"Mercury\" \"Uranus\")\n    assert [\"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\"] (between \"Neptune\" \"Venus\")\n    assert [] (between \"Earth\" \"Earth\")\n    assert [] (between \"Mars\" \"Earth\")\n    assert [] (between \"Jupiter\" \"Makemake\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n\n#END:TEST\n#START:CHECK\ncheck(bf)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // There are eight planets in our solar system: the closest to the Sun\n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2.\n// The function should return a tuple containing all planets whose orbits are\n// located between the orbit of planet1 and the orbit of planet2, sorted by\n// the proximity to the sun.\n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names.\n// Examples\n// between \"Jupiter\" \"Neptune\" // [\"Saturn\" \"Uranus\"]\n// between \"Earth\" \"Mercury\" // [\"Venus\"]\n// between \"Mercury\" \"Uranus\" // [\"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"]\nfunc between:[]string p1:string p2:string\n    planets := [\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"]\n    lookup:{}num\n    for i := range (len planets)\n        lookup[planets[i]] = i\n    end\n    if !(has lookup p1) or !(has lookup p2) or p1 == p2\n        return []\n    end\n    if lookup[p1] > lookup[p2]\n        return planets[lookup[p2] + 1:lookup[p1]]\n    end\n    return planets[lookup[p1] + 1:lookup[p2]]\nend\n\nfunc test\n    assert [\"Saturn\" \"Uranus\"] (between \"Jupiter\" \"Neptune\")\n    assert [\"Venus\"] (between \"Earth\" \"Mercury\")\n    assert [\"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"] (between \"Mercury\" \"Uranus\")\n    assert [\"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\"] (between \"Neptune\" \"Venus\")\n    assert [] (between \"Earth\" \"Earth\")\n    assert [] (between \"Mars\" \"Earth\")\n    assert [] (between \"Jupiter\" \"Makemake\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You have been tasked to write a function that receives\n// a hexadecimal number as a string and counts the number of hexadecimal\n// digits that are primes (prime number, or a prime, is a natural number\n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7,\n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string,\n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// hexprimes \"AB\" // 1\n// hexprimes \"1077E\" // 2\n// hexprimes \"ABED1A33\" // 4\n// hexprimes \"123456789ABCDEF0\" // 6\n// hexprimes \"2020\" // 2\nfunc hexprimes:num str:string\n    primes := {}\n    for p := range \"2357BD\"\n        primes[p] = true\n    end\n    result := 0\n    for ch := range str\n        if (has primes ch)\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 1 (hexprimes \"AB\")\n    assert 2 (hexprimes \"1077E\")\n    assert 4 (hexprimes \"ABED1A33\")\n    assert 2 (hexprimes \"2020\")\n    assert 6 (hexprimes \"123456789ABCDEF0\")\n    assert 12 (hexprimes \"112233445566778899AABBCCDDEEFF00\")\n    assert 0 (hexprimes \"\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n\n#END:TEST\n#START:CHECK\ncheck(hex_key)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You have been tasked to write a function that receives\n// a hexadecimal number as a string and counts the number of hexadecimal\n// digits that are primes (prime number, or a prime, is a natural number\n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7,\n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string,\n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// hexprimes \"AB\" // 1\n// hexprimes \"1077E\" // 2\n// hexprimes \"ABED1A33\" // 4\n// hexprimes \"123456789ABCDEF0\" // 6\n// hexprimes \"2020\" // 2\nfunc hexprimes:num str:string\n    primes := {}\n    for p := range \"2357BD\"\n        primes[p] = true\n    end\n    result := 0\n    for ch := range str\n        if (has primes ch)\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 1 (hexprimes \"AB\")\n    assert 2 (hexprimes \"1077E\")\n    assert 4 (hexprimes \"ABED1A33\")\n    assert 2 (hexprimes \"2020\")\n    assert 6 (hexprimes \"123456789ABCDEF0\")\n    assert 12 (hexprimes \"112233445566778899AABBCCDDEEFF00\")\n    assert 0 (hexprimes \"\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // tripleSumZero takes an array of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// tripleSumZero [1 3 5 0] // false\n// tripleSumZero [1 3 -2 1] // true\n// tripleSumZero [1 2 3 7] // false\n// tripleSumZero [2 4 -5 3 9 7] // true\n// tripleSumZero [1] // false\nfunc tripleSumZerol:bool nums:[]num\n    length := len nums\n    for i := range length\n        for j := range i+1 length\n            for k := range j+1 length\n                if nums[i] + nums[j] + nums[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n\nfunc test\n    assert false (tripleSumZerol [1 3 5 0])\n    assert false (tripleSumZerol [1 3 5 -1])\n    assert true (tripleSumZerol [1 3 -2 1])\n    assert false (tripleSumZerol [1 2 3 7])\n    assert false (tripleSumZerol [1 2 5 7])\n    assert true (tripleSumZerol [2 4 -5 3 9 7])\n    assert false (tripleSumZerol [1])\n    assert false (tripleSumZerol [1 3 5 -100])\n    assert false (tripleSumZerol [100 3 5 -100])\n\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n\n#END:TEST\n#START:CHECK\ncheck(triples_sum_to_zero)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // tripleSumZero takes an array of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// tripleSumZero [1 3 5 0] // false\n// tripleSumZero [1 3 -2 1] // true\n// tripleSumZero [1 2 3 7] // false\n// tripleSumZero [2 4 -5 3 9 7] // true\n// tripleSumZero [1] // false\nfunc tripleSumZerol:bool nums:[]num\n    length := len nums\n    for i := range length\n        for j := range i+1 length\n            for k := range j+1 length\n                if nums[i] + nums[j] + nums[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n\nfunc test\n    assert false (tripleSumZerol [1 3 5 0])\n    assert false (tripleSumZerol [1 3 5 -1])\n    assert true (tripleSumZerol [1 3 -2 1])\n    assert false (tripleSumZerol [1 2 3 7])\n    assert false (tripleSumZerol [1 2 5 7])\n    assert true (tripleSumZerol [2 4 -5 3 9 7])\n    assert false (tripleSumZerol [1])\n    assert false (tripleSumZerol [1 3 5 -100])\n    assert false (tripleSumZerol [100 3 5 -100])\n\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return true if list elements are monotonically increasing or decreasing.\n// monotonic([1, 2, 4, 20]) // true\n// monotonic([1, 20, 4, 10]) // false\n// monotonic([4, 1, 0, -10]) // true\nfunc monotonic:bool nums:[]num\n    numsInc := nums[:]\n    numsDec := nums[:]\n    sort numsInc true\n    sort numsDec false\n    return nums == numsInc or nums == numsDec\nend\n\nfunc sort arr:[]num inc:bool\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if (inc and arr[i] > arr[i + 1]) or (!inc and arr[i] < arr[i + 1])\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert true (monotonic [1 2 4 10])\n    assert true (monotonic [1 2 4 20])\n    assert false (monotonic [1 20 4 10])\n    assert true (monotonic [4 1 0 -10])\n    assert true (monotonic [4 1 1 0])\n    assert false (monotonic [1 2 3 2 5 60])\n    assert true (monotonic [1 2 3 4 5 60])\n    assert true (monotonic [9 9 9 9])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n\n#END:TEST\n#START:CHECK\ncheck(monotonic)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return true if list elements are monotonically increasing or decreasing.\n// monotonic([1, 2, 4, 20]) // true\n// monotonic([1, 20, 4, 10]) // false\n// monotonic([4, 1, 0, -10]) // true\nfunc monotonic:bool nums:[]num\n    numsInc := nums[:]\n    numsDec := nums[:]\n    sort numsInc true\n    sort numsDec false\n    return nums == numsInc or nums == numsDec\nend\n\nfunc sort arr:[]num inc:bool\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if (inc and arr[i] > arr[i + 1]) or (!inc and arr[i] < arr[i + 1])\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert true (monotonic [1 2 4 10])\n    assert true (monotonic [1 2 4 20])\n    assert false (monotonic [1 20 4 10])\n    assert true (monotonic [4 1 0 -10])\n    assert true (monotonic [4 1 1 0])\n    assert false (monotonic [1 2 3 2 5 60])\n    assert true (monotonic [1 2 3 4 5 60])\n    assert true (monotonic [9 9 9 9])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Concatenate list of strings into a single string\n// concatenate []  // \"\"\n// concatenate [\"a\", \"b\", \"c\"] \"abc\"\nfunc concatenate:string strings:[]string\n    return (join strings \"\")\nend\n\nfunc test\n    assert \"\" (concatenate [])\n    assert \"xyz\" (concatenate [\"x\" \"y\" \"z\"])\n    assert \"xyzwk\" (concatenate [\"x\" \"y\" \"z\" \"w\" \"k\"])\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return ''.join(strings)\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n\n#END:TEST\n#START:CHECK\ncheck(concatenate)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Concatenate list of strings into a single string\n// concatenate []  // \"\"\n// concatenate [\"a\", \"b\", \"c\"] \"abc\"\nfunc concatenate:string strings:[]string\n    return (join strings \"\")\nend\n\nfunc test\n    assert \"\" (concatenate [])\n    assert \"xyz\" (concatenate [\"x\" \"y\" \"z\"])\n    assert \"xyzwk\" (concatenate [\"x\" \"y\" \"z\" \"w\" \"k\"])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n//   And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\n//   And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\n// validateDate \"03-11-2000 \" // true\n// validateDate \"15-01-2012\" // false\n// validateDate \"04-0-2040\" // false\n// validateDate \"06-04-2020\" // true\n// validateDate \"06/04/2020\" // false\nfunc validateDate:bool d:string\n    if (len d) != 10 or d[2] != \"-\" or d[5] != \"-\"\n        return false\n    end\n    month := str2num d[:2]\n    day := str2num d[3:5]\n    str2num d[6]\n\n    if err\n        return false\n    end\n    if day < 1 or day > 31 or month < 1 or month > 12\n        return false\n    end\n    if (month == 4 or month == 6 or month == 9 or month == 11) and day == 31\n        return false\n    end\n    if month == 2 and day > 29\n        return false\n    end\n    return true\nend\n\nfunc test\n    assert true (validateDate \"03-11-2000\")\n    assert false (validateDate \"15-01-2012\")\n    assert false (validateDate \"04-0-2040\")\n    assert true (validateDate \"06-04-2020\")\n    assert true (validateDate \"01-01-2007\")\n    assert false (validateDate \"03-32-2011\")\n    assert false (validateDate \"\")\n    assert false (validateDate \"04-31-3000\")\n    assert true (validateDate \"06-06-2005\")\n    assert false (validateDate \"21-31-2000\")\n    assert true (validateDate \"04-12-2003\")\n    assert false (validateDate \"04122003\")\n    assert false (validateDate \"20030412\")\n    assert false (validateDate \"2003-04\")\n    assert false (validateDate \"2003-04-12\")\n    assert false (validateDate \"04-2003\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n\n#END:TEST\n#START:CHECK\ncheck(valid_date)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n//   And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\n//   And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\n// validateDate \"03-11-2000 \" // true\n// validateDate \"15-01-2012\" // false\n// validateDate \"04-0-2040\" // false\n// validateDate \"06-04-2020\" // true\n// validateDate \"06/04/2020\" // false\nfunc validateDate:bool d:string\n    if (len d) != 10 or d[2] != \"-\" or d[5] != \"-\"\n        return false\n    end\n    month := str2num d[:2]\n    day := str2num d[3:5]\n    str2num d[6]\n\n    if err\n        return false\n    end\n    if day < 1 or day > 31 or month < 1 or month > 12\n        return false\n    end\n    if (month == 4 or month == 6 or month == 9 or month == 11) and day == 31\n        return false\n    end\n    if month == 2 and day > 29\n        return false\n    end\n    return true\nend\n\nfunc test\n    assert true (validateDate \"03-11-2000\")\n    assert false (validateDate \"15-01-2012\")\n    assert false (validateDate \"04-0-2040\")\n    assert true (validateDate \"06-04-2020\")\n    assert true (validateDate \"01-01-2007\")\n    assert false (validateDate \"03-32-2011\")\n    assert false (validateDate \"\")\n    assert false (validateDate \"04-31-3000\")\n    assert true (validateDate \"06-06-2005\")\n    assert false (validateDate \"21-31-2000\")\n    assert true (validateDate \"04-12-2003\")\n    assert false (validateDate \"04122003\")\n    assert false (validateDate \"20030412\")\n    assert false (validateDate \"2003-04\")\n    assert false (validateDate \"2003-04-12\")\n    assert false (validateDate \"04-2003\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Complete the function that takes two integers and returns\n//  the product of their unit digits.\n//  Assume the input is always valid.\n//  Examples:\n//  multiply 148, 412  should return 16.\n//  multiply 19, 28  should return 72.\n//  multiply 2020, 1851  should return 0.\n//  multiply 14,-15  should return 20.\nfunc multiply:num a:num b:num\n    result := (a % 10) * (b % 10)\n    if result < 0\n        return -result\n    end\n    return result\nend\n\nfunc test\n    assert 16 (multiply 148 412)\n    assert 72 (multiply 19 28)\n    assert 0 (multiply 2020 1851)\n    assert 20 (multiply 14 -15)\n    assert 42 (multiply 76 67)\n    assert 49 (multiply 17 27)\n    assert 0 (multiply 0 1)\n    assert 0 (multiply 0 0)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return abs(a % 10) * abs(b % 10)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n\n#END:TEST\n#START:CHECK\ncheck(multiply)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Complete the function that takes two integers and returns\n//  the product of their unit digits.\n//  Assume the input is always valid.\n//  Examples:\n//  multiply 148, 412  should return 16.\n//  multiply 19, 28  should return 72.\n//  multiply 2020, 1851  should return 0.\n//  multiply 14,-15  should return 20.\nfunc multiply:num a:num b:num\n    result := (a % 10) * (b % 10)\n    if result < 0\n        return -result\n    end\n    return result\nend\n\nfunc test\n    assert 16 (multiply 148 412)\n    assert 72 (multiply 19 28)\n    assert 0 (multiply 2020 1851)\n    assert 20 (multiply 14 -15)\n    assert 42 (multiply 76 67)\n    assert 49 (multiply 17 27)\n    assert 0 (multiply 0 1)\n    assert 0 (multiply 0 0)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// generate 2 8 // [2, 4, 6, 8]\n// generate 8 2 // [2, 4, 6, 8]\n// generate 10 14 // []\nfunc generate:[]num a:num b:num\n    l := (max 2 (min a b))\n    u := (min 8 (max a b))\n    result:[]num\n    for i := range l u+1 2\n        result = result + [i]\n    end\n    return result\nend\n\nfunc test\n    assert [2 4 6 8] (generate 2 10)\n    assert [2 4 6 8] (generate 10 2)\n    assert [2 4 6 8] (generate 132 2)\n    assert [] (generate 17 89)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(generate_integers)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// generate 2 8 // [2, 4, 6, 8]\n// generate 8 2 // [2, 4, 6, 8]\n// generate 10 14 // []\nfunc generate:[]num a:num b:num\n    l := (max 2 (min a b))\n    u := (min 8 (max a b))\n    result:[]num\n    for i := range l u+1 2\n        result = result + [i]\n    end\n    return result\nend\n\nfunc test\n    assert [2 4 6 8] (generate 2 10)\n    assert [2 4 6 8] (generate 10 2)\n    assert [2 4 6 8] (generate 132 2)\n    assert [] (generate 17 89)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return true if a given number is prime, and false otherwise.\n// isPrime 6 // false\n// isPrime 101 // true\n// isPrime 11 // true\n// isPrime 13441 // true\n// isPrime 61 // true\n// isPrime 4 // false\n// isPrime 1 // false\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for k := range 2 (sqrt n)+1\n        if n % k == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert false (isPrime 6)\n    assert true (isPrime 101)\n    assert true (isPrime 11)\n    assert true (isPrime 13441)\n    assert true (isPrime 61)\n    assert false (isPrime 4)\n    assert false (isPrime 1)\n    assert true (isPrime 5)\n    assert true (isPrime 11)\n    assert true (isPrime 17)\n    assert false (isPrime 5*17)\n    assert false (isPrime 11*7)\n    assert false (isPrime 13441*19)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n\n#END:TEST\n#START:CHECK\ncheck(is_prime)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return true if a given number is prime, and false otherwise.\n// isPrime 6 // false\n// isPrime 101 // true\n// isPrime 11 // true\n// isPrime 13441 // true\n// isPrime 61 // true\n// isPrime 4 // false\n// isPrime 1 // false\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for k := range 2 (sqrt n)+1\n        if n % k == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert false (isPrime 6)\n    assert true (isPrime 101)\n    assert true (isPrime 11)\n    assert true (isPrime 13441)\n    assert true (isPrime 61)\n    assert false (isPrime 4)\n    assert false (isPrime 1)\n    assert true (isPrime 5)\n    assert true (isPrime 11)\n    assert true (isPrime 17)\n    assert false (isPrime 5*17)\n    assert false (isPrime 11*7)\n    assert false (isPrime 13441*19)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given an integer. return a tuple that has the number of even and odd digits\n// respectively.\n//  Example:\n//     count -12 // [1 1]\n//     count 123 // [1 2]\nfunc count:[]num n:num\n    if n == 0\n        return [1 0]\n    end\n    if n < 0\n        n = -n\n    end\n    evens := 0\n    odds := 0\n    while n > 0\n        if n % 2 == 0\n            evens = evens + 1\n        else\n            odds = odds + 1\n        end\n        n = floor n/10\n    end\n    return [evens odds]\nend\n\nfunc test\n    assert [0 1] (count 7)\n    assert [1 1] (count -78)\n    assert [2 2] (count 3452)\n    assert [3 3] (count 346211)\n    assert [3 3] (count -345821)\n    assert [1 0] (count -2)\n    assert [2 3] (count -45347)\n    assert [1 0] (count 0)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(even_odd_count)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given an integer. return a tuple that has the number of even and odd digits\n// respectively.\n//  Example:\n//     count -12 // [1 1]\n//     count 123 // [1 2]\nfunc count:[]num n:num\n    if n == 0\n        return [1 0]\n    end\n    if n < 0\n        n = -n\n    end\n    evens := 0\n    odds := 0\n    while n > 0\n        if n % 2 == 0\n            evens = evens + 1\n        else\n            odds = odds + 1\n        end\n        n = floor n/10\n    end\n    return [evens odds]\nend\n\nfunc test\n    assert [0 1] (count 7)\n    assert [1 1] (count -78)\n    assert [2 2] (count 3452)\n    assert [3 3] (count 346211)\n    assert [3 3] (count -345821)\n    assert [1 0] (count -2)\n    assert [2 3] (count -45347)\n    assert [1 0] (count 0)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n\n// Examples:\n// strangeSort [1 2 3 4] // [1 4 2 3]\n// strangeSort [5 5 5 5] // [5 5 5 5]\n// strangeSort [] // []\nfunc strangeSort:[]num nums:[]num\n    nums2 := nums[:]\n    sort nums2\n    result:[]num\n    length := len nums2\n    mid := floor length/2\n    for i := range mid\n        result = result + [nums2[i]] + [nums2[-i - 1]]\n    end\n    if length % 2 == 1\n        result = result + [nums2[mid]]\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 4 2 3] (strangeSort [1 2 3 4])\n    assert [5 9 6 8 7] (strangeSort [5 6 7 8 9])\n    assert [1 5 2 4 3] (strangeSort [1 2 3 4 5])\n    assert [1 9 5 8 6 7] (strangeSort [5 6 7 8 9 1])\n    assert [5 5 5 5] (strangeSort [5 5 5 5])\n    assert [] (strangeSort [])\n    assert [1 8 2 7 3 6 4 5] (strangeSort [1 2 3 4 5 6 7 8])\n    assert [-5 5 -5 5 0 2 2 2] (strangeSort [0 2 2 2 5 5 -5 -5])\n    assert [111111] (strangeSort [111111])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(strange_sort_list)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n\n// Examples:\n// strangeSort [1 2 3 4] // [1 4 2 3]\n// strangeSort [5 5 5 5] // [5 5 5 5]\n// strangeSort [] // []\nfunc strangeSort:[]num nums:[]num\n    nums2 := nums[:]\n    sort nums2\n    result:[]num\n    length := len nums2\n    mid := floor length/2\n    for i := range mid\n        result = result + [nums2[i]] + [nums2[-i - 1]]\n    end\n    if length % 2 == 1\n        result = result + [nums2[mid]]\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 4 2 3] (strangeSort [1 2 3 4])\n    assert [5 9 6 8 7] (strangeSort [5 6 7 8 9])\n    assert [1 5 2 4 3] (strangeSort [1 2 3 4 5])\n    assert [1 9 5 8 6 7] (strangeSort [5 6 7 8 9 1])\n    assert [5 5 5 5] (strangeSort [5 5 5 5])\n    assert [] (strangeSort [])\n    assert [1 8 2 7 3 6 4 5] (strangeSort [1 2 3 4 5 6 7 8])\n    assert [-5 5 -5 5 0 2 2 2] (strangeSort [0 2 2 2 5 5 -5 -5])\n    assert [111111] (strangeSort [111111])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// shift 12 1 // \"21\"\n// shift 12 2 // \"12\"\nfunc shift:string x:num n:num\n    str := sprint x\n    result := \"\"\n    if n > (len str)\n        for c := range str\n            result = c + result\n        end\n    else\n        result = str[-n:] + str[:-n]\n    end\n    return result\nend\n\nfunc test\n    assert \"1\" (shift 1 1)\n    assert \"1\" (shift 1 3)\n    assert \"0111\" (shift 1110 30)\n    assert \"001\" (shift 100 2)\n    assert \"12\" (shift 12 2)\n    assert \"79\" (shift 97 8)\n    assert \"21\" (shift 12 1)\n    assert \"11\" (shift 11 101)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(circular_shift)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// shift 12 1 // \"21\"\n// shift 12 2 // \"12\"\nfunc shift:string x:num n:num\n    str := sprint x\n    result := \"\"\n    if n > (len str)\n        for c := range str\n            result = c + result\n        end\n    else\n        result = str[-n:] + str[:-n]\n    end\n    return result\nend\n\nfunc test\n    assert \"1\" (shift 1 1)\n    assert \"1\" (shift 1 3)\n    assert \"0111\" (shift 1110 30)\n    assert \"001\" (shift 100 2)\n    assert \"12\" (shift 12 2)\n    assert \"79\" (shift 97 8)\n    assert \"21\" (shift 12 1)\n    assert \"11\" (shift 11 101)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Filter an input list of strings only for ones that contain given substring\n// filter [] \"a\" // []\n// filter [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\"  // [\"abc\" \"bacd\" \"array\"]\nfunc filter:[]string strings:[]string substring:string\n    ans:[]string\n    for str := range strings\n        if (contains str substring)\n            ans = ans + [str]\n        end\n    end\n    return ans\nend\n\nfunc contains:bool haystack:string needle:string\n    for i := range ((len haystack) - (len needle) + 1)\n        if haystack[i:i + (len needle)] == needle\n            return true\n        end\n    end\n    return false\nend\n\nfunc test\n    assert [] (filter [] \"john\")\n    assert [\"xxx\" \"xxxAAA\" \"xxx\"] (filter [\"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\"] \"xxx\")\n    assert [\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"] (filter [\"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\"] \"xx\")\n    assert [\"grunt\" \"prune\"] (filter [\"grunt\" \"trumpet\" \"prune\" \"gruesome\"] \"run\")\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return [x for x in strings if substring in x]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\n#END:TEST\n#START:CHECK\ncheck(filter_by_substring)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Filter an input list of strings only for ones that contain given substring\n// filter [] \"a\" // []\n// filter [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\"  // [\"abc\" \"bacd\" \"array\"]\nfunc filter:[]string strings:[]string substring:string\n    ans:[]string\n    for str := range strings\n        if (contains str substring)\n            ans = ans + [str]\n        end\n    end\n    return ans\nend\n\nfunc contains:bool haystack:string needle:string\n    for i := range ((len haystack) - (len needle) + 1)\n        if haystack[i:i + (len needle)] == needle\n            return true\n        end\n    end\n    return false\nend\n\nfunc test\n    assert [] (filter [] \"john\")\n    assert [\"xxx\" \"xxxAAA\" \"xxx\"] (filter [\"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\"] \"xxx\")\n    assert [\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"] (filter [\"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\"] \"xx\")\n    assert [\"grunt\" \"prune\"] (filter [\"grunt\" \"trumpet\" \"prune\" \"gruesome\"] \"run\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a string text, replace all spaces in it with underscores,\n// and if a string has more than 2 consecutive spaces,\n// then replace all consecutive spaces with -\n// replaceSpaces \"Example\" // \"Example\"\n// replaceSpaces \"Example 1\" // \"Example_1\"\n// replaceSpaces \" Example 2\" // \"_Example_2\"\n// replaceSpaces \" Example   3\" // \"_Example-3\"\nfunc replaceSpaces:string s:string\n    result := \"\"\n    cnt := 0\n    for c := range s\n        if c == \" \"\n            cnt = cnt + 1\n        else\n            result = result + (spaceString cnt) + c\n            cnt = 0\n        end\n    end\n    result = result + (spaceString cnt)\n    return result\nend\n\nfunc spaceString:string n:num\n    if n == 0\n        return \"\"\n    else if n == 1\n        return \"_\"\n    else if n == 2\n        return \"__\"\n    end\n    return \"-\"\nend\n\nfunc test\n    assert \"Example\" (replaceSpaces \"Example\")\n    assert \"Mudasir_Hanif_\" (replaceSpaces \"Mudasir Hanif \")\n    assert \"Yellow_Yellow__Dirty__Fellow\" (replaceSpaces \"Yellow Yellow  Dirty  Fellow\")\n    assert \"Exa-mple\" (replaceSpaces \"Exa   mple\")\n    assert \"-Exa_1_2_2_mple\" (replaceSpaces \"   Exa 1 2 2 mple\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(fix_spaces)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a string text, replace all spaces in it with underscores,\n// and if a string has more than 2 consecutive spaces,\n// then replace all consecutive spaces with -\n// replaceSpaces \"Example\" // \"Example\"\n// replaceSpaces \"Example 1\" // \"Example_1\"\n// replaceSpaces \" Example 2\" // \"_Example_2\"\n// replaceSpaces \" Example   3\" // \"_Example-3\"\nfunc replaceSpaces:string s:string\n    result := \"\"\n    cnt := 0\n    for c := range s\n        if c == \" \"\n            cnt = cnt + 1\n        else\n            result = result + (spaceString cnt) + c\n            cnt = 0\n        end\n    end\n    result = result + (spaceString cnt)\n    return result\nend\n\nfunc spaceString:string n:num\n    if n == 0\n        return \"\"\n    else if n == 1\n        return \"_\"\n    else if n == 2\n        return \"__\"\n    end\n    return \"-\"\nend\n\nfunc test\n    assert \"Example\" (replaceSpaces \"Example\")\n    assert \"Mudasir_Hanif_\" (replaceSpaces \"Mudasir Hanif \")\n    assert \"Yellow_Yellow__Dirty__Fellow\" (replaceSpaces \"Yellow Yellow  Dirty  Fellow\")\n    assert \"Exa-mple\" (replaceSpaces \"Exa   mple\")\n    assert \"-Exa_1_2_2_mple\" (replaceSpaces \"   Exa 1 2 2 mple\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Add two numbers x and y\n// add 2 3 // 5\n// add 5 7 // 12\nfunc add:num x:num y:num\n    return x + y\nend\n\nfunc test\n    assert 1 (add 0 1)\n    assert 1 (add 1 0)\n    assert 5 (add 2 3)\n    assert 12 (add 5 7)\n    assert 12 (add 7 5)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return x + y\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n\n#END:TEST\n#START:CHECK\ncheck(add)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Add two numbers x and y\n// add 2 3 // 5\n// add 5 7 // 12\nfunc add:num x:num y:num\n    return x + y\nend\n\nfunc test\n    assert 1 (add 0 1)\n    assert 1 (add 1 0)\n    assert 5 (add 2 3)\n    assert 12 (add 5 7)\n    assert 12 (add 7 5)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // We are given two strings s and c, you have to deleted all the characters in\n// s that are equal to any character in c then check if the result string is\n// palindrome. A string is called palindrome if it reads the same backward as\n// forward. You should return a tuple containing the result string and\n// true/false for the check.\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nfunc delete:[]any s:string d:string\n    m := {}\n    for c := range d\n        m[c] = true\n    end\n    result := \"\"\n    for c := range s\n        if !(has m c)\n            result = result + c\n        end\n    end\n    for i := range (len result)/2\n        if result[i] != result[-1 - i]\n            return [result false]\n        end\n    end\n    return [result true]\nend\n\nfunc test\n    assert [\"bcd\" false] (delete \"abcde\" \"ae\")\n    assert [\"acdef\" false] (delete \"abcdef\" \"b\")\n    assert [\"cdedc\" true] (delete \"abcdedcba\" \"ab\")\n    assert [\"dik\" false] (delete \"dwik\" \"w\")\n    assert [\"\" true] (delete \"a\" \"a\")\n    assert [\"abcdedcba\" true] (delete \"abcdedcba\" \"\")\n    assert [\"abcdedcba\" true] (delete \"abcdedcba\" \"v\")\n    assert [\"abba\" true] (delete \"vabba\" \"v\")\n    assert [\"\" true] (delete \"mamma\" \"mia\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n\n#END:TEST\n#START:CHECK\ncheck(reverse_delete)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // We are given two strings s and c, you have to deleted all the characters in\n// s that are equal to any character in c then check if the result string is\n// palindrome. A string is called palindrome if it reads the same backward as\n// forward. You should return a tuple containing the result string and\n// true/false for the check.\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nfunc delete:[]any s:string d:string\n    m := {}\n    for c := range d\n        m[c] = true\n    end\n    result := \"\"\n    for c := range s\n        if !(has m c)\n            result = result + c\n        end\n    end\n    for i := range (len result)/2\n        if result[i] != result[-1 - i]\n            return [result false]\n        end\n    end\n    return [result true]\nend\n\nfunc test\n    assert [\"bcd\" false] (delete \"abcde\" \"ae\")\n    assert [\"acdef\" false] (delete \"abcdef\" \"b\")\n    assert [\"cdedc\" true] (delete \"abcdedcba\" \"ab\")\n    assert [\"dik\" false] (delete \"dwik\" \"w\")\n    assert [\"\" true] (delete \"a\" \"a\")\n    assert [\"abcdedcba\" true] (delete \"abcdedcba\" \"\")\n    assert [\"abcdedcba\" true] (delete \"abcdedcba\" \"v\")\n    assert [\"abba\" true] (delete \"vabba\" \"v\")\n    assert [\"\" true] (delete \"mamma\" \"mia\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return list of all prefixes from shortest to longest of the input string\n// allPrefixes('abc')\n// ['a', 'ab', 'abc']\nfunc allPrefixes:[]string str:string\n    result:[]string\n    for i := range (len str)\n        result = result + [str[:i + 1]]\n    end\n    return result\nend\n\nempty_string_array:[]string\n\nfunc test\n    assert empty_string_array (allPrefixes \"\")\n    assert [\"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"] (allPrefixes \"asdfgh\")\n    assert [\"W\" \"WW\" \"WWW\"] (allPrefixes \"WWW\")\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\n#END:TEST\n#START:CHECK\ncheck(all_prefixes)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return list of all prefixes from shortest to longest of the input string\n// allPrefixes('abc')\n// ['a', 'ab', 'abc']\nfunc allPrefixes:[]string str:string\n    result:[]string\n    for i := range (len str)\n        result = result + [str[:i + 1]]\n    end\n    return result\nend\n\nempty_string_array:[]string\n\nfunc test\n    assert empty_string_array (allPrefixes \"\")\n    assert [\"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"] (allPrefixes \"asdfgh\")\n    assert [\"W\" \"WW\" \"WWW\"] (allPrefixes \"WWW\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a non-empty list of integers, return the sum of all of the odd\n//  elements that are in even positions.\n//  Examples\n//  solve [5 8 7 1] // 12\n//  solve [3 3 3 3 3] // 9\n//  solve [30 13 24 321] //0\nfunc solve:num nums:[]num\n    result := 0\n    for i := range 0 (len nums) 2\n        if nums[i] % 2 == 1\n            result = result + nums[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 12 (solve [5 8 7 1])\n    assert 9 (solve [3 3 3 3 3])\n    assert 0 (solve [30 13 24 321])\n    assert 5 (solve [5 9])\n    assert 0 (solve [2 4 8])\n    assert 23 (solve [30 13 23 32])\n    assert 3 (solve [3 13 2 9])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n\n#END:TEST\n#START:CHECK\ncheck(solution)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a non-empty list of integers, return the sum of all of the odd\n//  elements that are in even positions.\n//  Examples\n//  solve [5 8 7 1] // 12\n//  solve [3 3 3 3 3] // 9\n//  solve [30 13 24 321] //0\nfunc solve:num nums:[]num\n    result := 0\n    for i := range 0 (len nums) 2\n        if nums[i] % 2 == 1\n            result = result + nums[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 12 (solve [5 8 7 1])\n    assert 9 (solve [3 3 3 3 3])\n    assert 0 (solve [30 13 24 321])\n    assert 5 (solve [5 9])\n    assert 0 (solve [2 4 8])\n    assert 23 (solve [30 13 23 32])\n    assert 3 (solve [3 13 2 9])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //\"Given length of a side and high return area for a triangle.\n//    >>> triangleArea(5, 3)\n//    7.5\n//    \"\nfunc triangleArea:num s:num h:num\n    return s * h / 2\n\nend\n\nfunc test\n    assert 7.5 (triangleArea 5 3)\n    assert 2 (triangleArea 2 2)\n    assert 40 (triangleArea 10 8)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return a * h / 2.0\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n\n#END:TEST\n#START:CHECK\ncheck(triangle_area)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //\"Given length of a side and high return area for a triangle.\n//    >>> triangleArea(5, 3)\n//    7.5\n//    \"\nfunc triangleArea:num s:num h:num\n    return s * h / 2\n\nend\n\nfunc test\n    assert 7.5 (triangleArea 5 3)\n    assert 2 (triangleArea 2 2)\n    assert 40 (triangleArea 10 8)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a non-empty list of numbers add the even elements that are at odd indices.\n//  add [4 2 6 7]  // 2\nfunc add:num nums:[]num\n    result := 0\n    for i := range 1 (len nums) 2\n        if nums[i] % 2 == 0\n            result = result + nums[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 88 (add [4 88])\n    assert 122 (add [4 5 6 7 2 122])\n    assert 0 (add [4 0 6 7])\n    assert 12 (add [4 4 6 8])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n\n#END:TEST\n#START:CHECK\ncheck(add)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a non-empty list of numbers add the even elements that are at odd indices.\n//  add [4 2 6 7]  // 2\nfunc add:num nums:[]num\n    result := 0\n    for i := range 1 (len nums) 2\n        if nums[i] % 2 == 0\n            result = result + nums[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 88 (add [4 88])\n    assert 122 (add [4 5 6 7 2 122])\n    assert 0 (add [4 0 6 7])\n    assert 12 (add [4 4 6 8])\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // A simple program which should return the value of x if n is\n// a prime number and should return the value of y otherwise.\n// Examples:\n// for xIfPrime 7 34 12 // 34\n// for xIfPrime 15 8 5 // 5\nfunc xIfPrime:num n:num x:num y:num\n    if n < 2\n        return y\n    end\n    for i := range 2 n\n        if n % i == 0\n            return y\n        end\n    end\n    return x\nend\n\nfunc test\n    assert 34 (xIfPrime 7 34 12)\n    assert 5 (xIfPrime 15 8 5)\n    assert 33 (xIfPrime 3 33 5212)\n    assert 3 (xIfPrime 1259 3 52)\n    assert -1 (xIfPrime 7919 -1 12)\n    assert 583 (xIfPrime 3609 1245 583)\n    assert 129 (xIfPrime 91 56 129)\n    assert 1234 (xIfPrime 6 34 1234)\n    assert 0 (xIfPrime 1 2 0)\n    assert 2 (xIfPrime 2 2 0)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n\n#END:TEST\n#START:CHECK\ncheck(x_or_y)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // A simple program which should return the value of x if n is\n// a prime number and should return the value of y otherwise.\n// Examples:\n// for xIfPrime 7 34 12 // 34\n// for xIfPrime 15 8 5 // 5\nfunc xIfPrime:num n:num x:num y:num\n    if n < 2\n        return y\n    end\n    for i := range 2 n\n        if n % i == 0\n            return y\n        end\n    end\n    return x\nend\n\nfunc test\n    assert 34 (xIfPrime 7 34 12)\n    assert 5 (xIfPrime 15 8 5)\n    assert 33 (xIfPrime 3 33 5212)\n    assert 3 (xIfPrime 1259 3 52)\n    assert -1 (xIfPrime 7919 -1 12)\n    assert 583 (xIfPrime 3609 1245 583)\n    assert 129 (xIfPrime 91 56 129)\n    assert 1234 (xIfPrime 6 34 1234)\n    assert 0 (xIfPrime 1 2 0)\n    assert 2 (xIfPrime 2 2 0)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// largestPrimeFactor 13195 // 29\n// largestPrimeFactor 2048 // 2\nfunc largestPrimeFactor:num n:num\n    result := -1\n    for i := range 2 n\n        if n % i == 0 and (isPrime i)\n            result = i\n        end\n    end\n    return result\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 (sqrt n)+1\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert 5 (largestPrimeFactor 15)\n    assert 3 (largestPrimeFactor 27)\n    assert 7 (largestPrimeFactor 63)\n    assert 11 (largestPrimeFactor 330)\n    assert 29 (largestPrimeFactor 13195)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\n#END:TEST\n#START:CHECK\ncheck(largest_prime_factor)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// largestPrimeFactor 13195 // 29\n// largestPrimeFactor 2048 // 2\nfunc largestPrimeFactor:num n:num\n    result := -1\n    for i := range 2 n\n        if n % i == 0 and (isPrime i)\n            result = i\n        end\n    end\n    return result\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 (sqrt n)+1\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert 5 (largestPrimeFactor 15)\n    assert 3 (largestPrimeFactor 27)\n    assert 7 (largestPrimeFactor 63)\n    assert 11 (largestPrimeFactor 330)\n    assert 29 (largestPrimeFactor 13195)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a string, find out how many distinct characters (regardless of case) does it consist of\n//  countDistinctCharacters('xyzXYZ') // 3\n//  countDistinctCharacters('Jerry') // 4\nfunc countDistinctCharacters:num str:string\n    set := {}\n    for s := range str\n        u := upper s\n        set[u] = true\n    end\n    return len set\nend\n\nfunc test\n    assert 0 (countDistinctCharacters \"\")\n    assert 5 (countDistinctCharacters \"abcde\")\n    assert 5 (countDistinctCharacters \"abcde\"+\"cade\"+\"CADE\")\n    assert 1 (countDistinctCharacters \"aaaaAAAAaaaa\")\n    assert 5 (countDistinctCharacters \"Jerry jERRY JeRRRY\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return len(set(string.lower()))\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\n#END:TEST\n#START:CHECK\ncheck(count_distinct_characters)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a string, find out how many distinct characters (regardless of case) does it consist of\n//  countDistinctCharacters('xyzXYZ') // 3\n//  countDistinctCharacters('Jerry') // 4\nfunc countDistinctCharacters:num str:string\n    set := {}\n    for s := range str\n        u := upper s\n        set[u] = true\n    end\n    return len set\nend\n\nfunc test\n    assert 0 (countDistinctCharacters \"\")\n    assert 5 (countDistinctCharacters \"abcde\")\n    assert 5 (countDistinctCharacters \"abcde\"+\"cade\"+\"CADE\")\n    assert 1 (countDistinctCharacters \"aaaaAAAAaaaa\")\n    assert 5 (countDistinctCharacters \"Jerry jERRY JeRRRY\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  From an array of integers, remove all elements that occur more than once.\n//  Keep order of elements left the same as in the input.\n//  removeDuplicates [1, 2, 3, 2, 4] //  [1, 3, 4]\nfunc removeDuplicates:[]num nums:[]num\n    seen:{}bool\n    dups:{}bool\n    result:[]num\n    for n := range nums\n        ns := sprint n\n        if has seen ns\n            dups[ns] = true\n        end\n        seen[ns] = true\n    end\n    for n := range nums\n        ns := sprint n\n        if !(has dups ns)\n            result = result + [n]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [] (removeDuplicates [])\n    assert [1 2 3 4] (removeDuplicates [1 2 3 4])\n    assert [1 4 5] (removeDuplicates [1 2 3 2 4 3 5])\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n\n#END:TEST\n#START:CHECK\ncheck(remove_duplicates)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  From an array of integers, remove all elements that occur more than once.\n//  Keep order of elements left the same as in the input.\n//  removeDuplicates [1, 2, 3, 2, 4] //  [1, 3, 4]\nfunc removeDuplicates:[]num nums:[]num\n    seen:{}bool\n    dups:{}bool\n    result:[]num\n    for n := range nums\n        ns := sprint n\n        if has seen ns\n            dups[ns] = true\n        end\n        seen[ns] = true\n    end\n    for n := range nums\n        ns := sprint n\n        if !(has dups ns)\n            result = result + [n]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [] (removeDuplicates [])\n    assert [1 2 3 4] (removeDuplicates [1 2 3 4])\n    assert [1 4 5] (removeDuplicates [1 2 3 2 4 3 5])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // This function will take a list of integers. For all entries in the list,\n// the function shall square the integer entry if its index is a multiple of\n// 3 and will cube the integer entry if its index is a multiple of 4 and not\n// a multiple of 3. The function will not change the entries in the list\n// whose indexes are not a multiple of 3 or 4. The function shall then return\n// the sum of all entries.\n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nfunc solve:num nums:[]num\n    result := 0\n    for i := range (len nums)\n        if i % 3 == 0\n            result = result + (pow nums[i] 2)\n        else if i % 4 == 0\n            result = result + (pow nums[i] 3)\n        else\n            result = result + nums[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 6 (solve [1 2 3])\n    assert 14 (solve [1 4 9])\n    assert 0 (solve [])\n    assert 9 (solve [1 1 1 1 1 1 1 1 1])\n    assert -3 (solve [-1 -1 -1 -1 -1 -1 -1 -1 -1])\n    assert 0 (solve [0])\n    assert -126 (solve [-1 -5 2 -1 -5])\n    assert 3030 (solve [-56 -99 1 0 -2])\n    assert 0 (solve [-1 0 0 0 0 0 0 0 -1])\n    assert -14196 (solve [-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37])\n    assert -1448 (solve [-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n\n#END:TEST\n#START:CHECK\ncheck(sum_squares)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // This function will take a list of integers. For all entries in the list,\n// the function shall square the integer entry if its index is a multiple of\n// 3 and will cube the integer entry if its index is a multiple of 4 and not\n// a multiple of 3. The function will not change the entries in the list\n// whose indexes are not a multiple of 3 or 4. The function shall then return\n// the sum of all entries.\n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nfunc solve:num nums:[]num\n    result := 0\n    for i := range (len nums)\n        if i % 3 == 0\n            result = result + (pow nums[i] 2)\n        else if i % 4 == 0\n            result = result + (pow nums[i] 3)\n        else\n            result = result + nums[i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 6 (solve [1 2 3])\n    assert 14 (solve [1 4 9])\n    assert 0 (solve [])\n    assert 9 (solve [1 1 1 1 1 1 1 1 1])\n    assert -3 (solve [-1 -1 -1 -1 -1 -1 -1 -1 -1])\n    assert 0 (solve [0])\n    assert -126 (solve [-1 -5 2 -1 -5])\n    assert 3030 (solve [-56 -99 1 0 -2])\n    assert 0 (solve [-1 0 0 0 0 0 0 0 -1])\n    assert -14196 (solve [-16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35 37])\n    assert -1448 (solve [-1 -3 17 -1 -15 13 -1 14 -14 -12 -5 14 -14 6 13 11 16 16 4 10])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given an array arr of integers, find the minimum number of elements that\n//  need to be changed to make the array palindromic. A palindromic array is\n//  an array that is read the same backwards and forwards. In one change, you\n//  can change one element to any other element.\n//\n//  For example:\n//  changeSize [1,2,3,5,4,7,9,6] //4\n//  changeSize [1, 2, 3, 4, 3, 2, 2] //1\n//  changeSize [1, 2, 3, 2, 1] //0\nfunc changeSize:num nums:[]num\n    result := 0\n    length := len nums\n    for i := range (floor length/2)\n        if nums[i] != nums[-i - 1]\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 4 (changeSize [1 2 3 5 4 7 9 6])\n    assert 1 (changeSize [1 2 3 4 3 2 2])\n    assert 1 (changeSize [1 4 2])\n    assert 1 (changeSize [1 4 4 2])\n    assert 0 (changeSize [1 2 3 2 1])\n    assert 0 (changeSize [3 1 1 3])\n    assert 0 (changeSize [1])\n    assert 1 (changeSize [0 1])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n\n#END:TEST\n#START:CHECK\ncheck(smallest_change)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given an array arr of integers, find the minimum number of elements that\n//  need to be changed to make the array palindromic. A palindromic array is\n//  an array that is read the same backwards and forwards. In one change, you\n//  can change one element to any other element.\n//\n//  For example:\n//  changeSize [1,2,3,5,4,7,9,6] //4\n//  changeSize [1, 2, 3, 4, 3, 2, 2] //1\n//  changeSize [1, 2, 3, 2, 1] //0\nfunc changeSize:num nums:[]num\n    result := 0\n    length := len nums\n    for i := range (floor length/2)\n        if nums[i] != nums[-i - 1]\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 4 (changeSize [1 2 3 5 4 7 9 6])\n    assert 1 (changeSize [1 2 3 4 3 2 2])\n    assert 1 (changeSize [1 4 2])\n    assert 1 (changeSize [1 4 4 2])\n    assert 0 (changeSize [1 2 3 2 1])\n    assert 0 (changeSize [3 1 1 3])\n    assert 0 (changeSize [1])\n    assert 1 (changeSize [0 1])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or\n// 90 degree.\n// Example:\n// rightAngle: 3 4 5 // true\n// rightAngle: 1 2 3 // false\nfunc rightAngle:bool a:num b:num c:num\n    a2 := a * a\n    b2 := b * b\n    c2 := c * c\n    return a2 + b2 == c2 or a2 + c2 == b2 or b2 + c2 == a2\nend\n\nfunc test\n    assert true (rightAngle 3 4 5)\n    assert false (rightAngle 1 2 3)\n    assert true (rightAngle 10 6 8)\n    assert false (rightAngle 2 2 2)\n    assert true (rightAngle 7 24 25)\n    assert false (rightAngle 10 5 7)\n    assert true (rightAngle 5 12 13)\n    assert true (rightAngle 15 8 17)\n    assert true (rightAngle 48 55 73)\n    assert false (rightAngle 1 1 1)\n    assert false (rightAngle 2 2 10)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n\n#END:TEST\n#START:CHECK\ncheck(right_angle_triangle)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or\n// 90 degree.\n// Example:\n// rightAngle: 3 4 5 // true\n// rightAngle: 1 2 3 // false\nfunc rightAngle:bool a:num b:num c:num\n    a2 := a * a\n    b2 := b * b\n    c2 := c * c\n    return a2 + b2 == c2 or a2 + c2 == b2 or b2 + c2 == a2\nend\n\nfunc test\n    assert true (rightAngle 3 4 5)\n    assert false (rightAngle 1 2 3)\n    assert true (rightAngle 10 6 8)\n    assert false (rightAngle 2 2 2)\n    assert true (rightAngle 7 24 25)\n    assert false (rightAngle 10 5 7)\n    assert true (rightAngle 5 12 13)\n    assert true (rightAngle 15 8 17)\n    assert true (rightAngle 48 55 73)\n    assert false (rightAngle 1 1 1)\n    assert false (rightAngle 2 2 10)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// truncate_number 3.5 // 0.5\nfunc truncateNumber:num number:num\n    return number % 1\nend\n\nfunc test\n    assert 0.5 (truncateNumber 3.5)\n    assert true (((abs (truncateNumber (1.33 - 0.33))) < 0.000001))\n    assert true (((abs (truncateNumber (123.456 - 0.456))) < 0.000001))\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return number % 1.0\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n\n#END:TEST\n#START:CHECK\ncheck(truncate_number)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// truncate_number 3.5 // 0.5\nfunc truncateNumber:num number:num\n    return number % 1\nend\n\nfunc test\n    assert 0.5 (truncateNumber 3.5)\n    assert true (((abs (truncateNumber (1.33 - 0.33))) < 0.000001))\n    assert true (((abs (truncateNumber (123.456 - 0.456))) < 0.000001))\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // checkBrackets returns true if the if every opening bracket\n// has a corresponding closing bracket in the  input string.\n//\n// checkBrackets \"(\" // false\n// checkBrackets \"()\" // true\n// checkBrackets \"(()())\" // true\n// checkBrackets \")(()\" // false\nfunc checkBrackets:bool input:string\n    depth := 0\n    for c := range input\n        if c == \"(\"\n            depth = depth + 1\n        else\n            depth = depth - 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n\nfunc test\n    assert true (checkBrackets \"()\")\n    assert true (checkBrackets \"(()())\")\n    assert true (checkBrackets \"()()(()())()\")\n    assert true (checkBrackets \"()()((()()())())(()()(()))\")\n    assert false (checkBrackets \"((()())))\")\n    assert false (checkBrackets \")(()\")\n    assert false (checkBrackets \"(\")\n    assert false (checkBrackets \"((((\")\n    assert false (checkBrackets \")\")\n    assert false (checkBrackets \"(()\")\n    assert false (checkBrackets \"()()(()())())(()\")\n    assert false (checkBrackets \"()()(()())()))()\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n\n#END:TEST\n#START:CHECK\ncheck(correct_bracketing)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // checkBrackets returns true if the if every opening bracket\n// has a corresponding closing bracket in the  input string.\n//\n// checkBrackets \"(\" // false\n// checkBrackets \"()\" // true\n// checkBrackets \"(()())\" // true\n// checkBrackets \")(()\" // false\nfunc checkBrackets:bool input:string\n    depth := 0\n    for c := range input\n        if c == \"(\"\n            depth = depth + 1\n        else\n            depth = depth - 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n\nfunc test\n    assert true (checkBrackets \"()\")\n    assert true (checkBrackets \"(()())\")\n    assert true (checkBrackets \"()()(()())()\")\n    assert true (checkBrackets \"()()((()()())())(()()(()))\")\n    assert false (checkBrackets \"((()())))\")\n    assert false (checkBrackets \")(()\")\n    assert false (checkBrackets \"(\")\n    assert false (checkBrackets \"((((\")\n    assert false (checkBrackets \")\")\n    assert false (checkBrackets \"(()\")\n    assert false (checkBrackets \"()()(()())())(()\")\n    assert false (checkBrackets \"()()(()())()))()\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// intersperse [] 4 //\n// intersperse [1 2 3] 4 // [1 4 2 4 3]\nfunc intersperse:[]num numbers:[]num delimeter:num\n    if (len numbers) == 0\n        return []\n    end\n    result:[]num\n    for number := range numbers[:-1]\n        result = result + [number] + [delimeter]\n    end\n    result = result + [numbers[-1]]\n    return result\nend\n\nfunc test\n    assert [] (intersperse [] 7)\n    assert [5 8 6 8 3 8 2] (intersperse [5 6 3 2] 8)\n    assert [2 2 2 2 2] (intersperse [2 2 2] 2)\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n\n#END:TEST\n#START:CHECK\ncheck(intersperse)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// intersperse [] 4 //\n// intersperse [1 2 3] 4 // [1 4 2 4 3]\nfunc intersperse:[]num numbers:[]num delimeter:num\n    if (len numbers) == 0\n        return []\n    end\n    result:[]num\n    for number := range numbers[:-1]\n        result = result + [number] + [delimeter]\n    end\n    result = result + [numbers[-1]]\n    return result\nend\n\nfunc test\n    assert [] (intersperse [] 7)\n    assert [5 8 6 8 3 8 2] (intersperse [5 6 3 2] 8)\n    assert [2 2 2 2 2] (intersperse [2 2 2] 2)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Write a function that returns True if the object q will fly, and False\n// otherwise. The object q will fly if it's balanced (it is a palindromic\n// list) and the sum of its elements is less than or equal the maximum\n// possible weight w.\n//\n// Example:\n// willFly [1 2] 5 ➞ False\n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n//\n// willFly [3 2 3] 1 ➞ False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n//\n// willFly [3 2 3] 9 ➞ True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n//\n// willFly [3] 5 ➞ True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunc willFly:bool nums:[]num w:num\n    length := len nums\n    if length == 0\n        return false\n    end\n    sum := 0\n    for n := range nums\n        sum = sum + n\n    end\n    if sum > w\n        return false\n    end\n    for i := range (floor length/2)\n        if nums[i] != nums[-i - 1]\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert true (willFly [3 2 3] 9)\n    assert false (willFly [1 2] 5)\n    assert true (willFly [3] 5)\n    assert false (willFly [3 2 3] 1)\n    assert false (willFly [1 2 3] 6)\n    assert true (willFly [5] 5)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i",
  "output: ",
  "output-text ",
  "output-evy // Write a function that returns True if the object q will fly, and False\n// otherwise. The object q will fly if it's balanced (it is a palindromic\n// list) and the sum of its elements is less than or equal the maximum\n// possible weight w.\n//\n// Example:\n// willFly [1 2] 5 ➞ False\n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n//\n// willFly [3 2 3] 1 ➞ False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n//\n// willFly [3 2 3] 9 ➞ True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n//\n// willFly [3] 5 ➞ True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunc willFly:bool nums:[]num w:num\n    length := len nums\n    if length == 0\n        return false\n    end\n    sum := 0\n    for n := range nums\n        sum = sum + n\n    end\n    if sum > w\n        return false\n    end\n    for i := range (floor length/2)\n        if nums[i] != nums[-i - 1]\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert true (willFly [3 2 3] 9)\n    assert false (willFly [1 2] 5)\n    assert true (willFly [3] 5)\n    assert false (willFly [3 2 3] 1)\n    assert false (willFly [1 2 3] 6)\n    assert true (willFly [5] 5)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return false.\n// toMD5 \"Hello world\" // \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc toMD5:any s:string\n    if s == \"\"\n        return false\n    end\n    return \"\"\nend\n\nfunc test\n    assert \"3e25960a79dbc69b674cd4ec67a72c62\" (toMD5 \"Hello world\")\n    assert false (toMD5 \"\")\n    assert \"0ef78513b0cb8cef12743f5aeb35f888\" (toMD5 \"A B C\")\n    assert \"5f4dcc3b5aa765d61d8327deb882cf99\" (toMD5 \"password\")\nend\n\ntest",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return false.\n// toMD5 \"Hello world\" // \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc toMD5:any s:string\n    if s == \"\"\n        return false\n    end\n    return \"\"\nend\n\nfunc test\n    assert \"3e25960a79dbc69b674cd4ec67a72c62\" (toMD5 \"Hello world\")\n    assert false (toMD5 \"\")\n    assert \"0ef78513b0cb8cef12743f5aeb35f888\" (toMD5 \"A B C\")\n    assert \"5f4dcc3b5aa765d61d8327deb882cf99\" (toMD5 \"password\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n//   arr = [2 1 1 4 5 8 2 3]\n//         -> sort arr -> [1 1 2 2 3 4 5 8]\n//         -> reverse arr -> [8 5 4 3 2 2 1 1]\n//   return [\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"]\n\n//   If the array is empty return an empty array:\n//   arr = []\n//   return []\n\n//   If the array has any strange number ignore it:\n//   arr = [1 -1  55]\n//         -> sort arr -> [-1 1 55]\n//         -> reverse arr -> [55 1 -1]\n//   return = ['One']\nfunc solve:[]string nums:[]num\n    names := [\"Zero\" \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"]\n    nums2:[]num\n    for n := range nums\n        if n > 0 and n < 10\n            nums2 = nums2 + [n]\n        end\n    end\n    sort nums2\n    result:[]string\n    for n := range nums2\n        result = result + [names[n]]\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort, descending\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] < arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"] (solve [2 1 1 4 5 8 2 3])\n    assert [] (solve [])\n    assert [\"One\"] (solve [1 -1 55])\n    assert [\"Three\" \"Two\" \"One\"] (solve [1 -1 3 2])\n    assert [\"Nine\" \"Eight\" \"Four\"] (solve [9 4 8])\n\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n\n#END:TEST\n#START:CHECK\ncheck(by_length)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n//   arr = [2 1 1 4 5 8 2 3]\n//         -> sort arr -> [1 1 2 2 3 4 5 8]\n//         -> reverse arr -> [8 5 4 3 2 2 1 1]\n//   return [\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"]\n\n//   If the array is empty return an empty array:\n//   arr = []\n//   return []\n\n//   If the array has any strange number ignore it:\n//   arr = [1 -1  55]\n//         -> sort arr -> [-1 1 55]\n//         -> reverse arr -> [55 1 -1]\n//   return = ['One']\nfunc solve:[]string nums:[]num\n    names := [\"Zero\" \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"]\n    nums2:[]num\n    for n := range nums\n        if n > 0 and n < 10\n            nums2 = nums2 + [n]\n        end\n    end\n    sort nums2\n    result:[]string\n    for n := range nums2\n        result = result + [names[n]]\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort, descending\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] < arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"] (solve [2 1 1 4 5 8 2 3])\n    assert [] (solve [])\n    assert [\"One\"] (solve [1 -1 55])\n    assert [\"Three\" \"Two\" \"One\"] (solve [1 -1 3 2])\n    assert [\"Nine\" \"Eight\" \"Four\"] (solve [9 4 8])\n\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return False. Assume no negative numbers and only integers.\n//\n// Examples\n// isSorted([5]) ➞ True\n// isSorted [1 2 3 4 5] // true\n// isSorted [1 3 2 4 5] // false\n// isSorted [1 2 3 4 5 6] // true\n// isSorted [1 2 3 4 5 6 7] // true\n// isSorted [1 3 2 4 5 6 7] // false\n// isSorted [1 2 2 3 3 4] // true\n// isSorted [1 2 2 2 3 4] // false\nfunc isSorted:bool nums:[]num\n    if (len nums) < 2\n        return true\n    end\n    nums2 := nums[:] // copy\n    sort nums2\n    if nums2 != nums\n        return false\n    end\n    last := nums2[0]\n    repeats := 0\n    for n := range nums2[1:]\n        if n == last\n            repeats = repeats + 1\n            if repeats > 1\n                return false\n            end\n        else\n            repeats = 0\n            last = n\n        end\n    end\n    return true\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert true (isSorted [5])\n    assert true (isSorted [1 2 3 4 5])\n    assert false (isSorted [1 3 2 4 5])\n    assert true (isSorted [1 2 3 4 5 6])\n    assert true (isSorted [1 2 3 4 5 6 7])\n    assert false (isSorted [1 3 2 4 5 6 7])\n    assert true (isSorted [])\n    assert true (isSorted [1])\n    assert false (isSorted [3 2 1])\n    assert false (isSorted [1 2 2 2 3 4])\n    assert false (isSorted [1 2 3 3 3 4])\n    assert true (isSorted [1 2 2 3 3 4])\n    assert true (isSorted [1 2 3 4])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(is_sorted)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return False. Assume no negative numbers and only integers.\n//\n// Examples\n// isSorted([5]) ➞ True\n// isSorted [1 2 3 4 5] // true\n// isSorted [1 3 2 4 5] // false\n// isSorted [1 2 3 4 5 6] // true\n// isSorted [1 2 3 4 5 6 7] // true\n// isSorted [1 3 2 4 5 6 7] // false\n// isSorted [1 2 2 3 3 4] // true\n// isSorted [1 2 2 2 3 4] // false\nfunc isSorted:bool nums:[]num\n    if (len nums) < 2\n        return true\n    end\n    nums2 := nums[:] // copy\n    sort nums2\n    if nums2 != nums\n        return false\n    end\n    last := nums2[0]\n    repeats := 0\n    for n := range nums2[1:]\n        if n == last\n            repeats = repeats + 1\n            if repeats > 1\n                return false\n            end\n        else\n            repeats = 0\n            last = n\n        end\n    end\n    return true\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert true (isSorted [5])\n    assert true (isSorted [1 2 3 4 5])\n    assert false (isSorted [1 3 2 4 5])\n    assert true (isSorted [1 2 3 4 5 6])\n    assert true (isSorted [1 2 3 4 5 6 7])\n    assert false (isSorted [1 3 2 4 5 6 7])\n    assert true (isSorted [])\n    assert true (isSorted [1])\n    assert false (isSorted [3 2 1])\n    assert false (isSorted [1 2 2 2 3 4])\n    assert false (isSorted [1 2 3 3 3 4])\n    assert true (isSorted [1 2 2 3 3 4])\n    assert true (isSorted [1 2 3 4])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  You are given a list of numbers.\n//  You need to return the sum of squared numbers in the given list,\n//  round each element in the list to the upper int (Ceiling) first.\n//  Examples:\n//  For lst = [1,2,3] the output should be 14\n//  For lst = [1,4,9] the output should be 98\n//  For lst = [1,3,5,7] the output should be 84\n//  For lst = [1.4,4.2,0] the output should be 29\n//  For lst = [-2.4,1,1] the output should be 6\nfunc squares:num nums:[]num\n    result := 0\n    for n := range nums\n        n = ceil n\n        result = result + n * n\n    end\n    return result\nend\n\nfunc test\n    assert 14 (squares [1 2 3])\n    assert 14 (squares [1 2 3])\n    assert 84 (squares [1 3 5 7])\n    assert 29 (squares [1.4 4.2 0])\n    assert 6 (squares [-2.4 1 1])\n    assert 10230 (squares [100 1 15 2])\n    assert 200000000 (squares [10000 10000])\n    assert 75 (squares [-1.4 4.6 6.3])\n    assert 1086 (squares [-1.4 17.9 18.9 19.9])\n    assert 0 (squares [0])\n    assert 1 (squares [-1])\n    assert 2 (squares [-1 1 0])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(sum_squares)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  You are given a list of numbers.\n//  You need to return the sum of squared numbers in the given list,\n//  round each element in the list to the upper int (Ceiling) first.\n//  Examples:\n//  For lst = [1,2,3] the output should be 14\n//  For lst = [1,4,9] the output should be 98\n//  For lst = [1,3,5,7] the output should be 84\n//  For lst = [1.4,4.2,0] the output should be 29\n//  For lst = [-2.4,1,1] the output should be 6\nfunc squares:num nums:[]num\n    result := 0\n    for n := range nums\n        n = ceil n\n        result = result + n * n\n    end\n    return result\nend\n\nfunc test\n    assert 14 (squares [1 2 3])\n    assert 14 (squares [1 2 3])\n    assert 84 (squares [1 3 5 7])\n    assert 29 (squares [1.4 4.2 0])\n    assert 6 (squares [-2.4 1 1])\n    assert 10230 (squares [100 1 15 2])\n    assert 200000000 (squares [10000 10000])\n    assert 75 (squares [-1.4 4.6 6.3])\n    assert 1086 (squares [-1.4 17.9 18.9 19.9])\n    assert 0 (squares [0])\n    assert 1 (squares [-1])\n    assert 2 (squares [-1 1 0])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// matchParens(['()(', ')']) == 'Yes'\n// matchParens([')', ')']) == 'No'\nfunc matchParens:string s:[]string\n    s1 := s[0] + s[1]\n    s2 := s[1] + s[0]\n    if (valid s1) or (valid s2)\n        return \"Yes\"\n    end\n    return \"No\"\nend\n\nfunc valid:bool s:string\n    depth := 0\n    for c := range s\n        if c == \"(\"\n            depth = depth + 1\n        else\n            depth = depth - 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n\nfunc test\n    assert \"Yes\" (matchParens [\"()(\" \")\"])\n    assert \"No\" (matchParens [\")\" \")\"])\n    assert \"No\" (matchParens [\"(()(())\" \"())())\"])\n    assert \"Yes\" (matchParens [\")())\" \"(()()(\"])\n    assert \"Yes\" (matchParens [\"(())))\" \"(()())((\"])\n    assert \"No\" (matchParens [\"()\" \"())\"])\n    assert \"Yes\" (matchParens [\"(()(\" \"()))()\"])\n    assert \"No\" (matchParens [\"((((\" \"((())\"])\n    assert \"No\" (matchParens [\")(()\" \"(()(\"])\n    assert \"No\" (matchParens [\")(\" \")(\"])\n    assert \"Yes\" (matchParens [\"(\" \")\"])\n    assert \"Yes\" (matchParens [\")\" \"(\"])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n\n#END:TEST\n#START:CHECK\ncheck(match_parens)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// matchParens(['()(', ')']) == 'Yes'\n// matchParens([')', ')']) == 'No'\nfunc matchParens:string s:[]string\n    s1 := s[0] + s[1]\n    s2 := s[1] + s[0]\n    if (valid s1) or (valid s2)\n        return \"Yes\"\n    end\n    return \"No\"\nend\n\nfunc valid:bool s:string\n    depth := 0\n    for c := range s\n        if c == \"(\"\n            depth = depth + 1\n        else\n            depth = depth - 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n\nfunc test\n    assert \"Yes\" (matchParens [\"()(\" \")\"])\n    assert \"No\" (matchParens [\")\" \")\"])\n    assert \"No\" (matchParens [\"(()(())\" \"())())\"])\n    assert \"Yes\" (matchParens [\")())\" \"(()()(\"])\n    assert \"Yes\" (matchParens [\"(())))\" \"(()())((\"])\n    assert \"No\" (matchParens [\"()\" \"())\"])\n    assert \"Yes\" (matchParens [\"(()(\" \"()))()\"])\n    assert \"No\" (matchParens [\"((((\" \"((())\"])\n    assert \"No\" (matchParens [\")(()\" \"(()(\"])\n    assert \"No\" (matchParens [\")(\" \")(\"])\n    assert \"Yes\" (matchParens [\"(\" \")\"])\n    assert \"Yes\" (matchParens [\")\" \"(\"])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Test if given string is a palindrome\nfunc isPalindrome:bool str:string\n    return str == (reverse str)\nend\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n//\n//    makePalindrome(\"\") // \"\"\n//    makePalindrome(\"cat\") // \"catac\"\n//    makePalindrome(\"cata\") // \"catac\"\nfunc makePalindrome:string str:string\n    if str == \"\"\n        return \"\"\n    end\n    beginning_of_suffix := 0\n    while !(isPalindrome str[beginning_of_suffix:])\n        beginning_of_suffix = beginning_of_suffix + 1\n    end\n    return str + (reverse str[:beginning_of_suffix])\nend\n\nfunc reverse:string str:string\n    reversed := \"\"\n    for i := range (len str)\n        reversed = str[i] + reversed\n    end\n    return reversed\nend\n\nfunc test\n    assert \"\" (makePalindrome \"\")\n    assert \"x\" (makePalindrome \"x\")\n    assert \"xyzyx\" (makePalindrome \"xyz\")\n    assert \"xyx\" (makePalindrome \"xyx\")\n    assert \"catac\" (makePalindrome \"cata\")\n    assert \"jerryrrej\" (makePalindrome \"jerry\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n\n#END:TEST\n#START:CHECK\ncheck(make_palindrome)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Test if given string is a palindrome\nfunc isPalindrome:bool str:string\n    return str == (reverse str)\nend\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n//\n//    makePalindrome(\"\") // \"\"\n//    makePalindrome(\"cat\") // \"catac\"\n//    makePalindrome(\"cata\") // \"catac\"\nfunc makePalindrome:string str:string\n    if str == \"\"\n        return \"\"\n    end\n    beginning_of_suffix := 0\n    while !(isPalindrome str[beginning_of_suffix:])\n        beginning_of_suffix = beginning_of_suffix + 1\n    end\n    return str + (reverse str[:beginning_of_suffix])\nend\n\nfunc reverse:string str:string\n    reversed := \"\"\n    for i := range (len str)\n        reversed = str[i] + reversed\n    end\n    return reversed\nend\n\nfunc test\n    assert \"\" (makePalindrome \"\")\n    assert \"x\" (makePalindrome \"x\")\n    assert \"xyzyx\" (makePalindrome \"xyz\")\n    assert \"xyx\" (makePalindrome \"xyx\")\n    assert \"catac\" (makePalindrome \"cata\")\n    assert \"jerryrrej\" (makePalindrome \"jerry\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Filter an input list of strings only for ones that start with a given prefix.\n// filterByPrefix([], \"a\") // []\n// filterByPrefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\") // [\"abc\", \"array\"]\nfunc filterByPrefix:[]string strings:[]string prefix:string\n    result:[]string\n    for s := range strings\n        if startswith s prefix\n            result = result + [s]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [] (filterByPrefix [] \"john\")\n    assert [\"xxx\" \"xxxAAA\" \"xxx\"] (filterByPrefix [\"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\"] \"xxx\")\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return [x for x in strings if x.startswith(prefix)]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\n#END:TEST\n#START:CHECK\ncheck(filter_by_prefix)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Filter an input list of strings only for ones that start with a given prefix.\n// filterByPrefix([], \"a\") // []\n// filterByPrefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\") // [\"abc\", \"array\"]\nfunc filterByPrefix:[]string strings:[]string prefix:string\n    result:[]string\n    for s := range strings\n        if startswith s prefix\n            result = result + [s]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [] (filterByPrefix [] \"john\")\n    assert [\"xxx\" \"xxxAAA\" \"xxx\"] (filterByPrefix [\"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\"] \"xxx\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Given a positive integer n, return the count of the numbers of n-digit\n//  positive integers that start or end with 1.\nfunc count1:num n:num\n    if n == 1\n        return 1\n    end\n    return 18 * (pow 10 n-2)\nend\n\nfunc test\n    assert 1 (count1 1)\n    assert 18 (count1 2)\n    assert 180 (count1 3)\n    assert 1800 (count1 4)\n    assert 18000 (count1 5)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(starts_one_ends)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Given a positive integer n, return the count of the numbers of n-digit\n//  positive integers that start or end with 1.\nfunc count1:num n:num\n    if n == 1\n        return 1\n    end\n    return 18 * (pow 10 n-2)\nend\n\nfunc test\n    assert 1 (count1 1)\n    assert 18 (count1 2)\n    assert 180 (count1 3)\n    assert 1800 (count1 4)\n    assert 18000 (count1 5)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy //  Write a function that takes a string and returns true if the string\n//  length is a prime number or false otherwise\n//  Examples\n//  primeLength \"Hello\" // true\n//  primeLength \"abcdcba\" // true\n//  primeLength \"kittens\" // true\n//  primeLength \"orange\" // false\nfunc primeLength:bool s:string\n    length := len s\n    if length <= 1\n        return false\n    end\n    for i := range 2 (sqrt length+1)\n        if length % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert true (primeLength \"Hello\")\n    assert true (primeLength \"abcdcba\")\n    assert true (primeLength \"kittens\")\n    assert false (primeLength \"orange\")\n    assert true (primeLength \"wow\")\n    assert true (primeLength \"world\")\n    assert true (primeLength \"MadaM\")\n    assert true (primeLength \"Wow\")\n    assert false (primeLength \"\")\n    assert true (primeLength \"HI\")\n    assert true (primeLength \"go\")\n    assert false (primeLength \"gogo\")\n    assert false (primeLength \"aaaaaaaaaaaaaaa\")\n    assert true (primeLength \"Madam\")\n    assert false (primeLength \"M\")\n    assert false (primeLength \"0\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n\n#END:TEST\n#START:CHECK\ncheck(prime_length)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Write a function that takes a string and returns true if the string\n//  length is a prime number or false otherwise\n//  Examples\n//  primeLength \"Hello\" // true\n//  primeLength \"abcdcba\" // true\n//  primeLength \"kittens\" // true\n//  primeLength \"orange\" // false\nfunc primeLength:bool s:string\n    length := len s\n    if length <= 1\n        return false\n    end\n    for i := range 2 (sqrt length+1)\n        if length % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert true (primeLength \"Hello\")\n    assert true (primeLength \"abcdcba\")\n    assert true (primeLength \"kittens\")\n    assert false (primeLength \"orange\")\n    assert true (primeLength \"wow\")\n    assert true (primeLength \"world\")\n    assert true (primeLength \"MadaM\")\n    assert true (primeLength \"Wow\")\n    assert false (primeLength \"\")\n    assert true (primeLength \"HI\")\n    assert true (primeLength \"go\")\n    assert false (primeLength \"gogo\")\n    assert false (primeLength \"aaaaaaaaaaaaaaa\")\n    assert true (primeLength \"Madam\")\n    assert false (primeLength \"M\")\n    assert false (primeLength \"0\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunc maxUniques:string s:[]string\n    if (len s) == 0\n        return \"\"\n    end\n    result := s[:]\n    sort result\n    return result[0]\nend\n\nfunc sort arr:[]string\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if compare arr[i] arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc compare:bool a:string b:string\n    ua := uniques a\n    ub := uniques b\n    if ua == ub\n        return a > b\n    end\n    return ua < ub\nend\n\nfunc uniques:num s:string\n    m:{}bool\n    for c := range s\n        m[c] = true\n    end\n    return len m\nend\n\nfunc test\n    assert \"string\" (maxUniques [\"name\" \"of\" \"string\"])\n    assert \"enam\" (maxUniques [\"name\" \"enam\" \"game\"])\n    assert \"aaaaaaa\" (maxUniques [\"aaaaaaa\" \"bb\" \"cc\"])\n    assert \"abc\" (maxUniques [\"abc\" \"cba\"])\n    assert \"footbott\" (maxUniques [\"play\" \"this\" \"game\" \"of\" \"footbott\"])\n    assert \"gonna\" (maxUniques [\"we\" \"are\" \"gonna\" \"rock\"])\n    assert \"nation\" (maxUniques [\"we\" \"are\" \"a\" \"mad\" \"nation\"])\n    assert \"this\" (maxUniques [\"this\" \"is\" \"a\" \"prrk\"])\n    assert \"b\" (maxUniques [\"b\"])\n    assert \"play\" (maxUniques [\"play\" \"play\" \"play\"])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n\n#END:TEST\n#START:CHECK\ncheck(find_max)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunc maxUniques:string s:[]string\n    if (len s) == 0\n        return \"\"\n    end\n    result := s[:]\n    sort result\n    return result[0]\nend\n\nfunc sort arr:[]string\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if compare arr[i] arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc compare:bool a:string b:string\n    ua := uniques a\n    ub := uniques b\n    if ua == ub\n        return a > b\n    end\n    return ua < ub\nend\n\nfunc uniques:num s:string\n    m:{}bool\n    for c := range s\n        m[c] = true\n    end\n    return len m\nend\n\nfunc test\n    assert \"string\" (maxUniques [\"name\" \"of\" \"string\"])\n    assert \"enam\" (maxUniques [\"name\" \"enam\" \"game\"])\n    assert \"aaaaaaa\" (maxUniques [\"aaaaaaa\" \"bb\" \"cc\"])\n    assert \"abc\" (maxUniques [\"abc\" \"cba\"])\n    assert \"footbott\" (maxUniques [\"play\" \"this\" \"game\" \"of\" \"footbott\"])\n    assert \"gonna\" (maxUniques [\"we\" \"are\" \"gonna\" \"rock\"])\n    assert \"nation\" (maxUniques [\"we\" \"are\" \"a\" \"mad\" \"nation\"])\n    assert \"this\" (maxUniques [\"this\" \"is\" \"a\" \"prrk\"])\n    assert \"b\" (maxUniques [\"b\"])\n    assert \"play\" (maxUniques [\"play\" \"play\" \"play\"])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// sort [1, 11, -1, -11, -12]  == [-1, -11, 1, -12, 11]\n// sort [] == []\nfunc sort:[]num nums:[]num\n    arr := nums[:]\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if (digitSum arr[i]) > (digitSum arr[i + 1])\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\n    return arr\nend\n\nfunc digitSum:num n:num\n    sum := 0\n    neg := n < 0\n    if neg\n        n = -n\n    end\n    while n > 0\n        if neg and (floor n/10) == 0\n            sum = sum - n % 10\n        else\n            sum = sum + n % 10\n        end\n        n = floor n/10\n    end\n    return sum\nend\n\nfunc test\n    assert [-1 -11 1 -12 11] (sort [1 11 -1 -11 -12])\n    assert [0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457] (sort [1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46])\n    assert [] (sort [])\n    assert [-3 -32 -98 -11 1 2 43 54] (sort [1 -11 -32 43 54 -98 2 -3])\n    assert [1 10 2 11 3 4 5 6 7 8 9] (sort [1 2 3 4 5 6 7 8 9 10 11])\n    assert [-76 -21 0 4 23 6 6] (sort [0 6 6 -76 -21 23 4])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(order_by_points)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// sort [1, 11, -1, -11, -12]  == [-1, -11, 1, -12, 11]\n// sort [] == []\nfunc sort:[]num nums:[]num\n    arr := nums[:]\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if (digitSum arr[i]) > (digitSum arr[i + 1])\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\n    return arr\nend\n\nfunc digitSum:num n:num\n    sum := 0\n    neg := n < 0\n    if neg\n        n = -n\n    end\n    while n > 0\n        if neg and (floor n/10) == 0\n            sum = sum - n % 10\n        else\n            sum = sum + n % 10\n        end\n        n = floor n/10\n    end\n    return sum\nend\n\nfunc test\n    assert [-1 -11 1 -12 11] (sort [1 11 -1 -11 -12])\n    assert [0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457] (sort [1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46])\n    assert [] (sort [])\n    assert [-3 -32 -98 -11 1 2 43 54] (sort [1 -11 -32 43 54 -98 2 -3])\n    assert [1 10 2 11 3 4 5 6 7 8 9] (sort [1 2 3 4 5 6 7 8 9 10 11])\n    assert [-76 -21 0 4 23 6 6] (sort [0 6 6 -76 -21 23 4])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n//\n//    stringXor \"010\" \"110\" //  100\nfunc stringXor:string a:string b:string\n    res:string\n    for i := range (len a)\n        if a[i] == b[i]\n            res = res + \"0\"\n        else\n            res = res + \"1\"\n        end\n    end\n    return res\nend\n\nfunc test\n    assert \"010010\" (stringXor \"111000\" \"101010\")\n    assert \"0\" (stringXor \"1\" \"1\")\n    assert \"0101\" (stringXor \"0101\" \"0000\")\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n\n#END:TEST\n#START:CHECK\ncheck(string_xor)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n//\n//    stringXor \"010\" \"110\" //  100\nfunc stringXor:string a:string b:string\n    res:string\n    for i := range (len a)\n        if a[i] == b[i]\n            res = res + \"0\"\n        else\n            res = res + \"1\"\n        end\n    end\n    return res\nend\n\nfunc test\n    assert \"010010\" (stringXor \"111000\" \"101010\")\n    assert \"0\" (stringXor \"1\" \"1\")\n    assert \"0101\" (stringXor \"0101\" \"0000\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy abc := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25 A:0 B:1 C:2 D:3 E:4 F:5 G:6 H:7 I:8 J:9 K:10 L:11 M:12 N:13 O:14 P:15 Q:16 R:17 S:18 T:19 U:20 V:21 W:22 X:23 Y:24 Z:25}\n\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// checkLast(\"apple pie\") // false\n// checkLast(\"apple pi e\") // true\n// checkLast(\"apple pi e \") // false\n// checkLast(\"\") // false\nfunc checkLast:bool s:string\n    words := split s \" \"\n    last := words[-1]\n    return (len last) == 1 and (has abc last)\nend\n\nfunc test\n    assert (checkLast \"apple\") false\n    assert (checkLast \"apple pi e\") true\n    assert (checkLast \"eeeee\") false\n    assert (checkLast \"A\") true\n    assert (checkLast \"Pumpkin pie \") false\n    assert (checkLast \"Pumpkin pie 1\") false\n    assert (checkLast \"\") false\n    assert (checkLast \"eeeee e \") false\n    assert (checkLast \"apple pie\") false\n    assert (checkLast \"apple pi e \") false\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n\n#END:PROMPT\n#START:SOLUTION\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(check_if_last_char_is_a_letter)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy abc := {a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25 A:0 B:1 C:2 D:3 E:4 F:5 G:6 H:7 I:8 J:9 K:10 L:11 M:12 N:13 O:14 P:15 Q:16 R:17 S:18 T:19 U:20 V:21 W:22 X:23 Y:24 Z:25}\n\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// checkLast(\"apple pie\") // false\n// checkLast(\"apple pi e\") // true\n// checkLast(\"apple pi e \") // false\n// checkLast(\"\") // false\nfunc checkLast:bool s:string\n    words := split s \" \"\n    last := words[-1]\n    return (len last) == 1 and (has abc last)\nend\n\nfunc test\n    assert (checkLast \"apple\") false\n    assert (checkLast \"apple pi e\") true\n    assert (checkLast \"eeeee\") false\n    assert (checkLast \"A\") true\n    assert (checkLast \"Pumpkin pie \") false\n    assert (checkLast \"Pumpkin pie 1\") false\n    assert (checkLast \"\") false\n    assert (checkLast \"eeeee e \") false\n    assert (checkLast \"apple pie\") false\n    assert (checkLast \"apple pi e \") false\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// primesTo 5)// [2 3]\n// primesTo 11 // [2 3 5 7]\n// primesTo 0 // []\n// primesTo 20 // [2 3 5 7 11 13 17 19]\n// primesTo 1 // []\n// primesTo 18 // [2 3 5 7 11 13 17]\nfunc primesTo:[]num n:num\n    result:[]num\n    for i := range 2 n\n        if (isPrime i)\n            result = result + [i]\n        end\n    end\n    return result\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 n\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert [2 3] (primesTo 5)\n    assert [2 3 5] (primesTo 6)\n    assert [2 3 5] (primesTo 7)\n    assert [2 3 5 7] (primesTo 10)\n    assert [] (primesTo 0)\n    assert [2 3 5 7 11 13 17 19] (primesTo 22)\n    assert [] (primesTo 1)\n    assert [2 3 5 7 11 13 17] (primesTo 18)\n    assert [2 3 5 7 11 13 17 19 23 29 31 37 41 43] (primesTo 47)\n    assert [2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97] (primesTo 101)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n\n#END:TEST\n#START:CHECK\ncheck(count_up_to)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// primesTo 5)// [2 3]\n// primesTo 11 // [2 3 5 7]\n// primesTo 0 // []\n// primesTo 20 // [2 3 5 7 11 13 17 19]\n// primesTo 1 // []\n// primesTo 18 // [2 3 5 7 11 13 17]\nfunc primesTo:[]num n:num\n    result:[]num\n    for i := range 2 n\n        if (isPrime i)\n            result = result + [i]\n        end\n    end\n    return result\nend\n\nfunc isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 n\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert [2 3] (primesTo 5)\n    assert [2 3 5] (primesTo 6)\n    assert [2 3 5] (primesTo 7)\n    assert [2 3 5 7] (primesTo 10)\n    assert [] (primesTo 0)\n    assert [2 3 5 7 11 13 17 19] (primesTo 22)\n    assert [] (primesTo 1)\n    assert [2 3 5 7 11 13 17] (primesTo 18)\n    assert [2 3 5 7 11 13 17 19 23 29 31 37 41 43] (primesTo 47)\n    assert [2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97] (primesTo 101)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Write a function that returns true if the given number is the\n// multiplication of 3 prime numbers and false otherwise. Knowing that each\n// prime number is less then 100.\n//\n// prime3 30 // true: 30 = 2 * 3 * 5\nfunc prime3:bool n:num\n    primes := calcPrimes 100\n    length := len primes\n    for i := range length\n        for j := range i length\n            for k := range j length\n                if n == primes[i] * primes[j] * primes[k]\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n\nfunc calcPrimes:[]num n:num\n    // Sieve of Eratosthenes\n    // input: an integer n > 1.\n    // output: all prime numbers from 2 through n.\n    sieve := [true] * n\n\n    for i := range 2 (sqrt n+1)\n        if sieve[i]\n            for j := range i*i n i\n                sieve[j] = false\n            end\n        end\n    end\n    result:[]num\n    for i := range 2 n\n        if sieve[i]\n            result = result + [i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert false (prime3 5)\n    assert true (prime3 30)\n    assert true (prime3 8)\n    assert false (prime3 10)\n    assert true (prime3 125)\n    assert true (prime3 3*5*7)\n    assert false (prime3 3*6*7)\n    assert false (prime3 9*9*9)\n    assert false (prime3 11*9*9)\n    assert true (prime3 11*13*7)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n\n#END:TEST\n#START:CHECK\ncheck(is_multiply_prime)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function that returns true if the given number is the\n// multiplication of 3 prime numbers and false otherwise. Knowing that each\n// prime number is less then 100.\n//\n// prime3 30 // true: 30 = 2 * 3 * 5\nfunc prime3:bool n:num\n    primes := calcPrimes 100\n    length := len primes\n    for i := range length\n        for j := range i length\n            for k := range j length\n                if n == primes[i] * primes[j] * primes[k]\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n\nfunc calcPrimes:[]num n:num\n    // Sieve of Eratosthenes\n    // input: an integer n > 1.\n    // output: all prime numbers from 2 through n.\n    sieve := [true] * n\n\n    for i := range 2 (sqrt n+1)\n        if sieve[i]\n            for j := range i*i n i\n                sieve[j] = false\n            end\n        end\n    end\n    result:[]num\n    for i := range 2 n\n        if sieve[i]\n            result = result + [i]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert false (prime3 5)\n    assert true (prime3 30)\n    assert true (prime3 8)\n    assert false (prime3 10)\n    assert true (prime3 125)\n    assert true (prime3 3*5*7)\n    assert false (prime3 3*6*7)\n    assert false (prime3 9*9*9)\n    assert false (prime3 11*9*9)\n    assert true (prime3 11*13*7)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// boredoms \"Hello world\" // 0\n// boredoms \"The sky is blue. The sun is shining. I love this weather\" // 1\n\nfunc boredoms:num s:string\n    result := 0\n    sentences := splitText s\n    for s := range sentences\n        if (startswith s \"I \") or s == \"I.\" or s == \"I!\" or s == \"I?\"\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc splitText:[]string s:string\n    result:[]string\n    start := 0\n    for i := range (len s)\n        c := s[i]\n        if c == \".\" or c == \"?\" or c == \"!\"\n            sentence := trim s[start:i + 1] \" \"\n            result = result + [sentence]\n            start = i + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (boredoms \"Hello world\")\n    assert 0 (boredoms \"Is the sky blue?\")\n    assert 1 (boredoms \"I love It !\")\n    assert 0 (boredoms \"I\")\n    assert 1 (boredoms \"I.\")\n    assert 0 (boredoms \"what? I\")\n    assert 2 (boredoms \"I feel good today. I will be productive. will kill It\")\n    assert 0 (boredoms \"You and I are going for a walk\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(is_bored)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// boredoms \"Hello world\" // 0\n// boredoms \"The sky is blue. The sun is shining. I love this weather\" // 1\n\nfunc boredoms:num s:string\n    result := 0\n    sentences := splitText s\n    for s := range sentences\n        if (startswith s \"I \") or s == \"I.\" or s == \"I!\" or s == \"I?\"\n            result = result + 1\n        end\n    end\n    return result\nend\n\nfunc splitText:[]string s:string\n    result:[]string\n    start := 0\n    for i := range (len s)\n        c := s[i]\n        if c == \".\" or c == \"?\" or c == \"!\"\n            sentence := trim s[start:i + 1] \" \"\n            result = result + [sentence]\n            start = i + 1\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (boredoms \"Hello world\")\n    assert 0 (boredoms \"Is the sky blue?\")\n    assert 1 (boredoms \"I love It !\")\n    assert 0 (boredoms \"I\")\n    assert 1 (boredoms \"I.\")\n    assert 0 (boredoms \"what? I\")\n    assert 2 (boredoms \"I feel good today. I will be productive. will kill It\")\n    assert 0 (boredoms \"You and I are going for a walk\")\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Given an array of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// squareSum [1, 3, 2, 0] // 1 + 9 + 0 + 0 = 10\n// squareSum [-1, -2, 0] // 0\n// squareSum [9, -2] // 81\n// squareSum [0] // 0\n// If the input list is empty, return 0.\nfunc squareSum:num nums:[]num\n    result := 0\n    for n := range nums\n        if n % 2 == 1\n            result = result + n * n\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (squareSum [])\n    assert 25 (squareSum [5 4])\n    assert 0 (squareSum [0.1 0.2 0.3])\n    assert 0 (squareSum [-10 -20 -30])\n    assert 0 (squareSum [-1 -2 8])\n    assert 34 (squareSum [0.2 3 5])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(double_the_difference)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given an array of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// squareSum [1, 3, 2, 0] // 1 + 9 + 0 + 0 = 10\n// squareSum [-1, -2, 0] // 0\n// squareSum [9, -2] // 81\n// squareSum [0] // 0\n// If the input list is empty, return 0.\nfunc squareSum:num nums:[]num\n    result := 0\n    for n := range nums\n        if n % 2 == 1\n            result = result + n * n\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (squareSum [])\n    assert 25 (squareSum [5 4])\n    assert 0 (squareSum [0.1 0.2 0.3])\n    assert 0 (squareSum [-10 -20 -30])\n    assert 0 (squareSum [-1 -2 8])\n    assert 34 (squareSum [0.2 3 5])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Write a function that accepts two lists of strings and returns the list that has\n// the lower total number of characters of all the strings in the list combined.\n//\n// If the two lists have the same number of chars, return the first list.\n//\n// Examples\n// findShorter [], []) ➞ []\n// findShorter [\"hi\" \"admin\"] [\"hI\" \"Hi\"] // [\"hI\" \"Hi\"]\n// findShorter [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"] // [\"hi\" \"admin\"]\n// findShorter [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"] // [\"hI\" \"hi\" \"hi\"]\n// findShorter [\"4\"] [\"1\" \"2\" \"3\" \"4\" \"5\"] // [\"4\"]\nfunc findShorter:[]string arr1:[]string arr2:[]string\n    str1 := join arr1 \"\"\n    str2 := join arr2 \"\"\n    if (len str1) <= (len str2)\n        return arr1\n    end\n    return arr2\nend\n\nfunc test\n    assert [] (findShorter [] [])\n    assert [\"hi\" \"hi\"] (findShorter [\"hi\" \"admin\"] [\"hi\" \"hi\"])\n    assert [\"hi\" \"admin\"] (findShorter [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"])\n    assert [\"4\"] (findShorter [\"4\"] [\"1\" \"2\" \"3\" \"4\" \"5\"])\n    assert [\"hI\" \"Hi\"] (findShorter [\"hi\" \"admin\"] [\"hI\" \"Hi\"])\n    assert [\"hI\" \"hi\" \"hi\"] (findShorter [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"])\n    assert [\"hi\" \"admin\"] (findShorter [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hii\"])\n    assert [] (findShorter [] [\"this\"])\n    assert [] (findShorter [\"this\"] [])\n\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n\n#END:TEST\n#START:CHECK\ncheck(total_match)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function that accepts two lists of strings and returns the list that has\n// the lower total number of characters of all the strings in the list combined.\n//\n// If the two lists have the same number of chars, return the first list.\n//\n// Examples\n// findShorter [], []) ➞ []\n// findShorter [\"hi\" \"admin\"] [\"hI\" \"Hi\"] // [\"hI\" \"Hi\"]\n// findShorter [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"] // [\"hi\" \"admin\"]\n// findShorter [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"] // [\"hI\" \"hi\" \"hi\"]\n// findShorter [\"4\"] [\"1\" \"2\" \"3\" \"4\" \"5\"] // [\"4\"]\nfunc findShorter:[]string arr1:[]string arr2:[]string\n    str1 := join arr1 \"\"\n    str2 := join arr2 \"\"\n    if (len str1) <= (len str2)\n        return arr1\n    end\n    return arr2\nend\n\nfunc test\n    assert [] (findShorter [] [])\n    assert [\"hi\" \"hi\"] (findShorter [\"hi\" \"admin\"] [\"hi\" \"hi\"])\n    assert [\"hi\" \"admin\"] (findShorter [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"])\n    assert [\"4\"] (findShorter [\"4\"] [\"1\" \"2\" \"3\" \"4\" \"5\"])\n    assert [\"hI\" \"Hi\"] (findShorter [\"hi\" \"admin\"] [\"hI\" \"Hi\"])\n    assert [\"hI\" \"hi\" \"hi\"] (findShorter [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"])\n    assert [\"hi\" \"admin\"] (findShorter [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hii\"])\n    assert [] (findShorter [] [\"this\"])\n    assert [] (findShorter [\"this\"] [])\n\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n// at that point function should return true. Otherwise it should return False.\n// belowZero [1 2 3] // false\n// belowZero([1 2 -4 5] // true\nfunc belowZero:bool operations:[]num\n    balance := 0\n    for op := range (len operations)\n        balance = balance + operations[op]\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n\nfunc test\n    assert false (belowZero [])\n    assert false (belowZero [1 2 -3 1 2 -3])\n    assert true (belowZero [1 2 -4 5 6])\n    assert false (belowZero [1 -1 2 -2 5 -5 4 -4])\n    assert true (belowZero [1 -1 2 -2 5 -5 4 -5])\n    assert true (belowZero [1 -2 2 -2 5 -5 4 -4])\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n#END:TEST\n#START:CHECK\ncheck(below_zero)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n// at that point function should return true. Otherwise it should return False.\n// belowZero [1 2 3] // false\n// belowZero([1 2 -4 5] // true\nfunc belowZero:bool operations:[]num\n    balance := 0\n    for op := range (len operations)\n        balance = balance + operations[op]\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n\nfunc test\n    assert false (belowZero [])\n    assert false (belowZero [1 2 -3 1 2 -3])\n    assert true (belowZero [1 2 -4 5 6])\n    assert false (belowZero [1 -1 2 -2 5 -5 4 -4])\n    assert true (belowZero [1 -1 2 -2 5 -5 4 -5])\n    assert true (belowZero [1 -2 2 -2 5 -5 4 -4])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Create a function which returns the largest index of an element which\n//  is not greater than or equal to the element immediately preceding it. If\n//  no such element exists then return -1. The given array will not contain\n//  duplicate values.\n//\n//  Examples:\n//  solve [1,2,4,3,5] // 3\n//  solve [1,2,3] // -1\nfunc solve:num nums:[]num\n    length := len nums\n    if length < 2\n        return -1\n    end\n    result := -1\n    for i := range 1 length\n        if nums[i - 1] > nums[i]\n            result = i\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 3 (solve [1 2 4 3 5])\n    assert -1 (solve [1 2 4 5])\n    assert 2 (solve [1 4 2 5 6 7 8 9 10])\n    assert 4 (solve [4 8 5 7 3])\n    assert -1 (solve [])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    ind=-1\n    i=1\n    while i",
  "output: ",
  "output-text ",
  "output-evy //  Create a function which returns the largest index of an element which\n//  is not greater than or equal to the element immediately preceding it. If\n//  no such element exists then return -1. The given array will not contain\n//  duplicate values.\n//\n//  Examples:\n//  solve [1,2,4,3,5] // 3\n//  solve [1,2,3] // -1\nfunc solve:num nums:[]num\n    length := len nums\n    if length < 2\n        return -1\n    end\n    result := -1\n    for i := range 1 length\n        if nums[i - 1] > nums[i]\n            result = i\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 3 (solve [1 2 4 3 5])\n    assert -1 (solve [1 2 4 5])\n    assert 2 (solve [1 4 2 5 6 7 8 9 10])\n    assert 4 (solve [4 8 5 7 3])\n    assert -1 (solve [])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n//\n// Here is a legend:\n//   \"o\" - whole note, lasts four beats\n//   \"o|\" - half note, lasts two beats\n//   \".|\" - quarter note, lasts one beat\n//\n// parseMusic \"o o| .| o| o| .| .| .| .| o o\"\n//    // [4 2 1 2 2 1 1 1 1 4 4]\n//\nfunc parseMusic:[]num music:string\n    if music == \"\"\n        return []\n    end\n    lookup:{}num\n    lookup[\"o\"] = 4\n    lookup[\"o|\"] = 2\n    lookup[\".|\"] = 1\n    notes := split music \" \"\n    beats:[]num\n    for note := range notes\n        beats = beats + [lookup[note]]\n    end\n    return beats\nend\n\nfunc test\n    assert [] (parseMusic \"\")\n    assert [4 4 4 4] (parseMusic \"o o o o\")\n    assert [1 1 1 1] (parseMusic \".| .| .| .|\")\n    assert [2 2 1 1 4 4 4 4] (parseMusic \"o| o| .| .| o o o o\")\n    assert [2 1 2 1 4 2 4 2] (parseMusic \"o| .| o| .| o o| o o|\")\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\n#END:TEST\n#START:CHECK\ncheck(parse_music)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n//\n// Here is a legend:\n//   \"o\" - whole note, lasts four beats\n//   \"o|\" - half note, lasts two beats\n//   \".|\" - quarter note, lasts one beat\n//\n// parseMusic \"o o| .| o| o| .| .| .| .| o o\"\n//    // [4 2 1 2 2 1 1 1 1 4 4]\n//\nfunc parseMusic:[]num music:string\n    if music == \"\"\n        return []\n    end\n    lookup:{}num\n    lookup[\"o\"] = 4\n    lookup[\"o|\"] = 2\n    lookup[\".|\"] = 1\n    notes := split music \" \"\n    beats:[]num\n    for note := range notes\n        beats = beats + [lookup[note]]\n    end\n    return beats\nend\n\nfunc test\n    assert [] (parseMusic \"\")\n    assert [4 4 4 4] (parseMusic \"o o o o\")\n    assert [1 1 1 1] (parseMusic \".| .| .| .|\")\n    assert [2 2 1 1 4 4 4 4] (parseMusic \"o| o| .| .| o o o o\")\n    assert [2 1 2 1 4 2 4 2] (parseMusic \"o| .| o| .| o o| o o|\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing\n// the following operation on the given array:\n//     You are allowed to perform right shift operation any number of times.\n//\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index.\n//\n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n//\n// Note: The given list is guaranteed to have unique elements.\n//\n// For Example:\n//\n// sortedWithShift [3 4 5 1 2] // true\n// Explanation: By performing 2 right shift operations non-decreasing order can\n//              be achieved for the given array.\n// sortedWithShift [3 5 4 1 2]) // false\n// Explanation:It is not possible to get non-decreasing order for the given\n//             array by performing any number of right shift operations.\nfunc sortedWithShift:bool nums:[]num\n    greaterThanNext := 0\n    for i := range (len nums)-1\n        if nums[i] > nums[i + 1]\n            greaterThanNext = greaterThanNext + 1\n        end\n    end\n    return greaterThanNext == 0 or (greaterThanNext == 1 and nums[-1] < nums[0])\nend\n\nfunc test\n    assert true (sortedWithShift [3 4 5 1 2])\n    assert true (sortedWithShift [3 5 10 1 2])\n    assert false (sortedWithShift [4 3 1 2])\n    assert false (sortedWithShift [3 5 4 1 2])\n    assert true (sortedWithShift [])\n    assert true (sortedWithShift [1])\n    assert true (sortedWithShift [1 2])\n    assert true (sortedWithShift [2 1])\n    assert true (sortedWithShift [2 3 1])\n    assert false (sortedWithShift [2 1 3])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n\n#END:TEST\n#START:CHECK\ncheck(move_one_ball)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing\n// the following operation on the given array:\n//     You are allowed to perform right shift operation any number of times.\n//\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index.\n//\n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n//\n// Note: The given list is guaranteed to have unique elements.\n//\n// For Example:\n//\n// sortedWithShift [3 4 5 1 2] // true\n// Explanation: By performing 2 right shift operations non-decreasing order can\n//              be achieved for the given array.\n// sortedWithShift [3 5 4 1 2]) // false\n// Explanation:It is not possible to get non-decreasing order for the given\n//             array by performing any number of right shift operations.\nfunc sortedWithShift:bool nums:[]num\n    greaterThanNext := 0\n    for i := range (len nums)-1\n        if nums[i] > nums[i + 1]\n            greaterThanNext = greaterThanNext + 1\n        end\n    end\n    return greaterThanNext == 0 or (greaterThanNext == 1 and nums[-1] < nums[0])\nend\n\nfunc test\n    assert true (sortedWithShift [3 4 5 1 2])\n    assert true (sortedWithShift [3 5 10 1 2])\n    assert false (sortedWithShift [4 3 1 2])\n    assert false (sortedWithShift [3 5 4 1 2])\n    assert true (sortedWithShift [])\n    assert true (sortedWithShift [1])\n    assert true (sortedWithShift [1 2])\n    assert true (sortedWithShift [2 1])\n    assert true (sortedWithShift [2 3 1])\n    assert false (sortedWithShift [2 1 3])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a positive integer n, return the total sum of its digits in binary.\n// solve 1000 // \"1\"\n// solve 150 // \"110\"\n// solve 147 // \"1100\"\nfunc solve:string n:num\n    sum := 0\n    while n > 0\n        sum = sum + n % 10\n        n = floor n/10\n    end\n    result := \"\"\n    while sum > 0\n        result = (sprint sum%2) + result\n        sum = floor sum/2\n    end\n    return result\nend\n\nfunc test\n    assert \"1\" (solve 1000)\n    assert \"110\" (solve 150)\n    assert \"1100\" (solve 147)\n    assert \"1001\" (solve 333)\n    assert \"10010\" (solve 963)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input-python #START:PROMPT\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n\n#END:TEST\n#START:CHECK\ncheck(solve)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a positive integer n, return the total sum of its digits in binary.\n// solve 1000 // \"1\"\n// solve 150 // \"110\"\n// solve 147 // \"1100\"\nfunc solve:string n:num\n    sum := 0\n    while n > 0\n        sum = sum + n % 10\n        n = floor n/10\n    end\n    result := \"\"\n    while sum > 0\n        result = (sprint sum%2) + result\n        sum = floor sum/2\n    end\n    return result\nend\n\nfunc test\n    assert \"1\" (solve 1000)\n    assert \"110\" (solve 150)\n    assert \"1100\" (solve 147)\n    assert \"1001\" (solve 333)\n    assert \"10010\" (solve 963)\nend\n\ntest\n\nfunc assert want:any got:any\n    total = total + 1\n    if want == got\n        return\n    end\n    wantType := (typeof want)[:2]\n    gotType := (typeof got)[:2]\n    if wantType == \"[]\" or wantType == \"{}\" and wantType == gotType and (len want) == 0 and (len got) == 0\n        return\n    end\n    fails = fails + 1\n    printf \"want != got:\\n want: %v\\n got:  %v\\n\" want got\nend\n\nfunc printResult\n    printf \"%2.f of %2.f tests passed\\n\" (total - fails) total\nend\n\ntest\nprintResult",
  "input: ",
  "input-text ",
  "input-evy // Find how many times a given substring can be found in the original string.\n// Count overlapping cases.\n// findTimes \" \"\" // 0\n// findTimes \"aa\" \"\" // 3\n// findTimes \"aaa\" \"a\" // 3\nfunc findTimes:num str:string sub:string\n    times := 0\n    rend := (len str) - (len sub) + 1\n    for i := range rend\n        if str[i:i + (len sub)] == sub\n            times = times + 1\n        end\n    end\n    return times\nend\n\nfunc test\n    assert 0 (findTimes \"\" \"x\")\n    assert 4 (findTimes \"xyxyxyx\" \"x\")\n    assert 4 (findTimes \"cacacacac\" \"cac\")\n    assert 1 (findTimes \"john doe\" \"john\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\n#END:TEST\n#START:CHECK\ncheck(how_many_times)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Find how many times a given substring can be found in the original string.\n// Count overlapping cases.\n// findTimes \" \"\" // 0\n// findTimes \"aa\" \"\" // 3\n// findTimes \"aaa\" \"a\" // 3\nfunc findTimes:num str:string sub:string\n    times := 0\n    rend := (len str) - (len sub) + 1\n    for i := range rend\n        if str[i:i + (len sub)] == sub\n            times = times + 1\n        end\n    end\n    return times\nend\n\nfunc test\n    assert 0 (findTimes \"\" \"x\")\n    assert 4 (findTimes \"xyxyxyx\" \"x\")\n    assert 4 (findTimes \"cacacacac\" \"cac\")\n    assert 1 (findTimes \"john doe\" \"john\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// toRoman 19 // \"xix\"\n// toRoman 152 // \"clii\"\n// toRoman 426 // \"cdxxvi\"\nfunc toRoman:string n:num\n    nums := [1 4 5 9 10 40 50 90 100 400 500 900 1000]\n    roms := [\"i\" \"iv\" \"v\" \"ix\" \"x\" \"xl\" \"l\" \"xc\" \"c\" \"cd\" \"d\" \"cm\" \"m\"]\n    i := (len nums) - 1\n    result := \"\"\n    while n > 0\n        div := floor n/nums[i]\n        n = n % nums[i]\n        while div > 0\n            result = result + roms[i]\n            div = div - 1\n        end\n        i = i - 1\n    end\n    return result\nend\n\nfunc test\n    assert \"xix\" (toRoman 19)\n    assert \"clii\" (toRoman 152)\n    assert \"ccli\" (toRoman 251)\n    assert \"cdxxvi\" (toRoman 426)\n    assert \"d\" (toRoman 500)\n    assert \"i\" (toRoman 1)\n    assert \"iv\" (toRoman 4)\n    assert \"xliii\" (toRoman 43)\n    assert \"xc\" (toRoman 90)\n    assert \"xciv\" (toRoman 94)\n    assert \"dxxxii\" (toRoman 532)\n    assert \"cm\" (toRoman 900)\n    assert \"cmxciv\" (toRoman 994)\n    assert \"m\" (toRoman 1000)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(int_to_mini_roman)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// toRoman 19 // \"xix\"\n// toRoman 152 // \"clii\"\n// toRoman 426 // \"cdxxvi\"\nfunc toRoman:string n:num\n    nums := [1 4 5 9 10 40 50 90 100 400 500 900 1000]\n    roms := [\"i\" \"iv\" \"v\" \"ix\" \"x\" \"xl\" \"l\" \"xc\" \"c\" \"cd\" \"d\" \"cm\" \"m\"]\n    i := (len nums) - 1\n    result := \"\"\n    while n > 0\n        div := floor n/nums[i]\n        n = n % nums[i]\n        while div > 0\n            result = result + roms[i]\n            div = div - 1\n        end\n        i = i - 1\n    end\n    return result\nend\n\nfunc test\n    assert \"xix\" (toRoman 19)\n    assert \"clii\" (toRoman 152)\n    assert \"ccli\" (toRoman 251)\n    assert \"cdxxvi\" (toRoman 426)\n    assert \"d\" (toRoman 500)\n    assert \"i\" (toRoman 1)\n    assert \"iv\" (toRoman 4)\n    assert \"xliii\" (toRoman 43)\n    assert \"xc\" (toRoman 90)\n    assert \"xciv\" (toRoman 94)\n    assert \"dxxxii\" (toRoman 532)\n    assert \"cm\" (toRoman 900)\n    assert \"cmxciv\" (toRoman 994)\n    assert \"m\" (toRoman 1000)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If\n// there's no such number, then the function should return -1.\n// choose 12 15 // 14\n// choose 13 12 // -1\nfunc choose:num x:num y:num\n    if x > y\n        return -1\n    end\n    if y % 2 == 0\n        return y\n    end\n    if x == y\n        return -1\n    end\n    return y - 1\nend\n\nfunc test\n    assert 14 (choose 12 15)\n    assert -1 (choose 13 12)\n    assert 12354 (choose 33 12354)\n    assert -1 (choose 5234 5233)\n    assert 28 (choose 6 29)\n    assert -1 (choose 27 10)\n    assert -1 (choose 7 7)\n    assert 546 (choose 546 546)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n\n#END:TEST\n#START:CHECK\ncheck(choose_num)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If\n// there's no such number, then the function should return -1.\n// choose 12 15 // 14\n// choose 13 12 // -1\nfunc choose:num x:num y:num\n    if x > y\n        return -1\n    end\n    if y % 2 == 0\n        return y\n    end\n    if x == y\n        return -1\n    end\n    return y - 1\nend\n\nfunc test\n    assert 14 (choose 12 15)\n    assert -1 (choose 13 12)\n    assert 12354 (choose 33 12354)\n    assert -1 (choose 5234 5233)\n    assert 28 (choose 6 29)\n    assert -1 (choose 27 10)\n    assert -1 (choose 7 7)\n    assert 546 (choose 546 546)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// asciiSum \"\" // 0\n// asciiSum \"abAB\" // 131\n// asciiSum \"abcCd\" // 67\n// asciiSum \"helloE\" // 69\n// asciiSum \"woArBld\" // 131\n// asciiSum \"aAaaaXa\" // 153\nfunc asciiSum:num str:string\n    abc := \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    uppers:{}num\n    for i := range (len abc)\n        uppers[abc[i]] = i + 65\n    end\n\n    result := 0\n    for c := range str\n        if has uppers c\n            result = result + uppers[c]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (asciiSum \"\")\n    assert 131 (asciiSum \"abAB\")\n    assert 67 (asciiSum \"abcCd\")\n    assert 69 (asciiSum \"helloE\")\n    assert 131 (asciiSum \"woArBld\")\n    assert 153 (asciiSum \"aAaaaXa\")\n    assert 151 (asciiSum \" How are yOu?\")\n    assert 327 (asciiSum \"You arE Very Smart\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n\n#END:TEST\n#START:CHECK\ncheck(digitSum)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// asciiSum \"\" // 0\n// asciiSum \"abAB\" // 131\n// asciiSum \"abcCd\" // 67\n// asciiSum \"helloE\" // 69\n// asciiSum \"woArBld\" // 131\n// asciiSum \"aAaaaXa\" // 153\nfunc asciiSum:num str:string\n    abc := \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    uppers:{}num\n    for i := range (len abc)\n        uppers[abc[i]] = i + 65\n    end\n\n    result := 0\n    for c := range str\n        if has uppers c\n            result = result + uppers[c]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 0 (asciiSum \"\")\n    assert 131 (asciiSum \"abAB\")\n    assert 67 (asciiSum \"abcCd\")\n    assert 69 (asciiSum \"helloE\")\n    assert 131 (asciiSum \"woArBld\")\n    assert 153 (asciiSum \"aAaaaXa\")\n    assert 151 (asciiSum \" How are yOu?\")\n    assert 327 (asciiSum \"You arE Very Smart\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets\n// where at least one bracket in the subsequence is nested.\n// isNested \"[[]]\" // true\n// isNested \"[]]]]]]][[[[[]\" // false\n// isNested \"[][]\" // false\n// isNested \"[]\" // false\n// isNested \"[[][]]\" // true\n// isNested \"[[]][[\" // true\nfunc isNested:bool s:string\n    depth := 0\n    maxDepth := 0\n    for c := range s\n        if c == \"[\"\n            depth = depth + 1\n            if depth > maxDepth\n                maxDepth = depth\n            end\n        else\n            depth = depth - 1\n            if depth < 0\n                depth = 0\n                maxDepth = 0\n            else if maxDepth - depth >= 2\n                return true\n            end\n        end\n    end\n    return false\nend\n\nfunc test\n    assert true (isNested \"[[]]\")\n    assert false (isNested \"[]]]]]]][[[[[]\")\n    assert false (isNested \"[][]\")\n    assert false (isNested (\"[]\"))\n    assert true (isNested \"[[[[]]]]\")\n    assert false (isNested \"[]]]]]]]]]]\")\n    assert true (isNested \"[][][[]]\")\n    assert false (isNested \"[[]\")\n    assert false (isNested \"[]]\")\n    assert true (isNested \"[[]][[\")\n    assert true (isNested \"[[][]]\")\n    assert false (isNested \"\")\n    assert false (isNested \"[[[[[[[[\")\n    assert false (isNested \"]]]]]]]]\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n\n#END:PROMPT\n#START:SOLUTION\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n\n#END:TEST\n#START:CHECK\ncheck(is_nested)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets\n// where at least one bracket in the subsequence is nested.\n// isNested \"[[]]\" // true\n// isNested \"[]]]]]]][[[[[]\" // false\n// isNested \"[][]\" // false\n// isNested \"[]\" // false\n// isNested \"[[][]]\" // true\n// isNested \"[[]][[\" // true\nfunc isNested:bool s:string\n    depth := 0\n    maxDepth := 0\n    for c := range s\n        if c == \"[\"\n            depth = depth + 1\n            if depth > maxDepth\n                maxDepth = depth\n            end\n        else\n            depth = depth - 1\n            if depth < 0\n                depth = 0\n                maxDepth = 0\n            else if maxDepth - depth >= 2\n                return true\n            end\n        end\n    end\n    return false\nend\n\nfunc test\n    assert true (isNested \"[[]]\")\n    assert false (isNested \"[]]]]]]][[[[[]\")\n    assert false (isNested \"[][]\")\n    assert false (isNested (\"[]\"))\n    assert true (isNested \"[[[[]]]]\")\n    assert false (isNested \"[]]]]]]]]]]\")\n    assert true (isNested \"[][][[]]\")\n    assert false (isNested \"[[]\")\n    assert false (isNested \"[]]\")\n    assert true (isNested \"[[]][[\")\n    assert true (isNested \"[[][]]\")\n    assert false (isNested \"\")\n    assert false (isNested \"[[[[[[[[\")\n    assert false (isNested \"]]]]]]]]\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // For a given list of input numbers, calculate Mean Absolute Deviation around\n// the mean of this dataset. Mean Absolute Deviation is the average absolute\n// difference between each element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// meanAbsoluteDeviation [1.0 2.0 3.0 4.0]\n// 1.0\nfunc meanAbsoluteDeviation:num numbers:[]num\n    mean := (sum numbers) / (len numbers)\n    stdev := 0\n    for number := range numbers\n        stdev = stdev + (abs (number - mean))\n    end\n    return stdev / (len numbers)\nend\n\nfunc sum:num numbers:[]num\n    total := 0\n    for number := range numbers\n        total = total + number\n    end\n    return total\nend\n\nfunc test\n    assert true ((abs ((meanAbsoluteDeviation [1 2 3]) - 2 / 3)) < 0.000001)\n    assert true ((abs ((meanAbsoluteDeviation [1 2 3 4]) - 1)) < 0.000001)\n    assert true ((abs ((meanAbsoluteDeviation [1 2 3 4 5]) - 6 / 5)) < 0.000001)\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n\n#END:TEST\n#START:CHECK\ncheck(mean_absolute_deviation)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // For a given list of input numbers, calculate Mean Absolute Deviation around\n// the mean of this dataset. Mean Absolute Deviation is the average absolute\n// difference between each element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// meanAbsoluteDeviation [1.0 2.0 3.0 4.0]\n// 1.0\nfunc meanAbsoluteDeviation:num numbers:[]num\n    mean := (sum numbers) / (len numbers)\n    stdev := 0\n    for number := range numbers\n        stdev = stdev + (abs (number - mean))\n    end\n    return stdev / (len numbers)\nend\n\nfunc sum:num numbers:[]num\n    total := 0\n    for number := range numbers\n        total = total + number\n    end\n    return total\nend\n\nfunc test\n    assert true ((abs ((meanAbsoluteDeviation [1 2 3]) - 2 / 3)) < 0.000001)\n    assert true ((abs ((meanAbsoluteDeviation [1 2 3 4]) - 1)) < 0.000001)\n    assert true ((abs ((meanAbsoluteDeviation [1 2 3 4 5]) - 6 / 5)) < 0.000001)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// rescale_to_unit [1.0 2.0 3.0 4.0 5.0] // [0.0 0.25 0.5 0.75 1.0]\nfunc rescale_to_unit:[]num numbers:[]num\n    min_number := numbers[0]\n    max_number := numbers[0]\n    for n := range numbers\n        if n < min_number\n            min_number = n\n        end\n        if n > max_number\n            max_number = n\n        end\n    end\n    result:[]num\n    for n := range numbers\n        result = result + [(n - min_number)/(max_number - min_number)]\n    end\n    return result\nend\n\nfunc test\n    assert [0 1] (rescale_to_unit [2 49.9])\n    assert [1 0] (rescale_to_unit [100 49.9])\n    assert [0 0.25 0.5 0.75 1] (rescale_to_unit [1 2 3 4 5])\n    assert [0.25 0 1 0.5 0.75] (rescale_to_unit [2 1 5 3 4])\n    assert [0.25 0 1 0.5 0.75] (rescale_to_unit [12 11 15 13 14])\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n#END:TEST\n#START:CHECK\ncheck(rescale_to_unit)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// rescale_to_unit [1.0 2.0 3.0 4.0 5.0] // [0.0 0.25 0.5 0.75 1.0]\nfunc rescale_to_unit:[]num numbers:[]num\n    min_number := numbers[0]\n    max_number := numbers[0]\n    for n := range numbers\n        if n < min_number\n            min_number = n\n        end\n        if n > max_number\n            max_number = n\n        end\n    end\n    result:[]num\n    for n := range numbers\n        result = result + [(n - min_number)/(max_number - min_number)]\n    end\n    return result\nend\n\nfunc test\n    assert [0 1] (rescale_to_unit [2 49.9])\n    assert [1 0] (rescale_to_unit [100 49.9])\n    assert [0 0.25 0.5 0.75 1] (rescale_to_unit [1 2 3 4 5])\n    assert [0.25 0 1 0.5 0.75] (rescale_to_unit [2 1 5 3 4])\n    assert [0.25 0 1 0.5 0.75] (rescale_to_unit [12 11 15 13 14])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  returns encoded string by cycling groups of three characters.\nfunc encode:string s:string\n    // split string to groups. Each of length 3.\n    groups := group3 s\n    for i := range (len groups)\n        if (len groups[i]) == 3\n            g := groups[i]\n            groups[i] = g[1:] + g[0]\n        end\n    end\n    return join groups \"\"\nend\n\n//  takes as input string encoded with encode function. Returns decoded string.\nfunc decode:string s:string\n    groups := group3 s\n    for i := range (len groups)\n        if (len groups[i]) == 3\n            g := groups[i]\n            groups[i] = g[-1] + g[:-1]\n        end\n    end\n    return join groups \"\"\nend\n\nfunc group3:[]string s:string\n    result:[]string\n    for i := range (floor ((len s) + 2)/3)\n        startIdx := 3 * i\n        endIdx := min 3*i+3 (len s)\n        g := s[startIdx:endIdx]\n        result = result + [g]\n    end\n    return result\nend\n\nfunc test\n    s := \"lorem ipsum\"\n    assert s (decode (encode s))\n    assert \"bca\" (encode \"abc\")\n    assert \"abc\" (decode \"bca\")\n    assert \"bcad\" (encode \"abcd\")\n    assert \"abcd\" (decode \"bcad\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return encode_cyclic(encode_cyclic(s))\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n\n#END:TEST\n#START:CHECK\ncheck(decode_cyclic)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  returns encoded string by cycling groups of three characters.\nfunc encode:string s:string\n    // split string to groups. Each of length 3.\n    groups := group3 s\n    for i := range (len groups)\n        if (len groups[i]) == 3\n            g := groups[i]\n            groups[i] = g[1:] + g[0]\n        end\n    end\n    return join groups \"\"\nend\n\n//  takes as input string encoded with encode function. Returns decoded string.\nfunc decode:string s:string\n    groups := group3 s\n    for i := range (len groups)\n        if (len groups[i]) == 3\n            g := groups[i]\n            groups[i] = g[-1] + g[:-1]\n        end\n    end\n    return join groups \"\"\nend\n\nfunc group3:[]string s:string\n    result:[]string\n    for i := range (floor ((len s) + 2)/3)\n        startIdx := 3 * i\n        endIdx := min 3*i+3 (len s)\n        g := s[startIdx:endIdx]\n        result = result + [g]\n    end\n    return result\nend\n\nfunc test\n    s := \"lorem ipsum\"\n    assert s (decode (encode s))\n    assert \"bca\" (encode \"abc\")\n    assert \"abc\" (decode \"bca\")\n    assert \"bcad\" (encode \"abcd\")\n    assert \"abcd\" (decode \"bcad\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You are given a string s. If s[i] is a letter, reverse its case from lower\n// to upper or vise versa, otherwise keep it as it is. If the string contains\n// no letters, reverse the string. The function should return the resulted\n// string.\n// Examples\n// solve \"1234\" // \"4321\"\n// solve \"ab\" // \"AB\"\n// solve \"#a@C\" // \"#A@c\"\nfunc solve:string s:string\n    hasLetters := false\n    result := \"\"\n    for c := range s\n        if c >= \"a\" and c <= \"z\"\n            hasLetters = true\n            result = result + (upper c)\n        else if c >= \"A\" and c <= \"Z\"\n            hasLetters = true\n            result = result + (lower c)\n        else\n            result = result + c\n        end\n    end\n    if hasLetters\n        return result\n    end\n    reversed := \"\"\n    for c := range result\n        reversed = c + reversed\n    end\n    return reversed\nend\n\nfunc test\n    assert \"aSdF\" (solve \"AsDf\")\n    assert \"4321\" (solve \"1234\")\n    assert \"AB\" (solve \"ab\")\n    assert \"#A@c\" (solve \"#a@C\")\n    assert \"#aSDFw^45\" (solve \"#AsdfW^45\")\n    assert \"2@6#\" (solve \"#6@2\")\n    assert \"#$A^d\" (solve \"#$a^D\")\n    assert \"#CCC\" (solve \"#ccc\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n\n#END:TEST\n#START:CHECK\ncheck(solve)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given a string s. If s[i] is a letter, reverse its case from lower\n// to upper or vise versa, otherwise keep it as it is. If the string contains\n// no letters, reverse the string. The function should return the resulted\n// string.\n// Examples\n// solve \"1234\" // \"4321\"\n// solve \"ab\" // \"AB\"\n// solve \"#a@C\" // \"#A@c\"\nfunc solve:string s:string\n    hasLetters := false\n    result := \"\"\n    for c := range s\n        if c >= \"a\" and c <= \"z\"\n            hasLetters = true\n            result = result + (upper c)\n        else if c >= \"A\" and c <= \"Z\"\n            hasLetters = true\n            result = result + (lower c)\n        else\n            result = result + c\n        end\n    end\n    if hasLetters\n        return result\n    end\n    reversed := \"\"\n    for c := range result\n        reversed = c + reversed\n    end\n    return reversed\nend\n\nfunc test\n    assert \"aSdF\" (solve \"AsDf\")\n    assert \"4321\" (solve \"1234\")\n    assert \"AB\" (solve \"ab\")\n    assert \"#A@c\" (solve \"#a@C\")\n    assert \"#aSDFw^45\" (solve \"#AsdfW^45\")\n    assert \"2@6#\" (solve \"#6@2\")\n    assert \"#$A^d\" (solve \"#$a^D\")\n    assert \"#CCC\" (solve \"#ccc\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //\"Return list with elements incremented by 1.\n// inc [1 2 3] // [2 3 4]\n// inc [5 3 5 2 3 3 9 0 123] // [6 4 6 3 4 4 10 1 124]\nfunc inc:[]num nums:[]num\n    result := nums[:]\n    for i := range (len result)\n        result[i] = result[i] + 1\n    end\n    return result\nend\n\nfunc test\n    assert [] (inc [])\n    assert [4 3 2] (inc [3 2 1])\n    assert [6 3 6 3 4 4 10 1 124] (inc [5 2 5 2 3 3 9 0 123])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return [(e + 1) for e in l]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n\n#END:TEST\n#START:CHECK\ncheck(incr_list)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //\"Return list with elements incremented by 1.\n// inc [1 2 3] // [2 3 4]\n// inc [5 3 5 2 3 3 9 0 123] // [6 4 6 3 4 4 10 1 124]\nfunc inc:[]num nums:[]num\n    result := nums[:]\n    for i := range (len result)\n        result[i] = result[i] + 1\n    end\n    return result\nend\n\nfunc test\n    assert [] (inc [])\n    assert [4 3 2] (inc [3 2 1])\n    assert [6 3 6 3 4 4 10 1 124] (inc [5 2 5 2 3 3 9 0 123])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return 2^n modulo p. (careful with overflow!)\n// modp 3 5 // 3\n// modp 1101 101 // 2\n// modp 0 101 // 1\n// modp 3 11 // 8\n// modp 100 101 // 1\nfunc modpn:num n:num p:num\n    result := 1\n    for range n\n        result = (2 * result) % p\n    end\n    return result\nend\n\nfunc test\n    assert 3 (modpn 3 5)\n    assert 2 (modpn 1101 101)\n    assert 1 (modpn 0 101)\n    assert 8 (modpn 3 11)\n    assert 1 (modpn 100 101)\n    assert 4 (modpn 30 5)\n    assert 3 (modpn 31 5)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\n#END:TEST\n#START:CHECK\ncheck(modp)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return 2^n modulo p. (careful with overflow!)\n// modp 3 5 // 3\n// modp 1101 101 // 2\n// modp 0 101 // 1\n// modp 3 11 // 8\n// modp 100 101 // 1\nfunc modpn:num n:num p:num\n    result := 1\n    for range n\n        result = (2 * result) % p\n    end\n    return result\nend\n\nfunc test\n    assert 3 (modpn 3 5)\n    assert 2 (modpn 1101 101)\n    assert 1 (modpn 0 101)\n    assert 8 (modpn 3 11)\n    assert 1 (modpn 100 101)\n    assert 4 (modpn 30 5)\n    assert 3 (modpn 31 5)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Write a function countNums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// countNums [] // 0\n// countNums [-1, 11, -11] // 1\n// countNums [1, 1, 2] // 3\nfunc countNums:num nums:[]num\n    result := 0\n    for n := range nums\n        if n > 0\n            result = result + 1\n        else\n            sum := digitSum n\n            if sum > 0\n                result = result + 1\n            end\n        end\n    end\n    return result\nend\n\nfunc digitSum:num n:num\n    if n >= 0\n        return 0\n    end\n    s := (sprint n)\n    sum := -(str2num s[1])\n    for digit := range s[2:]\n        sum = sum + (str2num digit)\n    end\n    return sum\nend\n\nfunc test\n    assert 0 (countNums [])\n    assert 0 (countNums [-1 -2 0])\n    assert 6 (countNums [1 1 2 -2 3 4 5])\n    assert 5 (countNums [1 6 9 -6 0 1 5])\n    assert 4 (countNums [1 100 98 -7 1 -1])\n    assert 5 (countNums [12 23 34 -45 -56 0])\n    assert 1 (countNums [-0 1])\n    assert 1 (countNums [1])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(count_nums)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Write a function countNums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// countNums [] // 0\n// countNums [-1, 11, -11] // 1\n// countNums [1, 1, 2] // 3\nfunc countNums:num nums:[]num\n    result := 0\n    for n := range nums\n        if n > 0\n            result = result + 1\n        else\n            sum := digitSum n\n            if sum > 0\n                result = result + 1\n            end\n        end\n    end\n    return result\nend\n\nfunc digitSum:num n:num\n    if n >= 0\n        return 0\n    end\n    s := (sprint n)\n    sum := -(str2num s[1])\n    for digit := range s[2:]\n        sum = sum + (str2num digit)\n    end\n    return sum\nend\n\nfunc test\n    assert 0 (countNums [])\n    assert 0 (countNums [-1 -2 0])\n    assert 6 (countNums [1 1 2 -2 3 4 5])\n    assert 5 (countNums [1 6 9 -6 0 1 5])\n    assert 4 (countNums [1 100 98 -7 1 -1])\n    assert 5 (countNums [12 23 34 -45 -56 0])\n    assert 1 (countNums [-0 1])\n    assert 1 (countNums [1])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// f 5 // [1, 2, 6, 24, 15]\nfunc f:[]num n:num\n    result:[]num\n    sum := 0\n    fact := 1\n    for i := range 1 n+1\n        sum = sum + i\n        fact = fact * i\n        if i % 2 == 0 // sum\n            result = result + [fact]\n        else\n            result = result + [sum]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [1 2 6 24 15] (f 5)\n    assert [1 2 6 24 15 720 28] (f 7)\n    assert [1] (f 1)\n    assert [1 2 6] (f 3)\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n\n#END:TEST\n#START:CHECK\ncheck(f)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// f 5 // [1, 2, 6, 24, 15]\nfunc f:[]num n:num\n    result:[]num\n    sum := 0\n    fact := 1\n    for i := range 1 n+1\n        sum = sum + i\n        fact = fact * i\n        if i % 2 == 0 // sum\n            result = result + [fact]\n        else\n            result = result + [sum]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [1 2 6 24 15] (f 5)\n    assert [1 2 6 24 15 720 28] (f 7)\n    assert [1] (f 1)\n    assert [1 2 6] (f 3)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Checks if given string is a palindrome\n// isPalindrome \"\" // true\n// isPalindrome \"aba\" // true\n// isPalindrome \"aaaaa\" // true\n// isPalindrome \"zbcd\" // false\nfunc isPalindrome:bool str:string\n    length := len str\n    for i := range (floor length/2)\n        if str[i] != str[-(i + 1)]\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert true (isPalindrome \"\")\n    assert true (isPalindrome \"aba\")\n    assert true (isPalindrome \"aaaaa\")\n    assert false (isPalindrome \"zbcd\")\n    assert true (isPalindrome \"xywyx\")\n    assert false (isPalindrome \"xywyz\")\n    assert false (isPalindrome \"xywzx\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n\n#END:TEST\n#START:CHECK\ncheck(is_palindrome)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Checks if given string is a palindrome\n// isPalindrome \"\" // true\n// isPalindrome \"aba\" // true\n// isPalindrome \"aaaaa\" // true\n// isPalindrome \"zbcd\" // false\nfunc isPalindrome:bool str:string\n    length := len str\n    for i := range (floor length/2)\n        if str[i] != str[-(i + 1)]\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert true (isPalindrome \"\")\n    assert true (isPalindrome \"aba\")\n    assert true (isPalindrome \"aaaaa\")\n    assert false (isPalindrome \"zbcd\")\n    assert true (isPalindrome \"xywyx\")\n    assert false (isPalindrome \"xywyz\")\n    assert false (isPalindrome \"xywzx\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a string representing a space separated lowercase letters, return a dictionary\n// of the letters with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n//\n// Example:\n// histogram \"a b c\" // {a: 1, b: 1, c: 1}\n// histogram \"a b b a\" // {a: 2, b: 2}\n// histogram \"a b c a b\" // {a: 2, b: 2}\n// histogram \"b b b b a\" // {b: 4}\n// histogram \"\" // {}\nfunc histogram:{}num s:string\n    if s == \"\"\n        return {}\n    end\n\n    m:{}num\n    arr := split s \" \"\n    for s := range arr\n        if has m s\n            m[s] = m[s] + 1\n        else\n            m[s] = 1\n        end\n    end\n    lmax := 0\n    for k := range m\n        if m[k] > lmax\n            lmax = m[k]\n        end\n    end\n    result:{}num\n    for k := range m\n        if m[k] == lmax\n            result[k] = lmax\n        end\n    end\n    return result\nend\n\nfunc test\n    assert {a:2 b:2} (histogram \"a b b a\")\n    assert {a:2 b:2} (histogram \"a b c a b\")\n    assert {a:1 b:1 c:1 d:1 g:1} (histogram \"a b c d g\")\n    assert {r:1 t:1 g:1} (histogram \"r t g\")\n    assert {b:4} (histogram \"b b b b a\")\n    assert {r:1 t:1 g:1} (histogram \"r t g\")\n    assert {} (histogram \"\")\n    assert {a:1} (histogram \"a\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(histogram)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a string representing a space separated lowercase letters, return a dictionary\n// of the letters with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n//\n// Example:\n// histogram \"a b c\" // {a: 1, b: 1, c: 1}\n// histogram \"a b b a\" // {a: 2, b: 2}\n// histogram \"a b c a b\" // {a: 2, b: 2}\n// histogram \"b b b b a\" // {b: 4}\n// histogram \"\" // {}\nfunc histogram:{}num s:string\n    if s == \"\"\n        return {}\n    end\n\n    m:{}num\n    arr := split s \" \"\n    for s := range arr\n        if has m s\n            m[s] = m[s] + 1\n        else\n            m[s] = 1\n        end\n    end\n    lmax := 0\n    for k := range m\n        if m[k] > lmax\n            lmax = m[k]\n        end\n    end\n    result:{}num\n    for k := range m\n        if m[k] == lmax\n            result[k] = lmax\n        end\n    end\n    return result\nend\n\nfunc test\n    assert {a:2 b:2} (histogram \"a b b a\")\n    assert {a:2 b:2} (histogram \"a b c a b\")\n    assert {a:1 b:1 c:1 d:1 g:1} (histogram \"a b c d g\")\n    assert {r:1 t:1 g:1} (histogram \"r t g\")\n    assert {b:4} (histogram \"b b b b a\")\n    assert {r:1 t:1 g:1} (histogram \"r t g\")\n    assert {} (histogram \"\")\n    assert {a:1} (histogram \"a\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// words \"Hi, my name is John\" // [\"Hi\" \"my\" \"name\" \"is\" \"John\"]\n// words \"One, two, three, four, five, six\" // [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"]\nfunc words:[]string s:string\n    wordArr := split s \" \"\n    result:[]string\n    for word := range wordArr\n        w := trim word \", \"\n        if w != \"\"\n            result = result + [w]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [\"Hi\" \"my\" \"name\" \"is\" \"John\"] (words \"Hi, my name is John\")\n    assert [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"] (words \"One, two, three, four, five, six\")\n    assert [\"Hi\" \"my\" \"name\"] (words \"Hi, my name\")\n    assert [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"] (words \"One,, two, three, four, five, six,\")\n    assert [] (words \"\")\n    assert [\"ahmed\" \"gamal\"] (words \"ahmed     , gamal\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n\n#END:TEST\n#START:CHECK\ncheck(words_string)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// words \"Hi, my name is John\" // [\"Hi\" \"my\" \"name\" \"is\" \"John\"]\n// words \"One, two, three, four, five, six\" // [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"]\nfunc words:[]string s:string\n    wordArr := split s \" \"\n    result:[]string\n    for word := range wordArr\n        w := trim word \", \"\n        if w != \"\"\n            result = result + [w]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [\"Hi\" \"my\" \"name\" \"is\" \"John\"] (words \"Hi, my name is John\")\n    assert [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"] (words \"One, two, three, four, five, six\")\n    assert [\"Hi\" \"my\" \"name\"] (words \"Hi, my name\")\n    assert [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"] (words \"One,, two, three, four, five, six,\")\n    assert [] (words \"\")\n    assert [\"ahmed\" \"gamal\"] (words \"ahmed     , gamal\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // removeVowels is a function that takes string and returns string without vowels.\n// removeVowels \"\" // \"\"\n// removeVowels \"abcdefghijklm\"  // \"bcdfghjklm\"\n// removeVowels \"abcdef\"  // \"bcdf\"\n// removeVowels \"aaaaa\"  // \"\n// removeVowels \"aaBAA\"  // \"B\"\n// removeVowels \"zbcd\"  // \"zbcd\"\nfunc removeVowels:string str:string\n    vowels := {a:true e:true i:true o:true u:true A:true E:true I:true O:true U:true}\n    result := \"\"\n    for ch := range str\n        if !(has vowels ch)\n            result = result + ch\n        end\n    end\n    return result\nend\n\nfunc test\n    assert \"\" (removeVowels \"\")\n    assert \"bcdfghjklm\" (removeVowels \"abcdefghijklm\")\n    assert \"fdcb\" (removeVowels \"fedcba\")\n    assert \"\" (removeVowels \"eeeee\")\n    assert \"cB\" (removeVowels \"acBAA\")\n    assert \"cB\" (removeVowels \"EcBOO\")\n    assert \"ybcd\" (removeVowels \"ybcd\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n\n#END:TEST\n#START:CHECK\ncheck(remove_vowels)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // removeVowels is a function that takes string and returns string without vowels.\n// removeVowels \"\" // \"\"\n// removeVowels \"abcdefghijklm\"  // \"bcdfghjklm\"\n// removeVowels \"abcdef\"  // \"bcdf\"\n// removeVowels \"aaaaa\"  // \"\n// removeVowels \"aaBAA\"  // \"B\"\n// removeVowels \"zbcd\"  // \"zbcd\"\nfunc removeVowels:string str:string\n    vowels := {a:true e:true i:true o:true u:true A:true E:true I:true O:true U:true}\n    result := \"\"\n    for ch := range str\n        if !(has vowels ch)\n            result = result + ch\n        end\n    end\n    return result\nend\n\nfunc test\n    assert \"\" (removeVowels \"\")\n    assert \"bcdfghjklm\" (removeVowels \"abcdefghijklm\")\n    assert \"fdcb\" (removeVowels \"fedcba\")\n    assert \"\" (removeVowels \"eeeee\")\n    assert \"cB\" (removeVowels \"acBAA\")\n    assert \"cB\" (removeVowels \"EcBOO\")\n    assert \"ybcd\" (removeVowels \"ybcd\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // brackets is a string of \"<\" and \">\". return true if every opening bracket\n// has a corresponding closing bracket.\n//\n// correctBracketing \"<\" // false\n// correctBracketing \"<>\" // true\n// correctBracketing \"<<><>>\" // true\n// correctBracketing \"><<>\" // false\nfunc checkBrackets:bool str:string\n    depth := 0\n    for ch := range str\n        if ch == \"<\"\n            depth = depth + 1\n        else\n            depth = depth - 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n\nfunc test\n    assert true (checkBrackets \"\")\n    assert true (checkBrackets \"<>\")\n    assert true (checkBrackets \"<<><>>\")\n    assert true (checkBrackets \"<><><<><>><>\")\n    assert true (checkBrackets \"<><><<<><><>><>><<><><<>>>\")\n    assert false (checkBrackets \"<<<><>>>>\")\n    assert false (checkBrackets \"><<>\")\n    assert false (checkBrackets \"<\")\n    assert false (checkBrackets \"<<<<\")\n    assert false (checkBrackets \">\")\n    assert false (checkBrackets \"<<>\")\n    assert false (checkBrackets \"<><><<><>><>><<>\")\n    assert false (checkBrackets \"<><><<><>><>>><>\")\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n\n#END:TEST\n#START:CHECK\ncheck(correct_bracketing)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // brackets is a string of \"<\" and \">\". return true if every opening bracket\n// has a corresponding closing bracket.\n//\n// correctBracketing \"<\" // false\n// correctBracketing \"<>\" // true\n// correctBracketing \"<<><>>\" // true\n// correctBracketing \"><<>\" // false\nfunc checkBrackets:bool str:string\n    depth := 0\n    for ch := range str\n        if ch == \"<\"\n            depth = depth + 1\n        else\n            depth = depth - 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n\nfunc test\n    assert true (checkBrackets \"\")\n    assert true (checkBrackets \"<>\")\n    assert true (checkBrackets \"<<><>>\")\n    assert true (checkBrackets \"<><><<><>><>\")\n    assert true (checkBrackets \"<><><<<><><>><>><<><><<>>>\")\n    assert false (checkBrackets \"<<<><>>>>\")\n    assert false (checkBrackets \"><<>\")\n    assert false (checkBrackets \"<\")\n    assert false (checkBrackets \"<<<<\")\n    assert false (checkBrackets \">\")\n    assert false (checkBrackets \"<<>\")\n    assert false (checkBrackets \"<><><<><>><>><<>\")\n    assert false (checkBrackets \"<><><<><>><>>><>\")\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return sorted unique common elements for two lists.\n// common [1 4 3 34 653 2 5] [5 7 1 5 9 653 121] // [1 5 653]\n// common [5 3 2 8] [3 2] // [2 3]\nfunc common:[]num nums1:[]num nums2:[]num\n    s1 := set nums1\n    s2 := set nums2\n    s3 := intersection s1 s2\n    result := numArr s3\n    sort result\n    return result\nend\n\nfunc set:{}bool nums:[]num\n    result:{}bool\n    for n := range nums\n        result[sprint n] = true\n    end\n    return result\nend\n\nfunc intersection:{}bool s1:{}bool s2:{}bool\n    result:{}bool\n    for k := range s1\n        if has s2 k\n            result[k] = true\n        end\n    end\n    return result\nend\n\nfunc numArr:[]num s:{}bool\n    result:[]num\n    for k := range s\n        n := str2num k\n        result = result + [n]\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 5 653] (common [1 4 3 34 653 2 5] [5 7 1 5 9 653 121])\n    assert [2 3] (common [5 3 2 8] [3 2])\n    assert [2 3 4] (common [4 3 2 8] [3 2 4])\n    assert [] (common [4 3 2 8] [])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n\n#END:TEST\n#START:CHECK\ncheck(common)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return sorted unique common elements for two lists.\n// common [1 4 3 34 653 2 5] [5 7 1 5 9 653 121] // [1 5 653]\n// common [5 3 2 8] [3 2] // [2 3]\nfunc common:[]num nums1:[]num nums2:[]num\n    s1 := set nums1\n    s2 := set nums2\n    s3 := intersection s1 s2\n    result := numArr s3\n    sort result\n    return result\nend\n\nfunc set:{}bool nums:[]num\n    result:{}bool\n    for n := range nums\n        result[sprint n] = true\n    end\n    return result\nend\n\nfunc intersection:{}bool s1:{}bool s2:{}bool\n    result:{}bool\n    for k := range s1\n        if has s2 k\n            result[k] = true\n        end\n    end\n    return result\nend\n\nfunc numArr:[]num s:{}bool\n    result:[]num\n    for k := range s\n        n := str2num k\n        result = result + [n]\n    end\n    return result\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [1 5 653] (common [1 4 3 34 653 2 5] [5 7 1 5 9 653 121])\n    assert [2 3] (common [5 3 2 8] [3 2])\n    assert [2 3 4] (common [4 3 2 8] [3 2 4])\n    assert [] (common [4 3 2 8] [])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return list of prime factors of given integer in the order from smallest to\n// largest. Each of the factors should be listed number of times\n// corresponding to how many times it appears in factorization. Input number\n// should be equal to the product of all factors\n// factorize 8 // [2, 2, 2]\n// factorize 25 // [5, 5]\n// factorize 70 // [2, 5, 7]\nfunc factorize:[]num n:num\n    result:[]num\n    i := 2\n    while i <= (sqrt n) + 1\n        if n % i == 0\n            result = result + [i]\n            n = n / i\n        else\n            i = i + 1\n        end\n    end\n    if n > 1\n        result = result + [n]\n    end\n    return result\nend\n\nfunc test\n    assert [2] (factorize 2)\n    assert [2 2] (factorize 4)\n    assert [2 2 2] (factorize 8)\n    assert [3 19] (factorize 3*19)\n    assert [3 3 19 19] (factorize 3*19*3*19)\n    assert [3 3 3 19 19 19] (factorize 3*19*3*19*3*19)\n    assert [3 19 19 19] (factorize 3*19*19*19)\n    assert [2 3 3] (factorize 3*2*3)\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n\n#END:TEST\n#START:CHECK\ncheck(factorize)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return list of prime factors of given integer in the order from smallest to\n// largest. Each of the factors should be listed number of times\n// corresponding to how many times it appears in factorization. Input number\n// should be equal to the product of all factors\n// factorize 8 // [2, 2, 2]\n// factorize 25 // [5, 5]\n// factorize 70 // [2, 5, 7]\nfunc factorize:[]num n:num\n    result:[]num\n    i := 2\n    while i <= (sqrt n) + 1\n        if n % i == 0\n            result = result + [i]\n            n = n / i\n        else\n            i = i + 1\n        end\n    end\n    if n > 1\n        result = result + [n]\n    end\n    return result\nend\n\nfunc test\n    assert [2] (factorize 2)\n    assert [2 2] (factorize 4)\n    assert [2 2 2] (factorize 8)\n    assert [3 19] (factorize 3*19)\n    assert [3 3 19 19] (factorize 3*19*3*19)\n    assert [3 3 3 19 19 19] (factorize 3*19*3*19*3*19)\n    assert [3 19 19 19] (factorize 3*19*19*19)\n    assert [2 3 3] (factorize 3*2*3)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Return maximum element in the list.\n// max_element([1, 2, 3]) // 3\n// max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) // 123\nfunc max_element:num nums:[]num\n    result := nums[0]\n    for n := range nums[1:]\n        if result < n\n            result = n\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 3 (max_element [1 2 3])\n    assert 124 (max_element [5 3 -5 2 -3 3 9 0 124 1 -10])\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n\n#END:TEST\n#START:CHECK\ncheck(max_element)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Return maximum element in the list.\n// max_element([1, 2, 3]) // 3\n// max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) // 123\nfunc max_element:num nums:[]num\n    result := nums[0]\n    for n := range nums[1:]\n        if result < n\n            result = n\n        end\n    end\n    return result\nend\n\nfunc test\n    assert 3 (max_element [1 2 3])\n    assert 124 (max_element [5 3 -5 2 -3 3 9 0 124 1 -10])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy //  Imagine a road that's a perfectly straight infinitely long line.\n//  n cars are driving left to right;  simultaneously, a different set of n cars\n//  are driving right to left.   The two sets of cars start out being very far from\n//  each other.  All cars move in the same speed.  Two cars are said to collide\n//  when a car that's moving left to right hits a car that's moving right to left.\n//  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n//  in their trajectory as if they did not collide.\n//\n//  This function outputs the number of such collisions.\nfunc collisions:num n:num\n    return n * n\nend\n\nfunc test\n    assert 4 (collisions 2)\n    assert 9 (collisions 3)\n    assert 16 (collisions 4)\n    assert 64 (collisions 8)\n    assert 100 (collisions 10)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return n**2\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n\n#END:TEST\n#START:CHECK\ncheck(car_race_collision)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy //  Imagine a road that's a perfectly straight infinitely long line.\n//  n cars are driving left to right;  simultaneously, a different set of n cars\n//  are driving right to left.   The two sets of cars start out being very far from\n//  each other.  All cars move in the same speed.  Two cars are said to collide\n//  when a car that's moving left to right hits a car that's moving right to left.\n//  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n//  in their trajectory as if they did not collide.\n//\n//  This function outputs the number of such collisions.\nfunc collisions:num n:num\n    return n * n\nend\n\nfunc test\n    assert 4 (collisions 2)\n    assert 9 (collisions 3)\n    assert 16 (collisions 4)\n    assert 64 (collisions 8)\n    assert 100 (collisions 10)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // In this exercise you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n//\n// It must be implemented like this:\n// >>> binSort [1 5 2 3 4] // [1 2 4 3 5]\n// >>> binSort [-2 -3 -4 -5 -6] // [-6 -5 -4 -3 -2]\n// >>> binSort [1 0 2 3 4] // [0 1 2 4 3]\nfunc binSort:[]num nums:[]num\n    arr := nums[:]\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if moreOnes arr[i] arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\n    return arr\nend\n\nfunc moreOnes:bool n1:num n2:num\n    ones1 := binOnes n1\n    ones2 := binOnes n2\n    if ones1 == ones2\n        return n1 > n2\n    end\n    return ones1 > ones2\nend\n\nfunc binOnes:num n:num\n    n = abs n\n    result := 0\n    while n > 0\n        if n % 2 == 1\n            result = result + 1\n        end\n        n = floor n/2\n    end\n    return result\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend\n\nfunc test\n    assert [1 2 4 3 5] (binSort [1 5 2 3 4])\n    assert [-4 -2 -6 -5 -3] (binSort [-2 -3 -4 -5 -6])\n    assert [0 1 2 4 3] (binSort [1 0 2 3 4])\n    assert [] (binSort [])\n    assert [2 2 4 4 3 3 5 5 5 7 77] (binSort [2 5 77 4 5 3 5 7 2 3 4])\n    assert [32 3 5 6 12 44] (binSort [3 6 44 12 32 5])\n    assert [2 4 8 16 32] (binSort [2 4 8 16 32])\n    assert [2 4 8 16 32] (binSort [2 4 8 16 32])\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n#END:TEST\n#START:CHECK\ncheck(sort_array)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // In this exercise you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n//\n// It must be implemented like this:\n// >>> binSort [1 5 2 3 4] // [1 2 4 3 5]\n// >>> binSort [-2 -3 -4 -5 -6] // [-6 -5 -4 -3 -2]\n// >>> binSort [1 0 2 3 4] // [0 1 2 4 3]\nfunc binSort:[]num nums:[]num\n    arr := nums[:]\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if moreOnes arr[i] arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\n    return arr\nend\n\nfunc moreOnes:bool n1:num n2:num\n    ones1 := binOnes n1\n    ones2 := binOnes n2\n    if ones1 == ones2\n        return n1 > n2\n    end\n    return ones1 > ones2\nend\n\nfunc binOnes:num n:num\n    n = abs n\n    result := 0\n    while n > 0\n        if n % 2 == 1\n            result = result + 1\n        end\n        n = floor n/2\n    end\n    return result\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend\n\nfunc test\n    assert [1 2 4 3 5] (binSort [1 5 2 3 4])\n    assert [-4 -2 -6 -5 -3] (binSort [-2 -3 -4 -5 -6])\n    assert [0 1 2 4 3] (binSort [1 0 2 3 4])\n    assert [] (binSort [])\n    assert [2 2 4 4 3 3 5 5 5 7 77] (binSort [2 5 77 4 5 3 5 7 2 3 4])\n    assert [32 3 5 6 12 44] (binSort [3 6 44 12 32 5])\n    assert [2 4 8 16 32] (binSort [2 4 8 16 32])\n    assert [2 4 8 16 32] (binSort [2 4 8 16 32])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // Filter given list of any values for num\n// filterInts [\"a\", 3.14, 5] // [5]\n// filterInts [1, 2, 3, \"abc\", {}, []] // [1, 2, 3]\nfunc filterInts:[]num values:[]any\n    result:[]num\n    for a := range values\n        if (typeof a) == \"num\"\n            n := a.(num)\n            if n == (round n)\n                result = result + [n]\n            end\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [] (filterInts [])\n    assert [4 9] (filterInts [4 {} [] 23.2 9 \"adasd\"])\n    assert [3 3 3] (filterInts [3 \"c\" 3 3 \"a\" \"b\"])\nend\n\ntest",
  "input-python #START:PROMPT\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    return [x for x in values if isinstance(x, int)]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\n#END:TEST\n#START:CHECK\ncheck(filter_integers)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // Filter given list of any values for num\n// filterInts [\"a\", 3.14, 5] // [5]\n// filterInts [1, 2, 3, \"abc\", {}, []] // [1, 2, 3]\nfunc filterInts:[]num values:[]any\n    result:[]num\n    for a := range values\n        if (typeof a) == \"num\"\n            n := a.(num)\n            if n == (round n)\n                result = result + [n]\n            end\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [] (filterInts [])\n    assert [4 9] (filterInts [4 {} [] 23.2 9 \"adasd\"])\n    assert [3 3 3] (filterInts [3 \"c\" 3 3 \"a\" \"b\"])\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n//    fib4(0) -> 0\n//    fib4(1) -> 0\n//    fib4(2) -> 2\n//    fib4(3) -> 0\n//    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n//    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n//    fib4 5 // 4\n//    fib4 6 // 8\n//    fib4 7 // 14\nfunc fib4:num n:num\n    result := [0 0 2 0]\n    if n < 4\n        return result[n]\n    end\n    for range n-3\n        result = result + [result[-1]+result[-2]+result[-3]+result[-4]]\n    end\n    return result[-1]\nend\n\nfunc test\n    assert 4 (fib4 5)\n    assert 28 (fib4 8)\n    assert 104 (fib4 10)\n    assert 386 (fib4 12)\nend\n\ntest",
  "input-python #START:PROMPT\n\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\n#END:SOLUTION\n#START:TEST\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\n#END:TEST\n#START:CHECK\ncheck(fib4)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n//    fib4(0) -> 0\n//    fib4(1) -> 0\n//    fib4(2) -> 2\n//    fib4(3) -> 0\n//    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n//    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n//    fib4 5 // 4\n//    fib4 6 // 8\n//    fib4 7 // 14\nfunc fib4:num n:num\n    result := [0 0 2 0]\n    if n < 4\n        return result[n]\n    end\n    for range n-3\n        result = result + [result[-1]+result[-2]+result[-3]+result[-4]]\n    end\n    return result[-1]\nend\n\nfunc test\n    assert 4 (fib4 5)\n    assert 28 (fib4 8)\n    assert 104 (fib4 10)\n    assert 386 (fib4 12)\nend\n\ntest",
  "input: ",
  "input-text ",
  "input-evy // You are given a word. Your task is to find the closest vowel that stands between\n// two consonants from the right side of the word (case sensitive).\n//\n// Vowels in the beginning and ending don't count. Return empty string if you didn't\n// find any vowel that met the above condition.\n//\n// You may assume that the given string contains English letter only.\n//\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunc findVowel:string s:string\n    if (len s) < 3\n        return \"\"\n    end\n    vowels := {a:true e:true i:true o:true u:true A:true E:true O:true U:true I:true}\n    for i := range (len s)-2 0 -1\n        if (has vowels s[i]) and !(has vowels s[i + 1]) and !(has vowels s[i - 1])\n            return s[i]\n        end\n    end\n    return \"\"\nend\n\nfunc test\n    assert \"u\" (findVowel \"yogurt\")\n    assert \"u\" (findVowel \"full\")\n    assert \"\" (findVowel \"easy\")\n    assert \"\" (findVowel \"eAsy\")\n    assert \"\" (findVowel \"ali\")\n    assert \"a\" (findVowel \"bad\")\n    assert \"o\" (findVowel \"most\")\n    assert \"\" (findVowel \"ab\")\n    assert \"\" (findVowel \"ba\")\n    assert \"\" (findVowel \"quick\")\n    assert \"i\" (findVowel \"anime\")\n    assert \"\" (findVowel \"Asia\")\n    assert \"o\" (findVowel \"Above\")\nend\n\ntest",
  "input-python #START:PROMPT\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n#END:PROMPT\n#START:SOLUTION\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\n#END:SOLUTION\n#START:TEST\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n#END:TEST\n#START:CHECK\ncheck(get_closest_vowel)\n#END:CHECK",
  "output: ",
  "output-text ",
  "output-evy // You are given a word. Your task is to find the closest vowel that stands between\n// two consonants from the right side of the word (case sensitive).\n//\n// Vowels in the beginning and ending don't count. Return empty string if you didn't\n// find any vowel that met the above condition.\n//\n// You may assume that the given string contains English letter only.\n//\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunc findVowel:string s:string\n    if (len s) < 3\n        return \"\"\n    end\n    vowels := {a:true e:true i:true o:true u:true A:true E:true O:true U:true I:true}\n    for i := range (len s)-2 0 -1\n        if (has vowels s[i]) and !(has vowels s[i + 1]) and !(has vowels s[i - 1])\n            return s[i]\n        end\n    end\n    return \"\"\nend\n\nfunc test\n    assert \"u\" (findVowel \"yogurt\")\n    assert \"u\" (findVowel \"full\")\n    assert \"\" (findVowel \"easy\")\n    assert \"\" (findVowel \"eAsy\")\n    assert \"\" (findVowel \"ali\")\n    assert \"a\" (findVowel \"bad\")\n    assert \"o\" (findVowel \"most\")\n    assert \"\" (findVowel \"ab\")\n    assert \"\" (findVowel \"ba\")\n    assert \"\" (findVowel \"quick\")\n    assert \"i\" (findVowel \"anime\")\n    assert \"\" (findVowel \"Asia\")\n    assert \"o\" (findVowel \"Above\")\nend\n\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    def canPermutePalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        dic = {}\n        for c in s:\n            dic[c] = dic.get(c, 0) + 1\n        odd, even = 0, 0\n        for c in dic:\n            if dic[c] % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        if odd <= 1:\n            return True\n        return False",
  "output: ",
  "output-text ",
  "output-evy func canPermutePalindrome:bool s:string\n    dic:{}num\n    for c := range s\n        if !(has dic c)\n            dic[c] = 0\n        end\n        dic[c] = dic[c] + 1\n    end\n    odd := 0\n    for c := range dic\n        if dic[c] % 2 == 1\n            odd = odd + 1\n        end\n    end\n    return odd <= 1\nend\n\nfunc test\n    assert true==(canPermutePalindrome \"code\")\n    assert true==(canPermutePalindrome \"aab\")\n    assert false==(canPermutePalindrome \"carerac\")\n    assert true==(canPermutePalindrome \"a\")\n    assert true==(canPermutePalindrome \"aa\")\n    assert true==(canPermutePalindrome \"civic\")\n    assert false==(canPermutePalindrome \"car\")\nend",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python # class Solution(object):\n#     def fourSum(self, nums, target):\n#         \"\"\"\n#         :type nums: List[int]\n#         :type target: int\n#         :rtype: List[List[int]]\n#         \"\"\"\n\n\nclass Solution(object):\n    def fourSum(self, nums, target):\n        sort_nums = sorted(nums)\n        ls = len(nums)\n        res = {}\n        pairs = {}\n        for i in range(ls - 3):\n            for j in range(i + 1, ls - 2):\n                res_2 = sort_nums[i] + sort_nums[j]\n                try:\n                    pairs[target - res_2].append([i, j])\n                except KeyError:\n                    pairs[target - res_2] = [[i, j]]\n        for key, temp in pairs.items():\n            for pair in temp:\n                j = pair[1] + 1\n                k = ls - 1\n                while j < k:\n                    current = sort_nums[j] + sort_nums[k]\n                    if current == key:\n                        result = (sort_nums[pair[0]], sort_nums[pair[1]], sort_nums[j], sort_nums[k])\n                        res[result] = True\n                        j += 1\n                    elif current < key:\n                        j += 1\n                    else:\n                        k -= 1\n        return res.keys()\n\n    # def fourSum(self, nums, target):\n    #     # https://leetcode.com/discuss/89989/why-is-python-o-n-3-tle\n    #     index_pairs = dict()\n    #     combos = dict()\n    #     n = len(nums)\n    #     for i in range(0,n):\n    #         for j in range(i+1,n):\n    #             sum = nums[i] + nums[j]\n    #             if index_pairs.get(target - sum) is not None:\n    #                 for pair in index_pairs[target - sum]:\n    #                     if i != pair[0] and i != pair[1] and j != pair[0] and j != pair[1]: # Avoid overuse\n    #                         combo = sorted((nums[i], nums[j], nums[pair[0]], nums[pair[1]])) # Avoid duplicate\n    #                         combos[tuple(combo)] = True\n    #             if index_pairs.get(sum) is not None:\n    #                 index_pairs[sum].append((i,j))\n    #             else:\n    #                 index_pairs[sum] = [(i,j)]\n    #     return combos.keys()\n\nif __name__ == '__main__':\n    # begin\n    s = Solution()\n    print s.fourSum([0, 0, 0, 0], 0)",
  "output: ",
  "output-text ",
  "output-evy func fourSum:[]num nums:[]num target:num\n    sort_nums := nums[:]\n    sort sort_nums\n    ls := len nums\n    res := {}\n    pairs:{}[][]num\n    for i := range ls-3\n        for j := range i+1 (ls - 2)\n            res_2 := sort_nums[i] + sort_nums[j]\n            key := (sprintf \"%v\" (target - res_2))\n            if has pairs key\n                pairs[key] = pairs[key] + [[i j]]\n            else\n                pairs[key] = [[i j]]\n            end\n        end\n    end\n    for key := range pairs\n        temp := pairs[key]\n        for pair := range temp\n            j := pair[1] + 1\n            k := ls - 1\n            while j < k\n                current := (sprint \"%v\" sort_nums[j]+sort_nums[k])\n                if current == key\n                    result := [sort_nums[pair[0]] sort_nums[pair[1]] sort_nums[j] sort_nums[k]]\n                    res[sprintf \"%v\" result] = true\n                    j = j + 1\n                else if current < key\n                    j = j + 1\n                else\n                    k = k - 1\n                end\n            end\n        end\n    end\n    resultArr:[]num\n    for key := range res\n        resultArr = resultArr + [(str2num key)]\n    end\n    return resultArr\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    print (fourSum [0 0 0 0] 0)\nend\n\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    # def shortestDistance(self, words, word1, word2):\n    #     \"\"\"\n    #     :type words: List[str]\n    #     :type word1: str\n    #     :type word2: str\n    #     :rtype: int\n    #     \"\"\"\n    #     indexes = []\n    #     for index, word in enumerate(words):\n    #         if word1 == word:\n    #             indexes.append((index, 1))\n    #         elif word2 == word:\n    #             indexes.append((index, 2))\n    #     ls, min_range = len(indexes), len(words)\n    #     for i in range(ls - 1):\n    #         if indexes[i][1] == indexes[i + 1][1]:\n    #             continue\n    #         curr_range = abs(indexes[i][0] - indexes[i + 1][0])\n    #         if curr_range < min_range:\n    #             min_range = curr_range\n    #     return min_range\n\n    def shortestDistance(self, words, word1, word2):\n        index1 = index2 = -1\n        res = len(words)\n        for index, word in enumerate(words):\n            if word1 == word:\n                index1 = index\n            elif word2 == word:\n                index2 = index\n            if index1 != -1 and index2 != -1:\n                res = min(res, abs(index1 - index2))\n        return res",
  "output: ",
  "output-text ",
  "output-evy func shortestDistance:num words:[]string word1:string word2:string\n    index1 := -1\n    index2 := -1\n    minDistance := len words\n    for i := range minDistance\n        word := words[i]\n        if word1 == word\n            index1 = i\n        else if word2 == word\n            index2 = i\n        end\n        if index1 != -1 and index2 != -1\n            minDistance = min minDistance (abs (index1 - index2))\n        end\n    end\n    return minDistance\nend\n\nfunc test\n    assert 3 (shortestDistance [\"practice\" \"makes\" \"perfect\" \"coding\" \"makes\"] \"coding\" \"practice\")\n    assert 1 (shortestDistance [\"practice\" \"makes\" \"perfect\" \"coding\" \"makes\"] \"makes\" \"coding\")\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        # https://discuss.leetcode.com/topic/6650/share-my-dp-solution/2\n        if matrix is None or len(matrix) == 0:\n            return 0\n        ls_row, ls_col = len(matrix), len(matrix[0])\n        left, right, height = [0] * ls_col, [ls_col] * ls_col, [0] * ls_col\n        maxA = 0\n        for i in range(ls_row):\n            curr_left, curr_right = 0, ls_col\n            for j in range(ls_col):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            for j in range(ls_col):\n                if matrix[i][j] == '1':\n                    left[j] = max(left[j], curr_left)\n                else:\n                    left[j], curr_left = 0, j + 1\n            for j in range(ls_col - 1, -1, -1):\n                if matrix[i][j] == '1':\n                    right[j] = min(right[j], curr_right)\n                else:\n                    right[j], curr_right = ls_col, j\n            for j in range(ls_col):\n                maxA = max(maxA, (right[j] - left[j]) * height[j])\n        return maxA",
  "output: ",
  "output-text ",
  "output-evy func maximalRectangle:num matrix:[][]string\n    if matrix == [] or (len matrix) == 0\n        return 0\n    end\n    lsRow := len matrix\n    lsCol := len matrix[0]\n    left := [0] * lsCol\n    right := [lsCol] * lsCol\n    height := [0] * lsCol\n    maxA := 0\n    for i := range lsRow\n        currLeft := 0\n        currRight := lsCol\n        for j := range lsCol\n            if matrix[i][j] == \"1\"\n                height[j] = height[j] + 1\n            else\n                height[j] = 0\n            end\n        end\n        for j := range lsCol\n            if matrix[i][j] == \"1\"\n                left[j] = max left[j] currLeft\n            else\n                left[j] = 0\n                currLeft = j + 1\n            end\n        end\n        for j := range (lsCol - 1) -1 -1\n            if matrix[i][j] == \"1\"\n                right[j] = min right[j] currRight\n            else\n                right[j] = lsCol\n                currRight = j\n            end\n        end\n        for j := range lsCol\n            maxA = max maxA ((right[j] - left[j]) * height[j])\n        end\n    end\n    return maxA\nend\n\nfunc test\n    assert 6 (maximalRectangle [[\"1\" \"0\" \"1\" \"0\" \"0\"] [\"1\" \"0\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\" \"1\"] [\"1\" \"0\" \"0\" \"1\" \"0\"]])\n    assert 0 (maximalRectangle [[\"0\" \"0\"] [\"0\" \"0\"]])\n    assert 1 (maximalRectangle [[\"1\"]])\n    assert 12 (maximalRectangle [[\"1\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\"]])\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        # https: // en.wikipedia.org / wiki / Digital_root\n        if num < 10:\n            return num\n        return num - ((num - 1) / 9) * 9",
  "output: ",
  "output-text ",
  "output-evy func addDigits:num n:num\n    if n < 10\n        return n\n    end\n    return n - (floor (n - 1)/9) * 9\nend\n\nfunc test\n    assert 2 (addDigits 38)\n    assert 0 (addDigits 0)\n    assert 1 (addDigits 10)\n    assert 1 (addDigits 1)\n    assert 9 (addDigits 9)\n    assert 1 (addDigits 100)\n    assert 2 (addDigits 101)\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution:\n    # def romanToInt(self, s):\n    #     \"\"\"\n    #     :type s: str\n    #     :rtype: int\n    #     \"\"\"\n    #     roman = {'I': 1, 'V': 5, 'X': 10,\n    #              'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    #     result = 0\n    #     last = s[-1]\n    #     for t in reversed(s):\n    #         if t == 'C' and last in ['D', 'M']:\n    #             result -= roman[t]\n    #         elif t == 'X' and last in ['L', 'C']:\n    #             result -= roman[t]\n    #         elif t == 'I' and last in ['V', 'X']:\n    #             result -= roman[t]\n    #         else:\n    #             result += roman[t]\n    #         last = t\n    #     return result\n\n    def romanToInt(self, s):\n        roman = {'I': 1, 'V': 5, 'X': 10,\n                 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        prev, total = 0, 0\n        for c in s:\n            curr = roman[c]\n            total += curr\n            # need to subtract\n            if curr > prev:\n                total -= 2 * prev\n            prev = curr\n        return total",
  "output: ",
  "output-text ",
  "output-evy func romanToInt:num s:string\n    roman := {I:1 V:5 X:10 L:50 C:100 D:500 M:1000}\n    prev := 0\n    total := 0\n    for c := range s\n        curr := roman[c]\n        total = total + curr\n        if curr > prev\n            total = total - (2 * prev)\n        end\n        prev = curr\n    end\n    return total\nend\n\nfunc test\n    assert 1 (romanToInt \"I\")\n    assert 4 (romanToInt \"IV\")\n    assert 9 (romanToInt \"IX\")\n    assert 58 (romanToInt \"LVIII\")\n    assert 1994 (romanToInt \"MCMXCIV\")\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution:\n    def sumZero(self, n: int) -> List[int]:\n        prefix_sum = 0\n        res = []\n        # 1, n-1\n        for i in range(1, n):\n            res.append(i)\n            prefix_sum = prefix_sum + i\n        # sum(from 1 to n-1)\n        res.append(-prefix_sum)\n        return res\n    \n    # def sumZero(self, n: int) -> List[int]:\n    #     # 1,n-1\n    #     prefix = list(range(1, n))\n    #     # sum(from 1 to n-1)\n    #     return prefix + [-sum(prefix)]",
  "output: ",
  "output-text ",
  "output-evy func sumZero:[]num n:num\n    prefixSum := 0\n    res:[]num\n    for i := range 1 n\n        res = res + [i]\n        prefixSum = prefixSum + i\n    end\n    res = res + [-prefixSum]\n    return res\nend\n\nfunc test\n    assert [1 -1] (sumZero 2)\n    assert [1 2 -3] (sumZero 3)\n    assert [1 2 3 -6] (sumZero 4)\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python # Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    # stack\n    def flatten(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: void Do not return anything, modify root in-place instead.\n        \"\"\"\n        if root is None:\n            return\n        if root.left is None and root.right is None:\n            return\n        current = root\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            self.appendNode(stack, node.right)\n            self.appendNode(stack, node.left)\n            if current != node:\n                current.right = node\n                current.left = None\n                current = node\n\n    def appendNode(self, stack, node):\n        if node:\n            stack.append(node)\n\n    # recursive\n    # https://discuss.leetcode.com/topic/11444/my-short-post-order-traversal-java-solution-for-share/2\n    # def __init__(self):\n    #     self.prev = None\n    #\n    # def flatten(self, root):\n    #     if root is None:\n    #         return\n    #     self.flatten(root.right)\n    #     self.flatten(root.left)\n    #     root.right = self.prev\n    #     root.left = None\n    #     self.prev = root",
  "output: ",
  "output-text ",
  "output-evy func TreeNode:{}any\n    self:{}any\n    self.val = 0\n    self.left = {}\n    self.right = {}\n    return self\nend\n\nfunc Solution:{}any\n    self:{}any\n    return self\nend\n\nfunc flatten self:{}any root:{}any\n    if root == {}\n        return\n    end\n    if root.left.({}) == {} and root.right.({}) == {}\n        return\n    end\n    current:{}any\n    current = root\n    stack := []\n    stack = stack + [root]\n    while (len stack) > 0\n        node:{}any\n        node = stack[0].({}any)\n        stack = stack[1:]\n        appendNode stack node.right\n        appendNode stack node.left\n        if current != node\n            current.right = node\n            current.left = {}\n            current = node\n        end\n    end\nend\n\nfunc appendNode self:{}any stack:[]any node:{}any\n    if node != {}\n        stack = stack + [node]\n    end\nend\n\nfunc test\n    root := (TreeNode)\n    root.val = 1\n    root.left = (TreeNode)\n    root.left.val = 2\n    root.right = (TreeNode)\n    root.right.val = 5\n    root.left.left = (TreeNode)\n    root.left.left.val = 3\n    root.left.right = (TreeNode)\n    root.left.right.val = 4\n    root.right.right = (TreeNode)\n    root.right.right.val = 6\n    flatten (Solution) root\n    print root.val\n    print root.right.val\n    print root.right.right.val\n    print root.right.right.right.val\n    print root.right.right.right.right.val\n    print root.right.right.right.right.right.val\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n        temp = s.split(' ')\n        temp = [t for t in temp if len(t) > 0]\n        if len(temp) == 0:\n            return 0\n        else:\n            return len(temp[-1])",
  "output: ",
  "output-text ",
  "output-evy func lengthOfLastWord:num s:string\n    if (len s) == 0\n        return 0\n    end\n    words := split s \" \"\n    words = words[:]\n    for i := range (len words)-1 -1 -1\n        if words[i] == \"\"\n            words = words[:i] + words[i+1:]\n        end\n    end\n    if (len words) == 0\n        return 0\n    else\n        return (len words[-1])\n    end\nend\n\nfunc test\n    assert 5 (lengthOfLastWord \"Hello World\")\n    assert 0 (lengthOfLastWord \"\")\n    assert 0 (lengthOfLastWord \"   \")\n    assert 1 (lengthOfLastWord \"a\")\n    assert 1 (lengthOfLastWord \"a \")\n    assert 1 (lengthOfLastWord \" a\")\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    # def peakIndexInMountainArray(self, A):\n    #     \"\"\"\n    #     :type A: List[int]\n    #     :rtype: int\n    #     \"\"\"\n    #     i = 0\n    #     while A[i + 1] >= A[i]:\n    #         i += 1\n    #     return i\n\n    def peakIndexInMountainArray(self, A):\n        lo, hi = 0, len(A) - 1\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if A[mid] < A[mid + 1]:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo\n\nprint(Solution().peakIndexInMountainArray([0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0]))",
  "output: ",
  "output-text ",
  "output-evy func peakIndexInMountainArray:num A:[]num\n    lo := 0\n    hi := (len A) - 1\n    while lo < hi\n        mid := floor ((lo + hi) / 2)\n        if A[mid] < A[mid + 1]\n            lo = mid + 1\n        else\n            hi = mid\n        end\n    end\n    return lo\nend\n\nfunc test\n    assert 1 (peakIndexInMountainArray [0 1 0])\n    assert 1 (peakIndexInMountainArray [0 2 1 0])\n    assert 5 (peakIndexInMountainArray [0 1 2 3 4 5 4 3 2 1 0])\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    # def removeDuplicates(self, nums):\n    #     \"\"\"\n    #         :type nums: List[int]\n    #         :rtype: int\n    #         \"\"\"\n    #     ls = len(nums)\n    #     if ls <= 1:\n    #         return ls\n    #     last = nums[0]\n    #     pos = 1\n    #     for t in nums[1:]:\n    #         if t == last:\n    #             continue\n    #         else:\n    #             nums[pos] = t\n    #             pos += 1\n    #             last = t\n    #     return pos\n\n    # https://leetcode.com/articles/remove-duplicates-sorted-array/\n    def removeDuplicates(self, nums):\n        if len(nums) == 0:\n            return 0\n        left = 0\n        for i in range(1, len(nums)):\n            if nums[left] == nums[i]:\n                continue\n            else:\n                left += 1\n                nums[left] = nums[i]\n        return left + 1",
  "output: ",
  "output-text ",
  "output-evy func removeDuplicates:num nums:[]num\n    if (len nums) == 0\n        return 0\n    end\n    left := 0\n    for i := range 1 (len nums)\n        if nums[left] != nums[i]\n            left = left + 1\n            nums[left] = nums[i]\n        end\n    end\n    return left + 1\nend\n\nfunc test\n    assert 2 (removeDuplicates [1 1 2])\n    assert 5 (removeDuplicates [0 0 1 1 1 2 2 3 3 4])\nend",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    # def sortArrayByParityII(self, A):\n    #     N = len(A)\n    #     ans = [None] * N\n    #     t = 0\n    #     for i, x in enumerate(A):\n    #         if x % 2 == 0:\n    #             ans[t] = x\n    #             t += 2\n    #     t = 1\n    #     for i, x in enumerate(A):\n    #         if x % 2 == 1:\n    #             ans[t] = x\n    #             t += 2\n    #     # We could have also used slice assignment:\n    #     # ans[::2] = (x for x in A if x % 2 == 0)\n    #     # ans[1::2] = (x for x in A if x % 2 == 1)\n    #     return ans\n\n    def sortArrayByParityII(self, A):\n        odd = 1\n        for i in xrange(0, len(A), 2):\n            if A[i] % 2:\n                while A[odd] % 2:\n                    odd += 2\n                A[i], A[odd] = A[odd], A[i]\n        return A",
  "output: ",
  "output-text ",
  "output-evy func sortArrayByParityII:[]num A:[]num\n    even := 0\n    odd := 1\n    for i := range (len A)\n        if A[i] % 2 == 0\n            A[even] = A[i]\n            even = even + 2\n        else\n            A[odd] = A[i]\n            odd = odd + 2\n        end\n    end\n    return A\nend\n\nfunc test\n    assert [4 1 6 3 2 5] (sortArrayByParityII [4 2 5 1 6 3])\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python # class Solution(object):\n#     def longestCommonPrefix(self, strs):\n#         \"\"\"\n#         :type strs: List[str]\n#         :rtype: str\n#         \"\"\"\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        ls = len(strs)\n        if ls == 1:\n            return strs[0]\n        prefix = ''\n        pos = 0\n        while True:\n            try:\n                current = strs[0][pos]\n            except IndexError:\n                break\n            index = 1\n            while index < ls:\n                try:\n                    if strs[index][pos] != current:\n                        break\n                except IndexError:\n                    break\n                index += 1\n            if index == ls:\n                prefix = prefix + current\n            else:\n                break\n            pos += 1\n        return prefix\n\n    # def longestCommonPrefix(self, strs):\n    #     # https://leetcode.com/discuss/89987/one-line-solution-using-itertools-takewhile\n    #     return reduce(lambda s1, s2: ''.join(y[0] for y in itertools.takewhile(lambda x: x[0] == x[1], zip(s1, s2))), strs or [''])\n\n\n\nif __name__ == '__main__':\n    # begin\n    s = Solution()\n    print s.longestCommonPrefix([\"aca\",\"cba\"])",
  "output: ",
  "output-text ",
  "output-evy func longestCommonPrefix:string strs:[]string\n    ls := len strs\n    if ls == 1\n        return strs[0]\n    end\n    prefix := \"\"\n    pos := 0\n    current := \"\"\n    while true\n        if pos < (len strs[0])\n            current = strs[0][pos]\n        else\n            break\n        end\n        idx := 1\n        while idx < ls\n            if pos < (len strs[idx]) and strs[idx][pos] == current\n                idx = idx + 1\n            else\n                break\n            end\n        end\n        if idx == ls\n            prefix = prefix + current\n        else\n            break\n        end\n        pos = pos + 1\n    end\n    return prefix\nend\n\nfunc test\n    print (longestCommonPrefix [\"aca\" \"cba\"])\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n        N = len(s)\n        ans = \"\"\n        position = 0\n        while position < N:\n            nx = s[position : position + k]\n            ans = ans + nx[::-1] + s[position + k : position + 2 * k]\n            position += 2 * k\n        return ans\n\n    # def reverseStr(self, s: str, k: int) -> str:\n    #     s = list(s)\n    #     for i in range(0, len(s), 2*k):\n    #         s[i:i+k] = reversed(s[i:i+k])\n    #     return \"\".join(s)\n\n        \n\ns1 = Solution()\ns=\"abcdefg\"\nk=2\nprint(s1.reverseStr(s,k))",
  "output: ",
  "output-text ",
  "output-evy func reverseStr:string s:string k:num\n    N := len s\n    ans := \"\"\n    position := 0\n    while position < N\n        nx := s[position:position + k]\n        ans = ans + (reverse nx) + s[position + k:min (position + 2 * k) (len s)]\n        position = position + 2 * k\n    end\n    return ans\nend\n\nfunc reverse:string str:string\n    reversed := \"\"\n    for i := range (len str)\n        reversed = str[i] + reversed\n    end\n    return reversed\nend\n\ns := \"abcdefg\"\nk := 2\nprint (reverseStr s k)",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution:\n    def minOperationsMaxProfit(self, customers, boardingCost, runningCost):\n        profit =0\n        preprofit=0\n        cuscount = customers[0] \n        j=1\n        i=1\n        roundcus =0\n        if boardingCost ==4 and runningCost ==4:\n            return 5\n        if boardingCost ==43 and runningCost ==54:\n            return 993\n        if boardingCost ==92 and runningCost ==92:\n            return 243550\n        while cuscount != 0 or i!=len(customers):\n          if cuscount > 3:\n            roundcus +=4\n            preprofit = profit\n            profit = (roundcus*boardingCost)-(j*runningCost)\n            if preprofit >= profit:\n              break\n            j+=1\n            cuscount-=4\n            if i < len(customers):\n              cuscount += customers[i]\n              i+=1\n          else:\n            roundcus+=cuscount\n            preprofit = profit\n            profit = (roundcus*boardingCost)-(j*runningCost)\n            if preprofit >= profit:\n              break\n\n            cuscount = 0\n            j+=1\n            if i < len(customers):\n              cuscount += customers[i]\n              i+=1\n        if profit < 0:\n          return (-1)\n        else:\n          return (j-1)\n  \ns1 = Solution()\nnum = [10,10,6,4,7]\nb = 3\nr = 8\nprint(s1.minOperationsMaxProfit(num,b,r))",
  "output: ",
  "output-text ",
  "output-evy func minOperationsMaxProfit:num customers:[]num boardingCost:num runningCost:num\n    profit := 0\n    preprofit := 0\n    cuscount := customers[0]\n    j := 1\n    i := 1\n    roundcus := 0\n    if boardingCost == 4 and runningCost == 4\n        return 5\n    end\n    if boardingCost == 43 and runningCost == 54\n        return 993\n    end\n    if boardingCost == 92 and runningCost == 92\n        return 243550\n    end\n    while cuscount != 0 or i != (len customers)\n        if cuscount > 3\n            roundcus = roundcus + 4\n            preprofit = profit\n            profit = (roundcus * boardingCost) - (j * runningCost)\n            if preprofit >= profit\n                break\n            end\n            j = j + 1\n            cuscount = cuscount - 4\n            if i < (len customers)\n                cuscount = cuscount + customers[i]\n                i = i + 1\n            end\n        else\n            roundcus = roundcus + cuscount\n            preprofit = profit\n            profit = (roundcus * boardingCost) - (j * runningCost)\n            if preprofit >= profit\n                break\n            end\n            cuscount = 0\n            j = j + 1\n            if i < (len customers)\n                cuscount = cuscount + customers[i]\n                i = i + 1\n            end\n        end\n    end\n    if profit < 0\n        return -1\n    else\n        return j - 1\n    end\nend\n\nn := [10 10 6 4 7]\nb := 3\nr := 8\nprint (minOperationsMaxProfit n b r)",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution:\n    def runningSum(self, nums: List[int]) -> List[int]:\n        if nums is None or len(nums) == 0:\n            return nums\n        for i in range(1, len(nums)):\n            nums[i] += nums[i-1]\n        return nums\n\n    # def runningSum(self, nums: List[int]) -> List[int]:\n    #     # accumulate method\n    #     return accumulate(nums)",
  "output: ",
  "output-text ",
  "output-evy func runningSum:[]num nums:[]num\n    if nums == []\n        return []\n    end\n    for i := range 1 (len nums)\n        nums[i] = nums[i] + nums[i - 1]\n    end\n    return nums\nend\n\nfunc test\n    assert [1 3 6 10] (runningSum [1 2 3 4])\n    assert [1 2 3 4 5] (runningSum [1 1 1 1 1])\n    assert [0 1 3 6 10] (runningSum [0 1 2 3 4])\n    assert [] (runningSum [])\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    def nthUglyNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 5:\n            return n\n        dp = [0] * (n + 1)\n        l1 = l2 = l3 = 1\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        dp[4] = 4\n        dp[5] = 5\n        for i in range(6, n + 1):\n            while dp[l1] * 2 <= dp[i - 1]:\n                l1 += 1\n            while dp[l2] * 3 <= dp[i - 1]:\n                l2 += 1\n            while dp[l3] * 5 <= dp[i - 1]:\n                l3 += 1\n            print l1, l2, l3\n            dp[i] = min(dp[l1] * 2, dp[l2] * 3, dp[l3] * 5)\n        # print dp\n        return dp[n]\n\nif __name__ == '__main__':\n    # begin\n    s = Solution()\n    print s.nthUglyNumber(10)",
  "output: ",
  "output-text ",
  "output-evy func nthUglyNumber:num n:num\n    if n <= 5\n        return n\n    end\n    dp := [0] * (n + 1)\n    l1 := 1\n    l2 := 1\n    l3 := 1\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 4\n    dp[5] = 5\n    for i := range 6 (n + 1)\n        while dp[l1] * 2 <= dp[i - 1]\n            l1 = l1 + 1\n        end\n        while dp[l2] * 3 <= dp[i - 1]\n            l2 = l2 + 1\n        end\n        while dp[l3] * 5 <= dp[i - 1]\n            l3 = l3 + 1\n        end\n        // print l1 l2 l3\n        dp[i] = min (dp[l1] * 2) (min (dp[l2] * 3) (dp[l3] * 5))\n    end\n    // print dp\n    return dp[n]\nend\n\nfunc test\n    assert 12 (nthUglyNumber 10)\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        res = []\n        pos1 = pos2 = 0\n        while pos1 < len(nums1) and pos2 < len(nums2):\n            if nums1[pos1] == nums2[pos2]:\n                res.append(nums1[pos1])\n                pos1 += 1\n                pos2 += 1\n            elif nums1[pos1] < nums2[pos2]:\n                pos1 += 1\n            else:\n                pos2 += 1\n        return res",
  "output: ",
  "output-text ",
  "output-evy func intersect:[]num nums1:[]num nums2:[]num\n    sort nums1\n    sort nums2\n    res:[]num\n    pos1 := 0\n    pos2 := 0\n    while pos1 < (len nums1) and pos2 < (len nums2)\n        if nums1[pos1] == nums2[pos2]\n            res = res + [nums1[pos1]]\n            pos1 = pos1 + 1\n            pos2 = pos2 + 1\n        else if nums1[pos1] < nums2[pos2]\n            pos1 = pos1 + 1\n        else\n            pos2 = pos2 + 1\n        end\n    end\n    return res\nend\n\nfunc sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend\n\nfunc test\n    assert [2 2] (intersect [1 2 2 1] [2 2])\n    assert [4 9] (intersect [4 9 5] [9 4 9 8 4])\nend\n\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution:\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        dmap = [[0] * n for _ in range(m)]\n        for i in range(m):\n            dmap[i][0] = 1\n        for j in range(n):\n            dmap[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                l = u = 0\n                if i-1 >= 0:\n                    u = dmap[i-1][j]\n                if j-1>= 0:\n                    l = dmap[i][j-1]\n                dmap[i][j] = l + u\n        return dmap[m-1][n-1]",
  "output: ",
  "output-text ",
  "output-evy func uniquePaths:num m:num n:num\n    dmap := [[]] * m\n    for i := range m\n        dmap[i] = [0] * n\n    end\n    for i := range m\n        dmap[i][0] = 1\n    end\n    for j := range n\n        dmap[0][j] = 1\n    end\n    for i := range 1 m\n        for j := range 1 n\n            l := 0\n            u := 0\n            if i - 1 >= 0\n                u = dmap[i - 1][j]\n            end\n            if j - 1 >= 0\n                l = dmap[i][j - 1]\n            end\n            dmap[i][j] = l + u\n        end\n    end\n    return dmap[m - 1][n - 1]\nend\n\nfunc test\n    assert 28 (uniquePaths 3 7)\n    assert 3 (uniquePaths 3 2)\n    assert 1 (uniquePaths 1 1)\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        length = len(prices)\n        if length == 0:\n            return 0\n        max_profit, low = 0, prices[0]\n        for i in range(1, length):\n            if low > prices[i]:\n                low = prices[i]\n            else:\n                temp = prices[i] - low\n                if temp > max_profit:\n                    max_profit = temp\n        return max_profit",
  "output: ",
  "output-text ",
  "output-evy func maxProfit:num prices:[]num\n    length := len prices\n    if length == 0\n        return 0\n    end\n    max_profit := 0\n    low := prices[0]\n    for i := range 1 length\n        if low > prices[i]\n            low = prices[i]\n        else\n            temp := prices[i] - low\n            if temp > max_profit\n                max_profit = temp\n            end\n        end\n    end\n    return max_profit\nend\n\nfunc test\n    assert 5 (maxProfit [7 1 5 3 6 4])\n    assert 0 (maxProfit [7 6 4 3 1])\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        # greedy\n        # https://leetcode.com/articles/jump-game/\n        length = len(nums)\n        begin = length - 1\n        for i in reversed(range(length - 1)):\n            if i + nums[i] >= begin:\n                begin = i\n        return not begin",
  "output: ",
  "output-text ",
  "output-evy func canJump:bool nums:[]num\n    length := len nums\n    begin := length - 1\n    for i := range (length - 1) 0 -1\n        if i + nums[i] >= begin\n            begin = i\n        end\n    end\n    return begin == 0\nend\n\nfunc test\n    assert (canJump [2 3 1 1 4])\n    assert (canJump [3 2 1 0 4])\nend",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    # def findMedianSortedArrays(self, nums1, nums2):\n    #     \"\"\"\n    #     :type nums1: List[int]\n    #     :type nums2: List[int]\n    #     :rtype: float\n    #     \"\"\"\n    #     p1 = p2 = 0\n    #     ls1 = len(nums1)\n    #     ls2 = len(nums2)\n    #     all_nums = []\n    #     median = 0.0\n    #     while p1 < ls1 and p2 < ls2:\n    #         if nums1[p1] < nums2[p2]:\n    #             all_nums.append(nums1[p1])\n    #             p1 += 1\n    #         else:\n    #             all_nums.append(nums2[p2])\n    #             p2 += 1\n    #     if p1 < ls1:\n    #         while p1 < ls1:\n    #             all_nums.append(nums1[p1])\n    #             p1 += 1\n    #     if p2 < ls2:\n    #         while p2 < ls2:\n    #             all_nums.append(nums2[p2])\n    #             p2 += 1\n    #     # print all_nums\n    #     if (ls1 + ls2) % 2 == 1:\n    #         median = all_nums[(ls1 + ls2) / 2]\n    #     else:\n    #         median = 1.0 * (all_nums[(ls1 + ls2) / 2] + all_nums[(ls1 + ls2) / 2 - 1]) / 2\n    #     return median\n\n    def findMedianSortedArrays(self, nums1, nums2):\n        # https://discuss.leetcode.com/topic/4996/share-my-o-log-min-m-n-solution-with-explanation\n        # https://discuss.leetcode.com/topic/16797/very-concise-o-log-min-m-n-iterative-solution-with-detailed-explanation\n        ls1, ls2 = len(nums1), len(nums2)\n        if ls1 < ls2:\n            return self.findMedianSortedArrays(nums2, nums1)\n        l, r = 0, ls2 * 2\n        while l <= r:\n            mid2 = (l + r) >> 1\n            mid1 = ls1 + ls2 - mid2\n            L1 = -sys.maxint - 1 if mid1 == 0 else nums1[(mid1 - 1) >> 1]\n            L2 = -sys.maxint - 1 if mid2 == 0 else nums2[(mid2 - 1) >> 1]\n            R1 = sys.maxint if mid1 == 2 * ls1 else nums1[mid1 >> 1]\n            R2 = sys.maxint if mid2 == 2 * ls2 else nums2[mid2 >> 1]\n            if L1 > R2:\n                l = mid2 + 1\n            elif L2 > R1:\n                r = mid2 - 1\n            else:\n                return (max(L1, L2) + min(R1, R2)) / 2.0\n\n\nif __name__ == '__main__':\n    # begin\n    s = Solution()\n    print(s.findMedianSortedArrays([1, 1], [1, 2]))",
  "output: ",
  "output-text ",
  "output-evy func findMedianSortedArrays:num nums1:[]num nums2:[]num\n    ls1 := len nums1\n    ls2 := len nums2\n    if ls1 < ls2\n        return findMedianSortedArrays nums2 nums1\n    end\n    l := 0\n    r := ls2 * 2\n    while l <= r\n        mid2 := (l + r) / 2\n        mid1 := ls1 + ls2 - mid2\n        R1:num\n        R2:num\n        L1:num\n        L2:num\n        if mid1 == 0\n            L1 = -2147483648\n        else\n            L1 = nums1[floor ((mid1 - 1) / 2)]\n        end\n        if mid2 == 0\n            L2 = -2147483648\n        else\n            L2 = nums2[floor ((mid2 - 1) / 2)]\n        end\n        if mid1 == 2 * ls1\n            R1 = 2147483647\n        else\n            R1 = nums1[floor (mid1 / 2)]\n        end\n        if mid2 == 2 * ls2\n            R2 = 2147483647\n        else\n            R2 = nums2[floor (mid2 / 2)]\n        end\n        if L1 > R2\n            l = mid2 + 1\n        else if L2 > R1\n            r = mid2 - 1\n        else\n            return ((max L1 L2) + (min R1 R2)) / 2\n        end\n    end\n    return -1\nend\n\nfunc test\n    print (findMedianSortedArrays [1 1] [1 2])\nend\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: void Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        p1, p2 = m - 1, n - 1\n        pos = m + n - 1\n        while p1 >= 0 and p2 >= 0:\n            if nums1[p1] >= nums2[p2]:\n                nums1[pos] = nums1[p1]\n                p1 -= 1\n            else:\n                nums1[pos] = nums2[p2]\n                p2 -= 1\n            pos -= 1\n        while p2 >= 0:\n            nums1[pos] = nums2[p2]\n            p2 -= 1\n            pos -= 1\n\n    # def merge(self, nums1, m, nums2, n):\n    #     # using slicing\n    #     i, j, k = m - 1, n - 1, m + n - 1\n    #     while i >= 0 and j >= 0:\n    #         if nums1[i] > nums2[j]:\n    #             nums1[k] = nums1[i]\n    #             i -= 1\n    #         else:\n    #             nums1[k] = nums2[j]\n    #             j -= 1\n    #         k -= 1\n    #\n    #     if j >= 0:\n    #         nums1[:k + 1] = nums2[:j + 1]",
  "output: ",
  "output-text ",
  "output-evy func merge nums1:[]num m:num nums2:[]num n:num\n    p1 := m - 1\n    p2 := n - 1\n    pos := m + n - 1\n    while p1 >= 0 and p2 >= 0\n        if nums1[p1] >= nums2[p2]\n            nums1[pos] = nums1[p1]\n            p1 = p1 - 1\n        else\n            nums1[pos] = nums2[p2]\n            p2 = p2 - 1\n        end\n        pos = pos - 1\n    end\n    while p2 >= 0\n        nums1[pos] = nums2[p2]\n        p2 = p2 - 1\n        pos = pos - 1\n    end\nend\n\nfunc test\n    nums1 := [1 2 3 0 0 0]\n    m := 3\n    nums2 := [2 5 6]\n    n := 3\n    merge nums1 m nums2 n\n    assert [1 2 2 3 5 6] nums1\nend",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python import collections\n\n\nclass Solution(object):\n    def repeatedNTimes(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        counter = collections.Counter(A)\n        return counter.most_common(1)[0][0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.repeatedNTimes([1, 2, 3, 3])\n    print s.repeatedNTimes([2, 1, 2, 5, 3, 2])\n    print s.repeatedNTimes([5, 1, 5, 2, 5, 3, 5, 4])",
  "output: ",
  "output-text ",
  "output-evy func repeatedNTimes:num nums:[]num\n    counts:{}num\n    for n := range nums\n        ns := sprint n\n        if has counts ns\n            counts[ns] = counts[ns] + 1\n        else\n            counts[ns] = 1\n        end\n    end\n    maxCount := 0\n    maxNum := 0\n    for key := range counts\n        if counts[key] > maxCount\n            maxCount = counts[key]\n            maxNum = str2num key\n        end\n    end\n    return maxNum\nend\n\nfunc test\n    assert 3 (repeatedNTimes [1 2 3 3])\n    assert 2 (repeatedNTimes [2 1 2 5 3 2])\n    assert 5 (repeatedNTimes [5 1 5 2 5 3 5 4])\nend\n\ntest",
  "input: ",
  "input-text Can you convert this to python?",
  "input-evy ",
  "input-python # We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).\n# Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.\n\n# Example 1:\n# Input: \n# bits = [1, 0, 0]\n# Output: True\n# Explanation: \n# The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n# Example 2:\n# Input: \n# bits = [1, 1, 1, 0]\n# Output: False\n# Explanation: \n# The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n# Note:\n\n# 1 <= len(bits) <= 1000.\n# bits[i] is always 0 or 1.\n\n# https://leetcode.com/problems/1-bit-and-2-bit-characters/solution/\nclass Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:\n        pos = 0\n        # Go through bits\n        while pos < len(bits) - 1:\n            # if 1, pos + 2; if 0, pos + 1\n            pos += bits[pos] + 1\n        return pos == len(bits) - 1\n    \n    # def isOneBitCharacter(self, bits):\n    #     # From len - 2\n    #     pos = len(bits) - 2\n    #     # until encounter 0\n    #     while pos >= 0 and bits[pos] > 0:\n    #         pos -= 1\n    #     # check if second last zero is even\n    #     return (len(bits) - pos) % 2 == 0",
  "output: ",
  "output-text ",
  "output-evy // We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).\n// Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.\n//\n// Example 1:\n// Input:\n// bits = [1, 0, 0]\n// Output: True\n// Explanation:\n// The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n// Example 2:\n// Input:\n// bits = [1, 1, 1, 0]\n// Output: False\n// Explanation:\n// The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n// Note:\n//\n// 1 <= len(bits) <= 1000.\n// bits[i] is always 0 or 1.\n//\n// https://leetcode.com/problems/1-bit-and-2-bit-characters/solution/\nfunc isOneBitCharacter:bool bits:[]num\n    pos := 0\n    while pos < (len bits) - 1\n        pos = pos + bits[pos] + 1\n    end\n    return pos == (len bits) - 1\nend\n\nfunc test\n    assert true (isOneBitCharacter [1 0 0])\n    assert false (isOneBitCharacter [1 1 1 0])\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy pi := 3.14159265359\n\nfont {size:4 family:\"arial\"}\n\nspeed := 50\nydist := 50\n\non animate ms:num\n    clear\n    gridn 50 \"hsl(0deg 100% 0% / 20%)\"\n    t := ms / 1000 * speed / 25\n    scale := ydist / 2\n    ylinear := (trianglewave t) * scale * 2 / pi + 50\n    ycos := (cos t) * scale + 50\n    draw ylinear ycos\nend\n\nfunc draw ylinear:num ycos:num\n    clear\n    draw_dot ylinear \"black\"\n    draw_dot ycos \"hsl(0deg 100% 50% / 90%)\"\n    draw_labels\nend\n\nfunc draw_labels\n    color \"red\"\n    move 10 92\n    text \"sine\"\n    color \"black\"\n    move 20 92\n    text \"linear\"\nend\n\nfunc draw_dot y:num c:string\n    color c\n    move 50 y\n    circle 1\nend\n\np := 2 * pi\np100 := 100 * p\n\nfunc trianglewave:num x:num\n    x100 := 100 * x\n    h := x100 % p100 / 100\n    y := (abs h-p/2) - p / 4\n    return y\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend\n\non input id:string val:string\n    n := str2num val\n    if id == \"sliderx\"\n        speed = n\n    else if id == \"slidery\"\n        ydist = n\n    end\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy pi := 3.14159265359\n\nfont {size:4 family:\"arial\"}\n\nspeed := 50\nydist := 50\n\non animate ms:num\n    clear\n    gridn 50 \"hsl(0deg 100% 0% / 20%)\"\n    t := ms / 1000 * speed / 25\n    scale := ydist / 2\n    ylinear := (trianglewave t) * scale * 2 / pi + 50\n    ycos := (cos t) * scale + 50\n    draw ylinear ycos\nend\n\nfunc draw ylinear:num ycos:num\n    clear\n    draw_dot ylinear \"black\"\n    draw_dot ycos \"hsl(0deg 100% 50% / 90%)\"\n    draw_labels\nend\n\nfunc draw_labels\n    color \"red\"\n    move 10 92\n    text \"sine\"\n    color \"black\"\n    move 20 92\n    text \"linear\"\nend\n\nfunc draw_dot y:num c:string\n    color c\n    move 50 y\n    circle 1\nend\n\np := 2 * pi\np100 := 100 * p\n\nfunc trianglewave:num x:num\n    x100 := 100 * x\n    h := x100 % p100 / 100\n    y := (abs h-p/2) - p / 4\n    return y\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend\n\non input id:string val:string\n    n := str2num val\n    if id == \"sliderx\"\n        speed = n\n    else if id == \"slidery\"\n        ydist = n\n    end\nend",
  "input: ",
  "input-text ",
  "input-evy print \"Hello world\"",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print \"Hello world\"",
  "input: ",
  "input-text ",
  "input-evy //\n// Mouse chaser\n//\n//\n\n// --- Setup constants --------\nspeed := 20\nfriction := 5\n\n// --- State ------------------\nchaserX := 0\nchaserY := 0\nchaserVelX := 0\nchaserVelY := 0\n\ntargetX := 0\ntargetY := 0\n\n// evy passes an absolute time rather than time delta\n// so we store the previous time in order to calculate delta\npreviousTime := 0\n\n// --- events -----------------\n\non move x:num y:num\n    targetX = x\n    targetY = y\nend\n\non animate t:num\n    // calculate deltaTime\n    deltaTime := (t - previousTime) / 1000\n    previousTime = t\n\n    // -- update (time bound)\n    update deltaTime\n\n    // -- draw (frame bound)\n    col := spinColor t\n    clear col\n    drawWorld\nend\n\n// --- movement updates ------\n\nfunc update dT:num\n    scaledFriction := 1 / (1 + dT * friction)\n    chaserVelX = chaserVelX * scaledFriction\n    chaserVelY = chaserVelY * scaledFriction\n\n    chase\n\n    chaserX = chaserX + chaserVelX * dT\n    chaserY = chaserY + chaserVelY * dT\nend\n\nfunc chase\n    dir := direction chaserX chaserY targetX targetY\n\n    moveX := cos dir\n    moveY := sin dir\n\n    chaserVelX = chaserVelX + moveX * speed\n    chaserVelY = chaserVelY + moveY * speed\nend\n\n// --- drawing ---------------\n\nfunc drawWorld\n    drawEntity \"red\" \"darkred\" chaserX chaserY 5\nend\n\nfunc drawEntity col:string strokeCol:string x:num y:num size:num\n    fill col\n    stroke strokeCol\n    move x y\n    circle size\nend\n\n// --- utilities ------------\n\nfunc spinColor:string deg:num\n    deg = deg % 360\n    col := sprintf \"hsl(%f 0%% 100%% / 2%%)\" deg\n    return col\nend\n\nfunc constrain:num in:num minimum:num maximum:num\n    if in < minimum\n        return minimum\n    else if in > maximum\n        return maximum\n    end\n    return in\nend\n\nfunc direction:num x:num y:num toX:num toY:num\n    deltaX := toX - x\n    deltaY := toY - y\n    return atan2 deltaY deltaX\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy //\n// Mouse chaser\n//\n//\n\n// --- Setup constants --------\nspeed := 20\nfriction := 5\n\n// --- State ------------------\nchaserX := 0\nchaserY := 0\nchaserVelX := 0\nchaserVelY := 0\n\ntargetX := 0\ntargetY := 0\n\n// evy passes an absolute time rather than time delta\n// so we store the previous time in order to calculate delta\npreviousTime := 0\n\n// --- events -----------------\n\non move x:num y:num\n    targetX = x\n    targetY = y\nend\n\non animate t:num\n    // calculate deltaTime\n    deltaTime := (t - previousTime) / 1000\n    previousTime = t\n\n    // -- update (time bound)\n    update deltaTime\n\n    // -- draw (frame bound)\n    col := spinColor t\n    clear col\n    drawWorld\nend\n\n// --- movement updates ------\n\nfunc update dT:num\n    scaledFriction := 1 / (1 + dT * friction)\n    chaserVelX = chaserVelX * scaledFriction\n    chaserVelY = chaserVelY * scaledFriction\n\n    chase\n\n    chaserX = chaserX + chaserVelX * dT\n    chaserY = chaserY + chaserVelY * dT\nend\n\nfunc chase\n    dir := direction chaserX chaserY targetX targetY\n\n    moveX := cos dir\n    moveY := sin dir\n\n    chaserVelX = chaserVelX + moveX * speed\n    chaserVelY = chaserVelY + moveY * speed\nend\n\n// --- drawing ---------------\n\nfunc drawWorld\n    drawEntity \"red\" \"darkred\" chaserX chaserY 5\nend\n\nfunc drawEntity col:string strokeCol:string x:num y:num size:num\n    fill col\n    stroke strokeCol\n    move x y\n    circle size\nend\n\n// --- utilities ------------\n\nfunc spinColor:string deg:num\n    deg = deg % 360\n    col := sprintf \"hsl(%f 0%% 100%% / 2%%)\" deg\n    return col\nend\n\nfunc constrain:num in:num minimum:num maximum:num\n    if in < minimum\n        return minimum\n    else if in > maximum\n        return maximum\n    end\n    return in\nend\n\nfunc direction:num x:num y:num toX:num toY:num\n    deltaX := toX - x\n    deltaY := toY - y\n    return atan2 deltaY deltaX\nend",
  "input: ",
  "input-text ",
  "input-evy // parameters\nclear \"red\"\nblackHairs := 550\nstyle := \"lin\" // \"exp\" or \"lin\"\nk := 2 // linear\nexp := 1.025 // exponent\nstart := 0.5 // exponent\n\n// internal state\nleft:[]bool\nright:[]bool\nleftIdx:[]num\nrightIdx:[]num\ninitData\n\non animate\n    whiten style\n    drawHair 40 75 right\n    drawFace\n    drawHair 30 270 left\n    if blackHairs == 0\n        exit 0\n    end\nend\n\nfunc whiten s:string\n    if s == \"exp\"\n        // exponential\n        whitenCnt (round start)\n        start = start * exp\n    else\n        whitenCnt k // linear\n    end\nend\n\nfunc whitenCnt cnt:num\n    for range cnt\n        if blackHairs <= 0\n            return\n        end\n        blackHairs = blackHairs - 1\n        left[leftIdx[blackHairs]] = false\n        right[rightIdx[blackHairs]] = false\n    end\nend\n\nfunc drawHair x:num rot:num hair:[]bool\n    width 0.1\n    fill \"none\"\n    d := 0\n    for i := range (len hair)\n        if hair[i]\n            stroke \"black\"\n        else\n            stroke \"white\"\n        end\n        ellipse x+d 64-d 31 21 rot 180 0\n        d = d + 0.05\n    end\nend\n\nfunc drawFace\n    color \"gold\"\n    move 50 50\n    circle 20\n    color \"black\"\n    width 2\n    move 47 50\n    line 52 48\n    move 60 48\n    line 62.5 49.5\nend\n\nfunc initData\n    for i := range blackHairs\n        left = left + [true]\n        right = right + [true]\n        leftIdx = leftIdx + [i]\n        rightIdx = rightIdx + [i]\n    end\n\n    shuffle leftIdx\n    shuffle rightIdx\nend\n\nfunc shuffle arr:[]num\n    for x := range (len arr) 0 -1\n        i := rand x\n        h := arr[i]\n        arr[i] = arr[x - 1]\n        arr[x - 1] = h\n    end\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // parameters\nclear \"red\"\nblackHairs := 550\nstyle := \"lin\" // \"exp\" or \"lin\"\nk := 2 // linear\nexp := 1.025 // exponent\nstart := 0.5 // exponent\n\n// internal state\nleft:[]bool\nright:[]bool\nleftIdx:[]num\nrightIdx:[]num\ninitData\n\non animate\n    whiten style\n    drawHair 40 75 right\n    drawFace\n    drawHair 30 270 left\n    if blackHairs == 0\n        exit 0\n    end\nend\n\nfunc whiten s:string\n    if s == \"exp\"\n        // exponential\n        whitenCnt (round start)\n        start = start * exp\n    else\n        whitenCnt k // linear\n    end\nend\n\nfunc whitenCnt cnt:num\n    for range cnt\n        if blackHairs <= 0\n            return\n        end\n        blackHairs = blackHairs - 1\n        left[leftIdx[blackHairs]] = false\n        right[rightIdx[blackHairs]] = false\n    end\nend\n\nfunc drawHair x:num rot:num hair:[]bool\n    width 0.1\n    fill \"none\"\n    d := 0\n    for i := range (len hair)\n        if hair[i]\n            stroke \"black\"\n        else\n            stroke \"white\"\n        end\n        ellipse x+d 64-d 31 21 rot 180 0\n        d = d + 0.05\n    end\nend\n\nfunc drawFace\n    color \"gold\"\n    move 50 50\n    circle 20\n    color \"black\"\n    width 2\n    move 47 50\n    line 52 48\n    move 60 48\n    line 62.5 49.5\nend\n\nfunc initData\n    for i := range blackHairs\n        left = left + [true]\n        right = right + [true]\n        leftIdx = leftIdx + [i]\n        rightIdx = rightIdx + [i]\n    end\n\n    shuffle leftIdx\n    shuffle rightIdx\nend\n\nfunc shuffle arr:[]num\n    for x := range (len arr) 0 -1\n        i := rand x\n        h := arr[i]\n        arr[i] = arr[x - 1]\n        arr[x - 1] = h\n    end\nend",
  "input: ",
  "input-text ",
  "input-evy grid\n\nmove 50 60\ncolor \"red\"\ncircle 10\n\nmove 20 10\ncolor \"yellow\"\nrect 60 50\n\nmove 5 20\ncolor \"yellow\"\nrect 25 20\n\nmove 70 20\ncolor \"yellow\"\nrect 20 20\n\nmove 25 15\ncolor \"black\"\ncircle 10\n\nmove 25 15\ncolor \"white\"\ncircle 5\n\nmove 75 15\ncolor \"black\"\ncircle 10\n\nmove 75 15\ncolor \"white\"\ncircle 5\n\nmove 32 10\ncolor \"black\"\nrect 35 2\n\nmove 5 38\ncolor \"black\"\nrect 85 2\n\nmove 20 55\ncolor \"black\"\nrect 60 3\n\nmove 20 57\ncolor \"brown\"\nrect 60 3\n\nmove 20 50\ncolor \"brown\"\nrect 10 10\n\nmove 10 40\ncolor \"brown\"\nrect 10 10\n\nmove 80 40\ncolor \"brown\"\nrect 10 10\n\nmove 70 50\ncolor \"brown\"\nrect 10 10\n\nmove 70 50\ncolor \"black\"\nrect 2 7\n\nmove 30 50\ncolor \"black\"\nrect 2 7\n\nmove 20 40\ncolor \"black\"\nrect 2 10\n\nmove 78 40\ncolor \"black\"\nrect 2 10\n\nmove 70 50\ncolor \"black\"\nrect 10 2\n\nmove 20 50\ncolor \"black\"\nrect 10 2\n\nmove 50 10\ncolor \"black\"\nrect 2 47\n\nmove 3 20\ncolor \"black\"\nrect 2 20\n\nmove 90 20\ncolor \"black\"\nrect 2 20\n\nmove 76 20\ncolor \"black\"\nrect 14 2\n\nmove 3 20\ncolor \"black\"\nrect 21 2\n\nmove 5.1 23\ncolor \"red\"\nrect 3 8\n\nmove 5 26\ncolor \"white\"\nrect 2 5\n\nmove 5 26\ncolor \"yellow\"\nrect 2 2\n\nmove 88 23\ncolor \"red\"\nrect 2 8\n\nmove 88 23\ncolor \"black\"\nrect 3 2\n\nmove 5 23\ncolor \"black\"\nrect 3 2\n\nmove 88 30\ncolor \"black\"\nrect 3 2\n\nmove 5 30\ncolor \"black\"\nrect 3 2\n\nmove 68 30\ncolor \"black\"\nrect 5 2\n\nmove 38 30\ncolor \"black\"\nrect 5 2\n\nmove 10 71.5\ncolor \"orange\"\nrect 80 25\n\nmove 30 75\ncolor \"black\"\nrect 2 17\n\nmove 45 75\ncolor \"black\"\nrect 2 17\n\nmove 55 75\ncolor \"black\"\nrect 2 15\n\nmove 30 82\ncolor \"black\"\nrect 15 2\n\nmove 50 90\ncolor \"black\"\nrect 12 2\n\nmove 50 75\ncolor \"black\"\nrect 12 2\n\nmove 70 80\ncolor \"black\"\nrect 2 12\n\nmove 70 75\ncolor \"black\"\nrect 2 2",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy grid\n\nmove 50 60\ncolor \"red\"\ncircle 10\n\nmove 20 10\ncolor \"yellow\"\nrect 60 50\n\nmove 5 20\ncolor \"yellow\"\nrect 25 20\n\nmove 70 20\ncolor \"yellow\"\nrect 20 20\n\nmove 25 15\ncolor \"black\"\ncircle 10\n\nmove 25 15\ncolor \"white\"\ncircle 5\n\nmove 75 15\ncolor \"black\"\ncircle 10\n\nmove 75 15\ncolor \"white\"\ncircle 5\n\nmove 32 10\ncolor \"black\"\nrect 35 2\n\nmove 5 38\ncolor \"black\"\nrect 85 2\n\nmove 20 55\ncolor \"black\"\nrect 60 3\n\nmove 20 57\ncolor \"brown\"\nrect 60 3\n\nmove 20 50\ncolor \"brown\"\nrect 10 10\n\nmove 10 40\ncolor \"brown\"\nrect 10 10\n\nmove 80 40\ncolor \"brown\"\nrect 10 10\n\nmove 70 50\ncolor \"brown\"\nrect 10 10\n\nmove 70 50\ncolor \"black\"\nrect 2 7\n\nmove 30 50\ncolor \"black\"\nrect 2 7\n\nmove 20 40\ncolor \"black\"\nrect 2 10\n\nmove 78 40\ncolor \"black\"\nrect 2 10\n\nmove 70 50\ncolor \"black\"\nrect 10 2\n\nmove 20 50\ncolor \"black\"\nrect 10 2\n\nmove 50 10\ncolor \"black\"\nrect 2 47\n\nmove 3 20\ncolor \"black\"\nrect 2 20\n\nmove 90 20\ncolor \"black\"\nrect 2 20\n\nmove 76 20\ncolor \"black\"\nrect 14 2\n\nmove 3 20\ncolor \"black\"\nrect 21 2\n\nmove 5.1 23\ncolor \"red\"\nrect 3 8\n\nmove 5 26\ncolor \"white\"\nrect 2 5\n\nmove 5 26\ncolor \"yellow\"\nrect 2 2\n\nmove 88 23\ncolor \"red\"\nrect 2 8\n\nmove 88 23\ncolor \"black\"\nrect 3 2\n\nmove 5 23\ncolor \"black\"\nrect 3 2\n\nmove 88 30\ncolor \"black\"\nrect 3 2\n\nmove 5 30\ncolor \"black\"\nrect 3 2\n\nmove 68 30\ncolor \"black\"\nrect 5 2\n\nmove 38 30\ncolor \"black\"\nrect 5 2\n\nmove 10 71.5\ncolor \"orange\"\nrect 80 25\n\nmove 30 75\ncolor \"black\"\nrect 2 17\n\nmove 45 75\ncolor \"black\"\nrect 2 17\n\nmove 55 75\ncolor \"black\"\nrect 2 15\n\nmove 30 82\ncolor \"black\"\nrect 15 2\n\nmove 50 90\ncolor \"black\"\nrect 12 2\n\nmove 50 75\ncolor \"black\"\nrect 12 2\n\nmove 70 80\ncolor \"black\"\nrect 2 12\n\nmove 70 75\ncolor \"black\"\nrect 2 2",
  "input: ",
  "input-text ",
  "input-evy s1 := read\nprint s1 s1\ns2 := read\nprint s1 s2",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy s1 := read\nprint s1 s1\ns2 := read\nprint s1 s2",
  "input: ",
  "input-text ",
  "input-evy color \"green\"\nr:num\nx:num\ny:num\nnx:num\nny:num\n\nfor range 500000\n    r = rand1\n    if r < 0.01\n        nx = 0\n        ny = 0.16 * y\n    else if r < 0.08\n        nx = 0.2 * x - 0.26 * y\n        ny = 0.23 * x + 0.22 * y + 1.6\n    else if r < 0.15\n        nx = -0.15 * x + 0.28 * y\n        ny = 0.26 * x + 0.24 * y + 0.44\n    else\n        nx = 0.85 * x + 0.04 * y\n        ny = -0.04 * x + 0.85 * y + 1.6\n    end\n    x = nx\n    y = ny\n    move 50+x*15 y*10-3\n    circle 0.05\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy color \"green\"\nr:num\nx:num\ny:num\nnx:num\nny:num\n\nfor range 500000\n    r = rand1\n    if r < 0.01\n        nx = 0\n        ny = 0.16 * y\n    else if r < 0.08\n        nx = 0.2 * x - 0.26 * y\n        ny = 0.23 * x + 0.22 * y + 1.6\n    else if r < 0.15\n        nx = -0.15 * x + 0.28 * y\n        ny = 0.26 * x + 0.24 * y + 0.44\n    else\n        nx = 0.85 * x + 0.04 * y\n        ny = -0.04 * x + 0.85 * y + 1.6\n    end\n    x = nx\n    y = ny\n    move 50+x*15 y*10-3\n    circle 0.05\nend",
  "input: ",
  "input-text ",
  "input-evy in:num\n\nfor total := range 1000000\n    x := rand1\n    y := rand1\n    d := sqrt x*x+y*y\n    if d <= 1\n        in = in + 1\n    end\n    pi := in / total * 4\n\n    //output\n    cls\n    print \"π:\" pi\n\n    // draw\n    if d <= 1\n        color \"red\"\n    else\n        color \"black\"\n    end\n    move x*100 y*100\n    circle 0.2\nend\n```",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy in:num\n\nfor total := range 1000000\n    x := rand1\n    y := rand1\n    d := sqrt x*x+y*y\n    if d <= 1\n        in = in + 1\n    end\n    pi := in / total * 4\n\n    //output\n    cls\n    print \"π:\" pi\n\n    // draw\n    if d <= 1\n        color \"red\"\n    else\n        color \"black\"\n    end\n    move x*100 y*100\n    circle 0.2\nend\n```",
  "input: ",
  "input-text ",
  "input-evy fill \"white\"\n\non move x:num y:num\n    move x y\n    circle 9\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy fill \"white\"\n\non move x:num y:num\n    move x y\n    circle 9\nend",
  "input: ",
  "input-text ",
  "input-evy c := {x:50 y:50 radius:10 dx:0 dy:0}\ndown := false\nstate := \"none\" // \"move\", \"resizex\", \"resizey\"\ndraw\n\nfunc draw\n    clear\n    draw_grid\n    draw_circle\n    if state == \"move\"\n        draw_cross\n    end\n    if state == \"resizex\" or state == \"resizey\"\n        draw_handles\n    end\nend\n\non move x:num y:num\n    if !down\n        state = get_state x y\n        draw\n        return\n    end\n    if x == 0 or x == 100 or y == 0 or y == 100\n        release\n        return\n    end\n\n    if state == \"move\"\n        update x+c.dx y+c.dy c.radius\n    else if state == \"resizex\"\n        update c.x c.y (abs x-c.x)\n    else if state == \"resizey\"\n        update c.x c.y (abs y-c.y)\n    end\n    draw\nend\n\nfunc update x:num y:num radius:num\n    x = (round x/10) * 10\n    y = (round y/10) * 10\n    radius = (round radius/10) * 10\n    if x != c.x or y != c.y or radius != c.radius\n        c.x = x\n        c.y = y\n        c.radius = radius\n        print \"x:\" x \"y:\" y \"radius:\" radius\n    end\nend\n\non down x:num y:num\n    state = get_state x y\n    if state == \"none\"\n        return\n    end\n    down = true\n    c.dx = c.x - x\n    c.dy = c.y - y\nend\n\non up\n    release\nend\n\nfunc release\n    state = \"none\"\n    down = false\n    draw\nend\n\nfunc get_state:string x:num y:num\n    dist := sqrt (c.x - x)*(c.x - x)+(c.y - y)*(c.y - y)\n    if dist > c.radius + 3\n        return \"none\"\n    else if dist < c.radius - 3\n        return \"move\"\n    else if (abs c.x-x) >= (abs c.y-y)\n        return \"resizex\"\n    end\n    return \"resizey\"\nend\n\nfunc draw_grid\n    width 0.05\n    color \"hsl(0deg 100% 0% / 50%)\"\n    for i := range 0 101 10\n        move i 0\n        line i 100\n        move 0 i\n        line 100 i\n    end\nend\n\nfunc draw_circle\n    color \"red\"\n    move c.x c.y\n    circle c.radius\nend\n\nfunc draw_cross\n    color \"black\"\n    width 0.4\n    move c.x-1 c.y\n    line c.x+1 c.y\n    move c.x c.y-1\n    line c.x c.y+1\nend\n\nfunc draw_handles\n    color \"black\"\n    width 0.4\n    move c.x+c.radius c.y-1\n    line c.x+c.radius c.y+1\n    move c.x-c.radius c.y-1\n    line c.x-c.radius c.y+1\n    move c.x-1 c.y+c.radius\n    line c.x+1 c.y+c.radius\n    move c.x-1 c.y-c.radius\n    line c.x+1 c.y-c.radius\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy c := {x:50 y:50 radius:10 dx:0 dy:0}\ndown := false\nstate := \"none\" // \"move\", \"resizex\", \"resizey\"\ndraw\n\nfunc draw\n    clear\n    draw_grid\n    draw_circle\n    if state == \"move\"\n        draw_cross\n    end\n    if state == \"resizex\" or state == \"resizey\"\n        draw_handles\n    end\nend\n\non move x:num y:num\n    if !down\n        state = get_state x y\n        draw\n        return\n    end\n    if x == 0 or x == 100 or y == 0 or y == 100\n        release\n        return\n    end\n\n    if state == \"move\"\n        update x+c.dx y+c.dy c.radius\n    else if state == \"resizex\"\n        update c.x c.y (abs x-c.x)\n    else if state == \"resizey\"\n        update c.x c.y (abs y-c.y)\n    end\n    draw\nend\n\nfunc update x:num y:num radius:num\n    x = (round x/10) * 10\n    y = (round y/10) * 10\n    radius = (round radius/10) * 10\n    if x != c.x or y != c.y or radius != c.radius\n        c.x = x\n        c.y = y\n        c.radius = radius\n        print \"x:\" x \"y:\" y \"radius:\" radius\n    end\nend\n\non down x:num y:num\n    state = get_state x y\n    if state == \"none\"\n        return\n    end\n    down = true\n    c.dx = c.x - x\n    c.dy = c.y - y\nend\n\non up\n    release\nend\n\nfunc release\n    state = \"none\"\n    down = false\n    draw\nend\n\nfunc get_state:string x:num y:num\n    dist := sqrt (c.x - x)*(c.x - x)+(c.y - y)*(c.y - y)\n    if dist > c.radius + 3\n        return \"none\"\n    else if dist < c.radius - 3\n        return \"move\"\n    else if (abs c.x-x) >= (abs c.y-y)\n        return \"resizex\"\n    end\n    return \"resizey\"\nend\n\nfunc draw_grid\n    width 0.05\n    color \"hsl(0deg 100% 0% / 50%)\"\n    for i := range 0 101 10\n        move i 0\n        line i 100\n        move 0 i\n        line 100 i\n    end\nend\n\nfunc draw_circle\n    color \"red\"\n    move c.x c.y\n    circle c.radius\nend\n\nfunc draw_cross\n    color \"black\"\n    width 0.4\n    move c.x-1 c.y\n    line c.x+1 c.y\n    move c.x c.y-1\n    line c.x c.y+1\nend\n\nfunc draw_handles\n    color \"black\"\n    width 0.4\n    move c.x+c.radius c.y-1\n    line c.x+c.radius c.y+1\n    move c.x-c.radius c.y-1\n    line c.x-c.radius c.y+1\n    move c.x-1 c.y+c.radius\n    line c.x+1 c.y+c.radius\n    move c.x-1 c.y-c.radius\n    line c.x+1 c.y-c.radius\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend",
  "input: ",
  "input-text ",
  "input-evy grid\n\nmove 0 50\nwidth 0.5\n\npi := 3.14159265359\np := 10 * pi\np100 := 100 * p\ns := 2\nfor x := range 0 100 0.1\n    x100 := 100 * x\n    h := x100 % p100 / 100\n    y := (abs h-p/2) * s + (50 - s * p / 4)\n    line x y\nend\n\ncolor \"red\"\nmove 0 50\nfor x := range 0 100 0.1\n    y := (cos x*0.2)\n    line x y*pi*5+50\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy grid\n\nmove 0 50\nwidth 0.5\n\npi := 3.14159265359\np := 10 * pi\np100 := 100 * p\ns := 2\nfor x := range 0 100 0.1\n    x100 := 100 * x\n    h := x100 % p100 / 100\n    y := (abs h-p/2) * s + (50 - s * p / 4)\n    line x y\nend\n\ncolor \"red\"\nmove 0 50\nfor x := range 0 100 0.1\n    y := (cos x*0.2)\n    line x y*pi*5+50\nend\n\nfunc abs:num n:num\n    if n < 0\n        return -n\n    end\n    return n\nend",
  "input: ",
  "input-text ",
  "input-evy print \"print 1 2 3\"\nprint \"print 4 5 6\"",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print \"print 1 2 3\"\nprint \"print 4 5 6\"",
  "input: ",
  "input-text ",
  "input-evy // parameters\nk := 7 // linear\nexp := 1.1 // exponent\nstart := 0.5 // exponent\ncnt := 600\nhairLin := newHair cnt \"linear\"\nhairExp := newHair cnt \"exp\"\n\nframe := 0\n\non animate\n    frame = frame + 1\n    if frame % 2 == 0\n        return\n    end\n    clear \"red\"\n    whiten hairLin\n    drawHead 25 hairLin\n\n    whiten hairExp\n    drawHead 75 hairExp\n\n    if hairLin.props.cnt[0] == 0 and hairExp.props.cnt[0] == 0\n        exit 0\n    end\nend\n\nfunc whiten hair:{}{}[]num\n    if hair.props.style[0] == 1\n        // exponential\n        whitenCnt (round start) hair\n        start = start * exp\n    else\n        whitenCnt k hair // linear\n    end\nend\n\nfunc whitenCnt n:num hair:{}{}[]num\n    for range n\n        if hair.props.cnt[0] <= 0\n            return\n        end\n        cnt := hair.props.cnt[0] - 1\n        hair.props.cnt[0] = cnt\n        idx := hair.left.idx[cnt]\n        hair.left.black[idx] = 0\n        idx = hair.right.idx[cnt]\n        hair.right.black[idx] = 0\n    end\nend\n\nfunc drawHead x:num hair:{}{}[]num\n    drawFace x 60\n    drawHair x-4 56 265 hair.left.black // left\n    drawHair x-7 58 79 hair.right.black // right\nend\n\nfunc drawHair x:num y:num rot:num hair:[]num\n    width 0.1\n    fill \"none\"\n    d := 0\n    for i := range (len hair)\n        if hair[i] == 1\n            stroke \"black\"\n        else\n            stroke \"white\"\n        end\n        ellipse x+d y-d 31 17 rot 200 0\n        d = d + 0.02\n    end\nend\n\nfunc drawFace x:num y:num\n    color \"gold\"\n    move x y\n    circle 15\n    color \"black\"\n    width 1.5\n    move x-5 y\n    line x y-2\n    move x+7 y-2\n    line x+9 y-0.5\nend\n\nfunc shuffle arr:[]num\n    for x := range (len arr) 0 -1\n        i := rand x\n        h := arr[i]\n        arr[i] = arr[x - 1]\n        arr[x - 1] = h\n    end\nend\n\nfunc newHair:{}{}[]num cnt:num style:string\n    lb:[]num // left black hair\n    rb:[]num // right black hair\n    li:[]num // left shuffled index for white hair in order\n    ri:[]num // right shuffled index for white hair in order\n    for i := range cnt\n        lb = lb + [1]\n        rb = rb + [1]\n        li = li + [i]\n        ri = ri + [i]\n    end\n    shuffle li\n    shuffle ri\n    s := 0\n    if style == \"exp\"\n        s = 1\n    end\n    return {\n        left:{black:lb idx:li}\n        right:{black:rb idx:ri}\n        props:{cnt:[cnt] style:[s]}\n    }\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // parameters\nk := 7 // linear\nexp := 1.1 // exponent\nstart := 0.5 // exponent\ncnt := 600\nhairLin := newHair cnt \"linear\"\nhairExp := newHair cnt \"exp\"\n\nframe := 0\n\non animate\n    frame = frame + 1\n    if frame % 2 == 0\n        return\n    end\n    clear \"red\"\n    whiten hairLin\n    drawHead 25 hairLin\n\n    whiten hairExp\n    drawHead 75 hairExp\n\n    if hairLin.props.cnt[0] == 0 and hairExp.props.cnt[0] == 0\n        exit 0\n    end\nend\n\nfunc whiten hair:{}{}[]num\n    if hair.props.style[0] == 1\n        // exponential\n        whitenCnt (round start) hair\n        start = start * exp\n    else\n        whitenCnt k hair // linear\n    end\nend\n\nfunc whitenCnt n:num hair:{}{}[]num\n    for range n\n        if hair.props.cnt[0] <= 0\n            return\n        end\n        cnt := hair.props.cnt[0] - 1\n        hair.props.cnt[0] = cnt\n        idx := hair.left.idx[cnt]\n        hair.left.black[idx] = 0\n        idx = hair.right.idx[cnt]\n        hair.right.black[idx] = 0\n    end\nend\n\nfunc drawHead x:num hair:{}{}[]num\n    drawFace x 60\n    drawHair x-4 56 265 hair.left.black // left\n    drawHair x-7 58 79 hair.right.black // right\nend\n\nfunc drawHair x:num y:num rot:num hair:[]num\n    width 0.1\n    fill \"none\"\n    d := 0\n    for i := range (len hair)\n        if hair[i] == 1\n            stroke \"black\"\n        else\n            stroke \"white\"\n        end\n        ellipse x+d y-d 31 17 rot 200 0\n        d = d + 0.02\n    end\nend\n\nfunc drawFace x:num y:num\n    color \"gold\"\n    move x y\n    circle 15\n    color \"black\"\n    width 1.5\n    move x-5 y\n    line x y-2\n    move x+7 y-2\n    line x+9 y-0.5\nend\n\nfunc shuffle arr:[]num\n    for x := range (len arr) 0 -1\n        i := rand x\n        h := arr[i]\n        arr[i] = arr[x - 1]\n        arr[x - 1] = h\n    end\nend\n\nfunc newHair:{}{}[]num cnt:num style:string\n    lb:[]num // left black hair\n    rb:[]num // right black hair\n    li:[]num // left shuffled index for white hair in order\n    ri:[]num // right shuffled index for white hair in order\n    for i := range cnt\n        lb = lb + [1]\n        rb = rb + [1]\n        li = li + [i]\n        ri = ri + [i]\n    end\n    shuffle li\n    shuffle ri\n    s := 0\n    if style == \"exp\"\n        s = 1\n    end\n    return {\n        left:{black:lb idx:li}\n        right:{black:rb idx:ri}\n        props:{cnt:[cnt] style:[s]}\n    }\nend",
  "input: ",
  "input-text ",
  "input-evy streak := 0\nwidth 1\nfont {baseline:\"top\" family:\"arial\"}\ndrawCoins\n\non down x:num _:num\n    guess:string\n    if x < 50\n        guess = \"heads\"\n    else\n        guess = \"tails\"\n    end\n    clear\n    drawHighlight guess\n    drawCoins\n    sleep 0.3\n    clear\n    drawCoins\n    win := play guess\n    drawScore win\nend\n\nfunc drawCoins\n    color \"gold\"\n    stroke \"orange\"\n    // heads\n    move 25 50\n    circle 20\n    move 25 63\n    font {align:\"center\" size:34}\n    text \"🤪\"\n\n    // tails\n    move 75 50\n    circle 20\n    move 75 62\n    text \"🧜\\u200d♀️\"\n\n    // divider\n    color \"black\"\n    dash 5 5\n    move 50 0\n    line 50 90\n    dash\n\n    // labels\n    font {size:8}\n    move 25 27\n    text \"heads\"\n    move 75 27\n    text \"tails\"\nend\n\nfunc drawHighlight guess:string\n    if guess == \"heads\"\n        move 0 0\n    else\n        move 50 0\n    end\n    color \"magenta\"\n    rect 50 85\n\nend\n\nfunc drawScore win:bool\n    font {align:\"left\" size:4}\n    move 5 95\n    if !win\n        text \"You lose.\"\n        return\n    end\n    emojis:string\n    for range streak\n        emojis = emojis + \"🥳 \"\n    end\n    msg := sprintf \"You win! Streak %v %s\" streak emojis\n    text msg\nend\n\nfunc play:bool guess:string\n    result:string\n    r := rand 2\n    if r == 0\n        result = \"heads\"\n    else\n        result = \"tails\"\n    end\n    win := guess == result\n    if win\n        streak = streak + 1\n    else\n        streak = 0\n    end\n    return win\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy streak := 0\nwidth 1\nfont {baseline:\"top\" family:\"arial\"}\ndrawCoins\n\non down x:num _:num\n    guess:string\n    if x < 50\n        guess = \"heads\"\n    else\n        guess = \"tails\"\n    end\n    clear\n    drawHighlight guess\n    drawCoins\n    sleep 0.3\n    clear\n    drawCoins\n    win := play guess\n    drawScore win\nend\n\nfunc drawCoins\n    color \"gold\"\n    stroke \"orange\"\n    // heads\n    move 25 50\n    circle 20\n    move 25 63\n    font {align:\"center\" size:34}\n    text \"🤪\"\n\n    // tails\n    move 75 50\n    circle 20\n    move 75 62\n    text \"🧜\\u200d♀️\"\n\n    // divider\n    color \"black\"\n    dash 5 5\n    move 50 0\n    line 50 90\n    dash\n\n    // labels\n    font {size:8}\n    move 25 27\n    text \"heads\"\n    move 75 27\n    text \"tails\"\nend\n\nfunc drawHighlight guess:string\n    if guess == \"heads\"\n        move 0 0\n    else\n        move 50 0\n    end\n    color \"magenta\"\n    rect 50 85\n\nend\n\nfunc drawScore win:bool\n    font {align:\"left\" size:4}\n    move 5 95\n    if !win\n        text \"You lose.\"\n        return\n    end\n    emojis:string\n    for range streak\n        emojis = emojis + \"🥳 \"\n    end\n    msg := sprintf \"You win! Streak %v %s\" streak emojis\n    text msg\nend\n\nfunc play:bool guess:string\n    result:string\n    r := rand 2\n    if r == 0\n        result = \"heads\"\n    else\n        result = \"tails\"\n    end\n    win := guess == result\n    if win\n        streak = streak + 1\n    else\n        streak = 0\n    end\n    return win\nend",
  "input: ",
  "input-text ",
  "input-evy pi := 3.14159\n\n// --- starting position and size of the tree\n// trunk length\nstartSize := 30\n// pointing upwards!\nstartAngle := radians 90\n\n// --- specifies the tree colours\nrootColor := {hue:25 sat:64 light:20}\ntipColor := {hue:95 sat:89 light:36}\n\n// --- thickness of the branches\nrootWidth := 3\ntipWidth := 0.25\n\n// --- controls the shape of the tree\n// how much each branch turns from its parent\nangleChange := radians 45\n// how much smaller each branch is than its parent\nsizeChange := 0.63\n\n// --- controls the swaying of the tree\n// the current angle of sway\nangleOffset := 0\n// how fast we sway\nswaySpeed := 0.8\n// how far to sway\nswayAmount := 0.2\n// how much large branches sway\nlargeSway := 0.05\n// how much small branches sway\nsmallSway := 2\n\n// --- limits how many branches to draw\n// ⚠️ be careful changing this!\nmaxIter := 5 // maximum \"depth\" of branches\n// to draw\nminSize := 0.5 // minimum length of a branch\n\npaused := false\n\non animate t:num\n    if !paused\n        angleOffset = (sin (t / 1000 * swaySpeed)) * swayAmount\n    end\n\n    redraw\nend\n\nfunc redraw\n    clear \"#e3f8f7\"\n    width 0.5\n    color \"red\"\n    fill \"none\"\n\n    move 50 10\n    draw 50 10 startAngle startSize 0\nend\n\n// draws a branch and then draws its two children\nfunc draw x:num y:num angle:num size:num iter:num\n    if size < minSize or iter > maxIter\n        return\n    end\n\n    trunkWidth := remap size [minSize startSize] [tipWidth rootWidth]\n    width trunkWidth\n\n    sway := remap size [minSize startSize] [smallSway largeSway]\n\n    amount := remap iter [0 maxIter] [0 1]\n    color (colorMix rootColor tipColor amount)\n\n    newX := x + (cos angle) * size\n    newY := y + (sin angle) * size\n\n    // draw line for this branch\n    line newX newY\n\n    newAngle := angle + (angleOffset * sway)\n    newSize := size * sizeChange\n\n    // draw the left child branch\n    draw newX newY newAngle-angleChange newSize iter+1\n    // draw the right...\n    draw newX newY newAngle+angleChange newSize iter+1\n    // move back to the start\n    move x y\nend\n\n// converts from degrees to radians\nfunc radians:num degrees:num\n    return (degrees * pi) / 180\nend\n\n// interpolate from one number to another\n// amount is how far between a and b we get\n//\n// a ----------------------------- b\n// 0            0.5                1\nfunc interp:num a:num b:num amount:num\n    delta := b - a\n    return a + (delta * amount)\nend\n\n// colorMix is like interp but for colours\n// it blends between the two provided colours based on amount\n// and returns a string you can use with color()\nfunc colorMix:string a:{}num b:{}num amount:num\n    h := interp a.hue b.hue amount\n    s := interp a.sat b.sat amount\n    l := interp a.light b.light amount\n    return sprintf \"hsl(%.fdeg %.f%% %.f%%)\" h s l\nend\n\n// convert a number from one range to another\n// eg.\n//\n//   remap 5 [0 10] [50 100]\n//\n// would turn 5 into 75\nfunc remap:num in:num inRange:[]num outRange:[]num\n    result := in - inRange[0]\n    result = result / (inRange[1] - inRange[0])\n    result = result * (outRange[1] - outRange[0])\n    result = result + outRange[0]\n    return max outRange[0] (min outRange[1] result)\nend\n\non key k:string\n    if k == \" \"\n        paused = !paused\n    end\nend\n\non input id:string val:string\n    if id == \"sliderx\"\n        degreesValue := remap (str2num val) [0 100] [5 90]\n        angleChange = radians degreesValue\n    else\n        // sizeChange = remap (str2num val) [0 100] [0.458 0.9]\n\n        smallSway = remap (str2num val) [0 100] [0.5 5]\n    end\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy pi := 3.14159\n\n// --- starting position and size of the tree\n// trunk length\nstartSize := 30\n// pointing upwards!\nstartAngle := radians 90\n\n// --- specifies the tree colours\nrootColor := {hue:25 sat:64 light:20}\ntipColor := {hue:95 sat:89 light:36}\n\n// --- thickness of the branches\nrootWidth := 3\ntipWidth := 0.25\n\n// --- controls the shape of the tree\n// how much each branch turns from its parent\nangleChange := radians 45\n// how much smaller each branch is than its parent\nsizeChange := 0.63\n\n// --- controls the swaying of the tree\n// the current angle of sway\nangleOffset := 0\n// how fast we sway\nswaySpeed := 0.8\n// how far to sway\nswayAmount := 0.2\n// how much large branches sway\nlargeSway := 0.05\n// how much small branches sway\nsmallSway := 2\n\n// --- limits how many branches to draw\n// ⚠️ be careful changing this!\nmaxIter := 5 // maximum \"depth\" of branches\n// to draw\nminSize := 0.5 // minimum length of a branch\n\npaused := false\n\non animate t:num\n    if !paused\n        angleOffset = (sin (t / 1000 * swaySpeed)) * swayAmount\n    end\n\n    redraw\nend\n\nfunc redraw\n    clear \"#e3f8f7\"\n    width 0.5\n    color \"red\"\n    fill \"none\"\n\n    move 50 10\n    draw 50 10 startAngle startSize 0\nend\n\n// draws a branch and then draws its two children\nfunc draw x:num y:num angle:num size:num iter:num\n    if size < minSize or iter > maxIter\n        return\n    end\n\n    trunkWidth := remap size [minSize startSize] [tipWidth rootWidth]\n    width trunkWidth\n\n    sway := remap size [minSize startSize] [smallSway largeSway]\n\n    amount := remap iter [0 maxIter] [0 1]\n    color (colorMix rootColor tipColor amount)\n\n    newX := x + (cos angle) * size\n    newY := y + (sin angle) * size\n\n    // draw line for this branch\n    line newX newY\n\n    newAngle := angle + (angleOffset * sway)\n    newSize := size * sizeChange\n\n    // draw the left child branch\n    draw newX newY newAngle-angleChange newSize iter+1\n    // draw the right...\n    draw newX newY newAngle+angleChange newSize iter+1\n    // move back to the start\n    move x y\nend\n\n// converts from degrees to radians\nfunc radians:num degrees:num\n    return (degrees * pi) / 180\nend\n\n// interpolate from one number to another\n// amount is how far between a and b we get\n//\n// a ----------------------------- b\n// 0            0.5                1\nfunc interp:num a:num b:num amount:num\n    delta := b - a\n    return a + (delta * amount)\nend\n\n// colorMix is like interp but for colours\n// it blends between the two provided colours based on amount\n// and returns a string you can use with color()\nfunc colorMix:string a:{}num b:{}num amount:num\n    h := interp a.hue b.hue amount\n    s := interp a.sat b.sat amount\n    l := interp a.light b.light amount\n    return sprintf \"hsl(%.fdeg %.f%% %.f%%)\" h s l\nend\n\n// convert a number from one range to another\n// eg.\n//\n//   remap 5 [0 10] [50 100]\n//\n// would turn 5 into 75\nfunc remap:num in:num inRange:[]num outRange:[]num\n    result := in - inRange[0]\n    result = result / (inRange[1] - inRange[0])\n    result = result * (outRange[1] - outRange[0])\n    result = result + outRange[0]\n    return max outRange[0] (min outRange[1] result)\nend\n\non key k:string\n    if k == \" \"\n        paused = !paused\n    end\nend\n\non input id:string val:string\n    if id == \"sliderx\"\n        degreesValue := remap (str2num val) [0 100] [5 90]\n        angleChange = radians degreesValue\n    else\n        // sizeChange = remap (str2num val) [0 100] [0.458 0.9]\n\n        smallSway = remap (str2num val) [0 100] [0.5 5]\n    end\nend",
  "input: ",
  "input-text ",
  "input-evy color \"red\"\nmove 40 70\ncircle 9\n\ncolor \"pink\"\nmove 55 70\ncircle 9\n\ncolor \"blue\"\nmove 67 64\ncircle 9\n\ncolor \"pink\"\nmove 70 50\ncircle 9\n\nmove 70 40\ncolor \"red\"\ncircle 9\n\ncolor \"blue\"\nmove 60 30\ncircle 9\n\nmove 45 1\ncolor \"brown\"\nrect 10 60\n\nmove 30 60\ncolor \"blue\"\ncircle 9\n\nmove 30 45\ncolor \"pink\"\ncircle 9\n\nmove 38 33\ncolor \"red\"\ncircle 9\n\nmove 50 50\ncolor \"yellow\"\ncircle 17\n\ngrid",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy color \"red\"\nmove 40 70\ncircle 9\n\ncolor \"pink\"\nmove 55 70\ncircle 9\n\ncolor \"blue\"\nmove 67 64\ncircle 9\n\ncolor \"pink\"\nmove 70 50\ncircle 9\n\nmove 70 40\ncolor \"red\"\ncircle 9\n\ncolor \"blue\"\nmove 60 30\ncircle 9\n\nmove 45 1\ncolor \"brown\"\nrect 10 60\n\nmove 30 60\ncolor \"blue\"\ncircle 9\n\nmove 30 45\ncolor \"pink\"\ncircle 9\n\nmove 38 33\ncolor \"red\"\ncircle 9\n\nmove 50 50\ncolor \"yellow\"\ncircle 17\n\ngrid",
  "input: ",
  "input-text ",
  "input-evy a:string\nb := 2.4\n// --- missing line of code goes here ---\nprint a b",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy a:string\nb := 2.4\n// --- missing line of code goes here ---\nprint a b",
  "input: ",
  "input-text ",
  "input-evy theta := 0 // angle of black circle as it rotates around y axis\nr := 25 // black circle radius (hopefully)\ntau := 2 * 3.14159265359 // 1 rotation\nrotations_per_second := 0.05\nrotation_speed := rotations_per_second * tau // per second\n\nprev_t := 0 // elapsed time at start of last frame\ndelta_t := 0 // store milliseconds since last frame\n\non animate t:num\n    delta_t = t - prev_t\n    prev_t = t\n    deg := t / 3\n    theta = theta + rotation_speed * delta_t * 0.001\n    draw theta deg\nend\n\nfunc abs:num z:num\n    if z >= 0\n        return z\n    else\n        return -z\n    end\nend\n\nfunc draw theta:num deg:num\n    clear\n    gridn 50 \"lightgrey\"\n\n    // Ellipse seems to crash if x is negative.\n    // So take abs value -- this gives correct result\n    // for black circle, but position of red dot about circle\n    // is a bit incorrect -- it should change from clockwise\n    // to counterclockwise as we increase theta and flip\n    // the black circle so it is facing back to front.\n    x := (abs (r * (cos theta)))\n\n    // black circle\n    color \"black\"\n    width 0.3\n    fill \"none\"\n    ellipse 2*r 2*r x r\n\n    // red dot\n    color \"red\"\n    width 3\n    ellipse 2*r 2*r x r 0 deg deg+0.1\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy theta := 0 // angle of black circle as it rotates around y axis\nr := 25 // black circle radius (hopefully)\ntau := 2 * 3.14159265359 // 1 rotation\nrotations_per_second := 0.05\nrotation_speed := rotations_per_second * tau // per second\n\nprev_t := 0 // elapsed time at start of last frame\ndelta_t := 0 // store milliseconds since last frame\n\non animate t:num\n    delta_t = t - prev_t\n    prev_t = t\n    deg := t / 3\n    theta = theta + rotation_speed * delta_t * 0.001\n    draw theta deg\nend\n\nfunc abs:num z:num\n    if z >= 0\n        return z\n    else\n        return -z\n    end\nend\n\nfunc draw theta:num deg:num\n    clear\n    gridn 50 \"lightgrey\"\n\n    // Ellipse seems to crash if x is negative.\n    // So take abs value -- this gives correct result\n    // for black circle, but position of red dot about circle\n    // is a bit incorrect -- it should change from clockwise\n    // to counterclockwise as we increase theta and flip\n    // the black circle so it is facing back to front.\n    x := (abs (r * (cos theta)))\n\n    // black circle\n    color \"black\"\n    width 0.3\n    fill \"none\"\n    ellipse 2*r 2*r x r\n\n    // red dot\n    color \"red\"\n    width 3\n    ellipse 2*r 2*r x r 0 deg deg+0.1\nend",
  "input: ",
  "input-text ",
  "input-evy x:[]num\ny:[]num\nclear \"black\"\n\nfor range 20\n    x = x + [0]\n    y = y + [0]\nend\n\nsegLength := 3\n\nwidth 1\ncolor \"#ffffffb0\"\n\non move x:num y:num\n    draw x y\nend\n\nfunc draw mouseX:num mouseY:num\n    clear \"black\"\n    drawSegment 0 mouseX mouseY\n    for i := range (len x)-1\n        drawSegment i+1 x[i] y[i]\n    end\nend\n\nfunc drawSegment i:num xin:num yin:num\n    dx := xin - x[i]\n    dy := yin - y[i]\n    angle := atan2 dy dx\n    x[i] = xin - (cos angle) * segLength\n    y[i] = yin - (sin angle) * segLength\n    move x[i] y[i]\n    line x[i]+dx y[i]+dy\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy x:[]num\ny:[]num\nclear \"black\"\n\nfor range 20\n    x = x + [0]\n    y = y + [0]\nend\n\nsegLength := 3\n\nwidth 1\ncolor \"#ffffffb0\"\n\non move x:num y:num\n    draw x y\nend\n\nfunc draw mouseX:num mouseY:num\n    clear \"black\"\n    drawSegment 0 mouseX mouseY\n    for i := range (len x)-1\n        drawSegment i+1 x[i] y[i]\n    end\nend\n\nfunc drawSegment i:num xin:num yin:num\n    dx := xin - x[i]\n    dy := yin - y[i]\n    angle := atan2 dy dx\n    x[i] = xin - (cos angle) * segLength\n    y[i] = yin - (sin angle) * segLength\n    move x[i] y[i]\n    line x[i]+dx y[i]+dy\nend",
  "input: ",
  "input-text ",
  "input-evy print \"3\" .5",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print \"3\" .5",
  "input: ",
  "input-text ",
  "input-evy radius := 25\ndeg := 0\nxr := radius\n\non animate ms:num\n    deg = ms / 3\n    //    xr := xradius ms radius\n    draw xr radius deg\nend\n\nfunc xradius:num ms:num r:num\n    s := ms % 10000 / 1000 // repeat: 10s\n    if s < 2 or s > 10\n        // full circle; pause 2s\n        return 25\n    else if s > 5 and s < 7\n        // line; pause 2s\n        return 0.001\n    end\n    t := s - 2 // normalize for one pause: 2s\n    if s > 7\n        t = s - 4 // normalise for two pauses: 4s\n    end\n    xr := (cos t) + 1\n    return xr * r / 2 // scale by radius\nend\n\nfunc draw xr:num yr:num deg:num\n    clear\n    gridn 50 \"lightgrey\"\n\n    // black circle\n    color \"black\"\n    fill \"none\"\n    width 0.3\n    ellipse 50 50 xr yr\n\n    // red dot\n    color \"red\"\n    width 3\n    ellipse 50 50 xr yr 0 deg deg+0.05\nend\n\non input id:string val:string\n    if id != \"sliderx\"\n        return\n    end\n    n := str2num val\n    xr = n / 100 * radius + 0.001\n    draw xr radius deg\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy radius := 25\ndeg := 0\nxr := radius\n\non animate ms:num\n    deg = ms / 3\n    //    xr := xradius ms radius\n    draw xr radius deg\nend\n\nfunc xradius:num ms:num r:num\n    s := ms % 10000 / 1000 // repeat: 10s\n    if s < 2 or s > 10\n        // full circle; pause 2s\n        return 25\n    else if s > 5 and s < 7\n        // line; pause 2s\n        return 0.001\n    end\n    t := s - 2 // normalize for one pause: 2s\n    if s > 7\n        t = s - 4 // normalise for two pauses: 4s\n    end\n    xr := (cos t) + 1\n    return xr * r / 2 // scale by radius\nend\n\nfunc draw xr:num yr:num deg:num\n    clear\n    gridn 50 \"lightgrey\"\n\n    // black circle\n    color \"black\"\n    fill \"none\"\n    width 0.3\n    ellipse 50 50 xr yr\n\n    // red dot\n    color \"red\"\n    width 3\n    ellipse 50 50 xr yr 0 deg deg+0.05\nend\n\non input id:string val:string\n    if id != \"sliderx\"\n        return\n    end\n    n := str2num val\n    xr = n / 100 * radius + 0.001\n    draw xr radius deg\nend",
  "input: ",
  "input-text ",
  "input-evy clear \"aqua\"\nwidth 0.4\nline 10 100\nmove 0 10\nline 20 100\nmove 0 20\nline 30 100\nmove 0 30\nline 40 100\nmove 0 40\nline 50 100\nmove 0 50\nline 60 100\nmove 0 60\nline 70 100\nmove 0 70\nline 80 100\nmove 0 80\nline 90 100\nmove 0 90\nline 100 100",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy clear \"aqua\"\nwidth 0.4\nline 10 100\nmove 0 10\nline 20 100\nmove 0 20\nline 30 100\nmove 0 30\nline 40 100\nmove 0 40\nline 50 100\nmove 0 50\nline 60 100\nmove 0 60\nline 70 100\nmove 0 70\nline 80 100\nmove 0 80\nline 90 100\nmove 0 90\nline 100 100",
  "input: ",
  "input-text ",
  "input-evy on animate ms:num\n    deg := ms / 3\n    radius := 25\n    xr := xradius ms radius\n    draw xr radius deg\nend\n\nfunc xradius:num ms:num r:num\n    s := ms % 10000 / 1000 // repeat: 10s\n    if s < 2 or s > 10\n        // full circle; pause 2s\n        return 25\n    else if s > 5 and s < 7\n        // line; pause 2s\n        return 0.001\n    end\n    t := s - 2 // normalize for one pause: 2s\n    if s > 7\n        t = s - 4 // normalise for two pauses: 4s\n    end\n    xr := (cos t) + 1\n    return xr * r / 2 // scale by radius\nend\n\nfunc draw xr:num yr:num deg:num\n    clear\n    gridn 50 \"lightgrey\"\n\n    // black circle\n    color \"black\"\n    fill \"none\"\n    width 0.3\n    ellipse 50 50 xr yr\n\n    // red dot\n    color \"red\"\n    width 3\n    ellipse 50 50 xr yr 0 deg deg+0.05\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy on animate ms:num\n    deg := ms / 3\n    radius := 25\n    xr := xradius ms radius\n    draw xr radius deg\nend\n\nfunc xradius:num ms:num r:num\n    s := ms % 10000 / 1000 // repeat: 10s\n    if s < 2 or s > 10\n        // full circle; pause 2s\n        return 25\n    else if s > 5 and s < 7\n        // line; pause 2s\n        return 0.001\n    end\n    t := s - 2 // normalize for one pause: 2s\n    if s > 7\n        t = s - 4 // normalise for two pauses: 4s\n    end\n    xr := (cos t) + 1\n    return xr * r / 2 // scale by radius\nend\n\nfunc draw xr:num yr:num deg:num\n    clear\n    gridn 50 \"lightgrey\"\n\n    // black circle\n    color \"black\"\n    fill \"none\"\n    width 0.3\n    ellipse 50 50 xr yr\n\n    // red dot\n    color \"red\"\n    width 3\n    ellipse 50 50 xr yr 0 deg deg+0.05\nend",
  "input: ",
  "input-text can you solve fizzbuzz for me in evy",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text func fizzbuzz:[]string n:num\n    ans:[]string\n    for i := range 1 (n + 1)\n        s:string\n        if i % 3 == 0\n            s = s + \"Fizz\"\n        end\n        if i % 5 == 0\n            s = s + \"Buzz\"\n        end\n        if s == \"\"\n            s = sprintf \"%v\" i\n        end\n        ans = ans + [s]\n    end\n    return ans\nend\n\nfunc test\n    assert [\"1\" \"2\" \"Fizz\"]==(fizzbuzz 3)\n    assert [\"1\" \"2\" \"Fizz\" \"4\" \"Buzz\"]==(fizzbuzz 5)\n    assert [\"1\" \"2\" \"Fizz\" \"4\" \"Buzz\" \"Fizz\" \"7\" \"8\" \"Fizz\" \"Buzz\" \"11\" \"Fizz\" \"13\" \"14\" \"FizzBuzz\"]==(fizzbuzz 15)\nend",
  "output-evy ",
  "input: ",
  "input-text Can you fix this evy code for me?\n\n\nfunc findMedianSortedArrays:num nums1:[]num nums2:[]num\n    ls1 := len nums1\n    ls2 := len nums2\n    if ls1 < ls2\n        return findMedianSortedArrays nums2 nums1\n    end\n    l := 0\n    r := ls2 * 2\n    while l <= r\n        mid2 := (l + r) >> 1\n        mid1 := ls1 + ls2 - mid2\n        L1 := -2147483648 if mid1 == 0 else nums1[(mid1 - 1) >> 1]\n        L2 := -2147483648 if mid2 == 0 else nums2[(mid2 - 1) >> 1]\n        R1 := 2147483647 if mid1 == 2 * ls1 else nums1[mid1 >> 1]\n        R2 := 2147483647 if mid2 == 2 * ls2 else nums2[mid2 >> 1]\n        if L1 > R2\n            l = mid2 + 1\n        else if L2 > R1\n            r = mid2 - 1\n        else\n            return (max L1 L2 + min R1 R2) / 2\n        end\n    end\n    return -1\nend\n\nfunc test\n    s := {}\n    print (findMedianSortedArrays s [1 1] [1 2])\nend",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func findMedianSortedArrays:num nums1:[]num nums2:[]num\n    ls1 := len nums1\n    ls2 := len nums2\n    if ls1 < ls2\n        return findMedianSortedArrays nums2 nums1\n    end\n    l := 0\n    r := ls2 * 2\n    while l <= r\n        mid2 := (l + r) / 2\n        mid1 := ls1 + ls2 - mid2\n        R1:num\n        R2:num\n        L1:num\n        L2:num\n        if mid1 == 0\n            L1 = -2147483648\n        else\n            L1 = nums1[floor ((mid1 - 1) / 2)]\n        end\n        if mid2 == 0\n            L2 = -2147483648\n        else\n            L2 = nums2[floor ((mid2 - 1) / 2)]\n        end\n        if mid1 == 2 * ls1\n            R1 = 2147483647\n        else\n            R1 = nums1[floor (mid1 / 2)]\n        end\n        if mid2 == 2 * ls2\n            R2 = 2147483647\n        else\n            R2 = nums2[floor (mid2 / 2)]\n        end\n        if L1 > R2\n            l = mid2 + 1\n        else if L2 > R1\n            r = mid2 - 1\n        else\n            return ((max L1 L2) + (min R1 R2)) / 2\n        end\n    end\n    return -1\nend\n\nfunc test\n    print (findMedianSortedArrays [1 1] [1 2])\nend\ntest",
  "input: ",
  "input-text Write a recursive function in Evy to calculate the power of a number.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func power:num base:num exp:num\n    if exp == 0\n        return 1\n    else\n        return base * (power base exp-1)\n    end\nend\n\nprint (power 2 3) // Prints: 8",
  "input: ",
  "input-text Write an Evy function to calculate the sum of numbers in an array.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text func sum(numbers: []num): num {  // Function with an array parameter\n    total := 0\n    for num in numbers {\n        total += num\n    }\n    return total\n}",
  "output-evy ",
  "input: ",
  "input-text Which built-in function can I use to print output in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy print",
  "input: ",
  "input-text How do I draw a rectangle in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text rect",
  "output-evy ",
  "input: ",
  "input-text How do I declare and initialize a map variable in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text person := {\n    name:\"Alice\"\n    age:30\n}\nprint person",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python from collections import deque\n\ndef right_side_view(tree_arr):\n    \"\"\"\n    Finds the right side view of a binary tree represented as an array.\n\n    Args:\n        tree_arr: A list representing the binary tree in level order traversal.\n\n    Returns:\n        A list containing the values of nodes visible from the right side.\n    \"\"\"\n    root = build_binary_tree(tree_arr)  # Build the binary tree\n    queue = deque([root])  # Use a deque for efficient queue operations\n    res = []\n\n    while queue:\n        size = len(queue)\n        for i in range(size):\n            node = queue.popleft()\n            if node and i == size - 1:  # If it's the last node in the level\n                res.append(node[\"val\"])\n            if node and node.get(\"left\"):  # Check if left child exists\n                queue.append(node[\"left\"])\n            if node and node.get(\"right\"):  # Check if right child exists\n                queue.append(node[\"right\"])\n    return res\n\ndef build_binary_tree(tree):\n    \"\"\"\n    Builds a binary tree from a list representation.\n\n    Args:\n        tree: A list representing the binary tree in level order traversal.\n\n    Returns:\n        The root node of the constructed binary tree.\n    \"\"\"\n    if not tree:  # Empty tree\n        return None\n    root = {\"val\": tree[0]}\n    queue = deque([root])\n    i = 1\n    while queue and i < len(tree):\n        node = queue.popleft()\n        if tree[i] != \"null\":\n            node[\"left\"] = {\"val\": tree[i]}\n            queue.append(node[\"left\"])\n        i += 1\n        if i < len(tree) and tree[i] != \"null\":\n            node[\"right\"] = {\"val\": tree[i]}\n            queue.append(node[\"right\"])\n        i += 1\n\n    return root\n\ndef test():\n    \"\"\"Tests the right_side_view function.\"\"\"\n    assert right_side_view([1, 2, 3, \"null\", 5, \"null\", 4]) == [1, 3, 4]\n    assert right_side_view([1, \"null\", 3]) == [1, 3]\n    assert right_side_view([]) == []\n    assert right_side_view([1, 2, 3, 4]) == [1, 3, 4]\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func rightSideView:[]any treearr:[]any\n    root:any\n    root = buildBinaryTree treearr\n    queue := []\n    res := []\n    queue = queue + [root]\n    while (len queue) > 0\n        size := len queue\n        for i := range 0 size\n            node:{}any\n            node = queue[0].({}any)\n            queue = queue[1:]\n            if (has node \"val\") and i == size - 1\n                res = res + [node[\"val\"]]\n            end\n            if (has node \"left\") and node[\"left\"].({}any) != {}\n                queue = queue + [node[\"left\"]]\n            end\n            if (has node \"right\") and node[\"right\"].({}any) != {}\n                queue = queue + [node[\"right\"]]\n            end\n        end\n    end\n    return res\nend\n\nfunc buildBinaryTree:{}any tree:[]any\n    root:{}any\n    rootany:any\n    rootany = root\n    queue := [rootany]\n    for i := range 0 (len tree)\n        if (len queue) == 0\n            break\n        end\n        node:{}any\n        node = queue[0].({}any)\n        queue = queue[1:]\n        anynull:any\n        anynull = \"null\"\n        if tree[i] != anynull\n            node[\"val\"] = tree[i]\n            node[\"left\"] = {}\n            node[\"right\"] = {}\n            queue = queue + [node[\"left\"]]\n            queue = queue + [node[\"right\"]]\n        end\n    end\n    return root\nend\n\nfunc test\n    assert [1 3 4 \"\"][:-1]==(rightSideView [1 2 3 \"null\" 5 \"null\" 4])\n    assert [1 3 \"\"][:-1]==(rightSideView [1 \"null\" 3])\n    assert []==(rightSideView [])\n    assert [1 3 4 \"\"][:-1]==(rightSideView [1 2 3 4])\nend",
  "input: ",
  "input-text Write an if-else statement in Evy that checks if a score is excellent, great, or needs practice.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy score := 85\nif score >= 90\n    print \"Excellent!\"\nelse if score >= 80\n    print \"Great job!\"\nelse\n    print \"Keep practicing.\"\nend",
  "input: ",
  "input-text How do I declare a map in Evy and access its values?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy person := {name: \"Alice\" age: 30 city: \"New York\"}\nprint person[\"name\"] // Prints: Alice\nprint person[\"age\"] // Prints: 30",
  "input: ",
  "input-text How do I clear the screen in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy cls",
  "input: ",
  "input-text How can I generate a random integer in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text rand",
  "output-evy ",
  "input: ",
  "input-text What is the purpose of the 'panic' function?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text anic prints the given error message and terminates the program immediately. It is used to report unrecoverable errors.",
  "output-evy ",
  "input: ",
  "input-text Can you fix this code for me?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func minOperationsMaxProfit:num customers:[]num boardingCost:num runningCost:num\n    profit := 0\n    preprofit := 0\n    cuscount := customers[0]\n    j := 1\n    i := 1\n    roundcus := 0\n    if boardingCost == 4 and runningCost == 4\n        return 5\n    end\n    if boardingCost == 43 and runningCost == 54\n        return 993\n    end\n    if boardingCost == 92 and runningCost == 92\n        return 243550\n    end\n    while cuscount != 0 or i != (len customers)\n        if cuscount > 3\n            roundcus = roundcus + 4\n            preprofit = profit\n            profit = (roundcus * boardingCost) - (j * runningCost)\n            if preprofit >= profit\n                break\n            end\n            j = j + 1\n            cuscount = cuscount - 4\n            if i < (len customers)\n                cuscount = cuscount + customers[i]\n                i = i + 1\n            end\n        else\n            roundcus = roundcus + cuscount\n            preprofit = profit\n            profit = (roundcus * boardingCost) - (j * runningCost)\n            if preprofit >= profit\n                break\n            end\n            cuscount = 0\n            j = j + 1\n            if i < (len customers)\n                cuscount = cuscount + customers[i]\n                i = i + 1\n            end\n        end\n    end\n    if profit < 0\n        return -1\n    else\n        return j - 1\n    end\nend\n\nn := [10 10 6 4 7]\nb := 3\nr := 8\nprint (minOperationsMaxProfit n b r)",
  "input: ",
  "input-text How do I write a multi-line comment in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text /* \nThis is a \nmulti-line comment \n*/",
  "output-evy ",
  "input: ",
  "input-text When is the 'key' event handler called?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text key is called when a key on the keyboard is pressed.",
  "output-evy ",
  "input: ",
  "input-text How can I use recursion in Evy to calculate the sum of digits of a number?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func sum_digits:num n:num\n    if n < 10\n        return n\n    else\n        return (n % 10) + (sum_digits (floor n/10))\n    end\nend\n\nprint (sum_digits 12345) // Prints: 15",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def rob(nums):\n    \"\"\"\n    Calculates the maximum amount of money a robber can steal from a row of houses\n    without robbing adjacent houses.\n\n    Args:\n        nums: A list of non-negative integers representing the amount of money in each house.\n\n    Returns:\n        The maximum amount of money the robber can steal.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0  # Handle the case of an empty house list\n    if n == 1:\n        return nums[0]  # If there's only one house, take it\n\n    # Initialize variables to track the maximum amount stolen at the previous two houses\n    prev_max = nums[0]\n    curr_max = max(nums[0], nums[1])\n\n    for i in range(2, n):\n        # Update current max using previous two max values\n        temp = curr_max\n        curr_max = max(curr_max, prev_max + nums[i])\n        prev_max = temp\n\n    return curr_max  # Return the maximum amount stolen\n\n\ndef test():\n    assert rob([1, 2, 3, 1]) == 4\n    assert rob([2, 7, 9, 3, 1]) == 12\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func rob:num nums:[]num\n    n := len nums\n    max_steal := nums\n    if n > 1\n        max_steal[1] = max nums[0] nums[1]\n    end\n    for i := range 2 n\n        max_steal[i] = max (max_steal[i - 1]) (max_steal[i - 2] + nums[i])\n    end\n    return max_steal[-1]\nend\n\n\n\nfunc test\n    assert 4==(rob [1 2 3 1])\n    assert 12==(rob [2 7 9 3 1])\nend",
  "input: ",
  "input-text How do I find the index of a specific element in an array?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text func find_index:num arr:[]num elem:num\n    for i := range arr\n        if arr[i] == elem\n            return i\n        end\n    end\n    return -1\nend\n\nnumbers := [1 2 3 4 5]\nindex := find_index numbers 3\nprint index // Prints: 2prompt How do I check if an array contains a specific element?output func contains:bool arr:[]num elem:num\n    for i := range arr\n        if arr[i] == elem\n            return true\n        end\n    end\n    return false\nend\n\nnumbers := [1 2 3 4 5]\nprint (contains numbers 3) // Prints: true\nprint (contains numbers 6) // Prints: false",
  "output-evy ",
  "input: ",
  "input-text What function draws a circle in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text circle",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python age = 25\nif age >= 18:\n    print(\"You are an adult.\")\nelse:\n    print(\"You are a minor.\")\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1",
  "output: ",
  "output-text ",
  "output-evy age := 25\nif (age >= 18)\n    print (\"You are an adult.\")\n else\n    print (\"You are a minor.\")\nend\ncount := 0\nwhile (count < 5)\n    print (count)\n    count = count + 1\nend",
  "input: ",
  "input-text What is the 'sleep' function used for?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text sleep pauses the program for the given number of seconds.",
  "output-evy ",
  "input: ",
  "input-text How do I remove an element from an array at a specific index?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func remove_at_index:[]num arr:[]num idx:num\n    if idx < 0 or idx >= (len arr)\n        return arr\n    end\n    return arr[:idx] + arr[idx + 1:]\nend\n\nnumbers := [1 2 3 4 5]\nnumbers = remove_at_index numbers 2\nprint numbers // Prints: [1 2 4 5]",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def two_sum(nums, target):\n    num_dict = {}\n    for i, v in enumerate(nums):\n        if str(target - v) in num_dict:\n            return [num_dict[str(v)], i]\n        num_dict[str(v)] = i\n    return []\n\ndef test():\n    assert two_sum([2, 7, 11, 15], 9) == [0, 1]\n    assert two_sum([3, 2, 4], 6) == [1, 2]\n    assert two_sum([3, 3], 6) == [0, 1]",
  "output: ",
  "output-text ",
  "output-evy func twosum:[]num nums:[]num target:num\n    m:{}num\n    for i := range (len nums)\n        v := nums[i]\n        if has m (sprintf \"%v\" (target - v))\n            return [m[sprintf \"%v\" (target - v)] i]\n        end\n        m[sprintf \"%v\" v] = i\n    end\n    return []\nend\n\nfunc test\n    assert [0 1]==(twosum [2 7 11 15] 9)\n    assert [1 2]==(twosum [3 2 4] 6)\n    assert [0 1]==(twosum [3 3] 6)\nend",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def greet(name):\n    print(\"Hello,\", name)\ngreet(\"Alice\")\n\ndef concat(a: str, b: str) -> str:\n    return a + b\n\ndef calculate_area(length, width):\n    area = length * width\n    return area\n\n\na = \"foo\"\nb = \"bar\"\nprint(concat(a, b))\nresult = calculate_area(5, 8)\nprint(\"Area of the rectangle:\", result)",
  "output: ",
  "output-text ",
  "output-evy func greet name:string\n    print (\"Hello,\") (name)\nend\n\nfunc concat:string a:string b:string\n    return (a + b)\nend\n\nfunc calculateArea:num length:num _width:num\n    area := (length * _width)\n    return area\nend\n\ngreet (\"Alice\")\na := \"foo\"\nb := \"bar\"\nprint (concat (a) (b))\nresult := calculateArea (5) (8)\nprint (\"Area of the rectangle:\") (result)",
  "input: ",
  "input-text How do I write a for loop to iterate 10 times in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy for i := range 10\n    print i\nend",
  "input: ",
  "input-text What are built-ins in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text Built-ins in Evy are pre-defined functions and events that allow for user interaction, graphics, animation, mathematical operations, and more.",
  "output-evy ",
  "input: ",
  "input-text How do I find the product of all numbers in an array?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func product_array:num arr:[]num\n    product := 1\n    for n := range arr\n        product = product * n\n    end\n    return product\nend\n\nnumbers := [1 2 3 4 5]\nproduct := product_array numbers\nprint product // Prints: 120",
  "input: ",
  "input-text What function splits a string into a list of substrings based on a separator in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text split",
  "output-evy ",
  "input: ",
  "input-text How can I convert a string to a number in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text str2num",
  "output-evy ",
  "input: ",
  "input-text How do I use an if-else statement to check if a number is even or odd in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy number := 5\nif number % 2 == 0\n    print \"Even\"\nelse\n    print \"Odd\"\nend",
  "input: ",
  "input-text How do I use a `for` loop to iterate through the elements of a map in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy person := {name:\"Alice\" age:30 city:\"New York\"}\nfor key := range person\n    value := person[key]\n    print key \":\" value\nend",
  "input: ",
  "input-text What function sets the font properties for text in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text font",
  "output-evy ",
  "input: ",
  "input-text Can you fix this code for me?",
  "input-evy func maximalRectangle:num matrix:[][]string\n    if matrix == [] or (len matrix) == 0\n        return 0\n    end\n    lsRow := len matrix\n    lsCol := len matrix[0]\n    left := [0] * lsCol\n    right := [lsCol] * lsCol\n    height := [0] * lsCol\n    maxA := 0\n    for i := range lsRow\n        currLeft := 0\n        currRight := lsCol\n        for j := range lsCol\n            if matrix[i][j] == \"1\"\n                height[j] = height[j] + 1\n            else\n                height[j] = 0\n            end\n        end\n        for j := range lsCol\n            if matrix[i][j] == \"1\"\n                left[j] = max left[j] currLeft\n            else\n                left[j] = 0\n                currLeft = j + 1\n            end\n        end\n        for j := range (lsCol - 1) -1 -1\n            if matrix[i][j] == \"1\"\n                right[j] = min right[j] currRight\n            else\n                right[j] = lsCol\n                currRight = j\n            end\n        end\n        for j := range lsCol\n            maxA = max maxA ((right[j] - left[j]) * height[j])\n        end\n    end\n    return maxA\nend\n\nfunc test\n    assert 6 (maximalRectangle [[\"1\" \"0\" \"1\" \"0\" \"0\"] [\"1\" \"0\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\" \"1\"] [\"1\" \"0\" \"0\" \"1\" \"0\"]])\n    assert 0 (maximalRectangle [[\"0\" \"0\"] [\"0\" \"0\"]])\n    assert 1 (maximalRectangle [[\"1\"]])\n    assert 4 (maximalRectangle [[\"1\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\"]])",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func maximalRectangle:num matrix:[][]string\n    if matrix == [] or (len matrix) == 0\n        return 0\n    end\n    lsRow := len matrix\n    lsCol := len matrix[0]\n    left := [0] * lsCol\n    right := [lsCol] * lsCol\n    height := [0] * lsCol\n    maxA := 0\n    for i := range lsRow\n        currLeft := 0\n        currRight := lsCol\n        for j := range lsCol\n            if matrix[i][j] == \"1\"\n                height[j] = height[j] + 1\n            else\n                height[j] = 0\n            end\n        end\n        for j := range lsCol\n            if matrix[i][j] == \"1\"\n                left[j] = max left[j] currLeft\n            else\n                left[j] = 0\n                currLeft = j + 1\n            end\n        end\n        for j := range (lsCol - 1) -1 -1\n            if matrix[i][j] == \"1\"\n                right[j] = min right[j] currRight\n            else\n                right[j] = lsCol\n                currRight = j\n            end\n        end\n        for j := range lsCol\n            maxA = max maxA ((right[j] - left[j]) * height[j])\n        end\n    end\n    return maxA\nend\n\nfunc test\n    assert 6 (maximalRectangle [[\"1\" \"0\" \"1\" \"0\" \"0\"] [\"1\" \"0\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\" \"1\"] [\"1\" \"0\" \"0\" \"1\" \"0\"]])\n    assert 0 (maximalRectangle [[\"0\" \"0\"] [\"0\" \"0\"]])\n    assert 1 (maximalRectangle [[\"1\"]])\n    assert 12 (maximalRectangle [[\"1\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\"]])\nend\ntest",
  "input: ",
  "input-text How do I use the 'sleep' function to pause the program for 2 seconds in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text How do I use the 'sleep' function to pause the program for 2 seconds in Evy?",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python fruits = [\"apple\", \"banana\", \"orange\"]\nprint(fruits[0])\nfruits.append(\"grape\")\nprint(fruits)",
  "output: ",
  "output-text ",
  "output-evy fruits := [\"apple\" \"banana\" \"orange\"]\nprint (fruits[0])\nfruits =  (fruits) + ([\"grape\"])\nprint (fruits)",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def check_inclusion(s1, s2):\n    \"\"\"\n    Checks if one string (s1) is a permutation of a substring of another string (s2).\n\n    Args:\n        s1: The potential permutation string.\n        s2: The string to search within.\n\n    Returns:\n        True if s1 is a permutation of a substring of s2, False otherwise.\n    \"\"\"\n    if len(s1) > len(s2):\n        return False\n\n    s1_count = {}\n    s2_count = {}\n\n    # Initialize character counts for the first window\n    for i in range(len(s1)):\n        s1_count[s1[i]] = s1_count.get(s1[i], 0) + 1\n        s2_count[s2[i]] = s2_count.get(s2[i], 0) + 1\n\n    l = 0  # Left pointer of the sliding window\n\n    for r in range(len(s1), len(s2)):  # Iterate with the right pointer\n        if s1_count == s2_count:\n            return True  # Permutation found\n\n        # Update counts for the sliding window\n        s2_count[s2[r]] = s2_count.get(s2[r], 0) + 1  # Add the new character\n        s2_count[s2[l]] -= 1                         # Remove the old character\n        if s2_count[s2[l]] == 0:\n            del s2_count[s2[l]]\n        l += 1  # Move the window\n\n    return s1_count == s2_count  # Check one last time after the loop\n\n\ndef test():\n    assert check_inclusion(\"ab\", \"ab\") == True\n    assert check_inclusion(\"ab\", \"eidbaooo\") == True\n    assert check_inclusion(\"ab\", \"eidboaoo\") == False\n    assert check_inclusion(\"ab\", \"a\") == False\n    # Additional test case to catch the issue\n    assert check_inclusion(\"adc\", \"dcda\") == True\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func checkInclusion:bool s1:string s2:string\n    if (len s1) > (len s2)\n        return false\n    end\n    s1count:{}num\n    s2count:{}num\n    for i := range (len s1)\n        if !(has s1count s1[i])\n            s1count[s1[i]] = 0\n            s2count[s2[i]] = 0\n        end\n        s1count[s1[i]] = s1count[s1[i]] + 1\n        s2count[s2[i]] = s2count[s2[i]] + 1\n    end\n    l := 0\n    while l + (len s1) < (len s2)\n        if s1count == s2count\n            return true\n        end\n        start := s2[l] // The character at the start of the current window. To be removed\n        finish := s2[l + (len s1)] // the character after the end of the current window. To be added\n        s2count[start] = s2count[start] - 1\n        if s2count[start] == 0\n            del s2count start\n        end\n        if !(has s2count finish)\n            s2count[finish] = 0\n        end\n        s2count[finish] = s2count[finish] + 1\n        l = l + 1\n    end\n    return s1count == s2count\nend\n\nfunc test\n    assert true==(checkInclusion \"ab\" \"ab\")\n    assert true==(checkInclusion \"ab\" \"eidbaooo\")\n    assert false==(checkInclusion \"ab\" \"eidboaoo\")\n    assert false==(checkInclusion \"ab\" \"a\")\nend",
  "input: ",
  "input-text How can I print a string representation of arguments without a newline in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy sprint",
  "input: ",
  "input-text What is the coordinate system used for drawing in Evy on the web?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text Evy uses a coordinate system similar to the Cartesian coordinate system, with the horizontal dimension called the x-axis and the vertical dimension called the y-axis.",
  "output-evy ",
  "input: ",
  "input-text What are the available event handlers in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text key, down, up, move, animate, input",
  "output-evy ",
  "input: ",
  "input-text Show me an example of an arithmetic expression in Evy.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text result := 5 * (3 + 3.1415) - 2 / 7.6\nprint result",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python message = \"Hello, Python!\"\ncounter = 42\nprice = 19.99\nis_active = True\nprint(message, counter, price, is_active)",
  "output: ",
  "output-text ",
  "output-evy message := \"Hello, Python!\"\ncounter := 42\nprice := 19.99\nis_active := true\nprint (message) (counter) (price) (is_active)",
  "input: ",
  "input-text How can I clear the canvas in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy clear",
  "input: ",
  "input-text How can I learn more about the formal definition of Evy syntax?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text See the [Language Specification](spec.md).",
  "output-evy ",
  "input: ",
  "input-text How does the 'printf' function work in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text rintf stands for print formatted. It prints its arguments to the output area according to a format string, which contains specifiers that start with a percent sign '%' to indicate how and where to print the remaining arguments.",
  "output-evy ",
  "input: ",
  "input-text Which function returns the type of an argument as a string value in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text of",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def fibonacci(n):\n    \"\"\"Calculates the nth Fibonacci number iteratively.\"\"\"\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n - 1):  # Loop n - 1 times since we already have the first two numbers\n        a, b = b, a + b   # Elegant simultaneous assignment for updating\n    return b\n\n\ndef test():\n    \"\"\"Tests the fibonacci function.\"\"\"\n    assert fibonacci(2) == 1\n    assert fibonacci(3) == 2\n    assert fibonacci(4) == 3\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func fibonacci:num n:num\n    zero := 0\n    one := 1\n    for range 1 n\n        tmp := one\n        one = one + zero\n        zero = tmp\n    end\n    return one\nend\n\nfunc test\n    assert 1==(fibonacci 2)\n    assert 2==(fibonacci 3)\n    assert 3==(fibonacci 4)\nend",
  "input: ",
  "input-text How would I write a logical expression in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy flag := true and false or !(5 > 3)\nprint flag",
  "input: ",
  "input-text Where can I find examples to understand Evy syntax intuitively?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text See [syntax by example](syntax_by_example.md).",
  "output-evy ",
  "input: ",
  "input-text Convert this into evy:",
  "input-evy ",
  "input-python class Solution:\n    def minOperationsMaxProfit(self, customers, boardingCost, runningCost):\n        profit =0\n        preprofit=0\n        cuscount = customers[0] \n        j=1\n        i=1\n        roundcus =0\n        if boardingCost ==4 and runningCost ==4:\n            return 5\n        if boardingCost ==43 and runningCost ==54:\n            return 993\n        if boardingCost ==92 and runningCost ==92:\n            return 243550\n        while cuscount != 0 or i!=len(customers):\n          if cuscount > 3:\n            roundcus +=4\n            preprofit = profit\n            profit = (roundcus*boardingCost)-(j*runningCost)\n            if preprofit >= profit:\n              break\n            j+=1\n            cuscount-=4\n            if i < len(customers):\n              cuscount += customers[i]\n              i+=1\n          else:\n            roundcus+=cuscount\n            preprofit = profit\n            profit = (roundcus*boardingCost)-(j*runningCost)\n            if preprofit >= profit:\n              break\n\n            cuscount = 0\n            j+=1\n            if i < len(customers):\n              cuscount += customers[i]\n              i+=1\n        if profit < 0:\n          return (-1)\n        else:\n          return (j-1)\n  \ns1 = Solution()\nnum = [10,10,6,4,7]\nb = 3\nr = 8\nprint(s1.minOperationsMaxProfit(num,b,r))",
  "output: ",
  "output-text ",
  "output-evy func minOperationsMaxProfit:num customers:[]num boardingCost:num runningCost:num\n    profit := 0\n    preprofit := 0\n    cuscount := customers[0]\n    j := 1\n    i := 1\n    roundcus := 0\n    if boardingCost == 4 and runningCost == 4\n        return 5\n    end\n    if boardingCost == 43 and runningCost == 54\n        return 993\n    end\n    if boardingCost == 92 and runningCost == 92\n        return 243550\n    end\n    while cuscount != 0 or i != (len customers)\n        if cuscount > 3\n            roundcus = roundcus + 4\n            preprofit = profit\n            profit = (roundcus * boardingCost) - (j * runningCost)\n            if preprofit >= profit\n                break\n            end\n            j = j + 1\n            cuscount = cuscount - 4\n            if i < (len customers)\n                cuscount = cuscount + customers[i]\n                i = i + 1\n            end\n        else\n            roundcus = roundcus + cuscount\n            preprofit = profit\n            profit = (roundcus * boardingCost) - (j * runningCost)\n            if preprofit >= profit\n                break\n            end\n            cuscount = 0\n            j = j + 1\n            if i < (len customers)\n                cuscount = cuscount + customers[i]\n                i = i + 1\n            end\n        end\n    end\n    if profit < 0\n        return -1\n    else\n        return j - 1\n    end\nend\n\nn := [10 10 6 4 7]\nb := 3\nr := 8\nprint (minOperationsMaxProfit n b r)",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python x = 10\ny = 5\nprint(x + y)\nprint(x - y)\nprint(x * y)\nprint(x / y)\nprint(x % y)",
  "output: ",
  "output-text ",
  "output-evy x := 10\ny := 5\nprint ((x + y))\nprint ((x - y))\nprint ((x * y))\nprint ((x / y))\nprint ((x % y))",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) âžž False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) âžž False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) âžž True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) âžž True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i",
  "output: ",
  "output-text ",
  "output-evy // Write a function that returns True if the object q will fly, and False\n// otherwise. The object q will fly if it's balanced (it is a palindromic\n// list) and the sum of its elements is less than or equal the maximum\n// possible weight w.\n//\n// Example:\n// willFly [1 2] 5 âžž False\n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n//\n// willFly [3 2 3] 1 âžž False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n//\n// willFly [3 2 3] 9 âžž True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n//\n// willFly [3] 5 âžž True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunc willFly:bool nums:[]num w:num\n    length := len nums\n    if length == 0\n        return false\n    end\n    sum := 0\n    for n := range nums\n        sum = sum + n\n    end\n    if sum > w\n        return false\n    end\n    for i := range (floor length/2)\n        if nums[i] != nums[-i - 1]\n            return false\n        end\n    end\n    return true\nend\n\nfunc test\n    assert true==(willFly [3 2 3] 9)\n    assert false==(willFly [1 2] 5)\n    assert true==(willFly [3] 5)\n    assert false==(willFly [3 2 3] 1)\n    assert false==(willFly [1 2 3] 6)\n    assert true==(willFly [5] 5)\nend",
  "input: ",
  "input-text What does the 'has' function do for maps in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text as returns whether a map has a given key or not.",
  "output-evy ",
  "input: ",
  "input-text What is the purpose of the 'cls' function?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text cls clears the output area of all printed text.",
  "output-evy ",
  "input: ",
  "input-text Give an example of using typeof to check the type of a variable in Evy.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text if typeof y == \"string\" {\n    print y\n}",
  "output-evy ",
  "input: ",
  "input-text How can I calculate the natural logarithm of a number in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text log",
  "output-evy ",
  "input: ",
  "input-text Can you convert this to evy for me?",
  "input-evy ",
  "input-python from typing import List\n\nclass Solution:\n    def runningSum(self, nums: List[int]) -> List[int]:\n        if nums is None or len(nums) == 0:\n            return nums\n        for i in range(1, len(nums)):\n            nums[i] += nums[i-1]\n        return nums",
  "output: ",
  "output-text ",
  "output-evy func runningSum:[]num nums:[]num\n    if nums == []\n        return nums\n    end\n    for i := range 1 (len nums)\n        nums[i] = nums[i] + nums[i - 1]\n    end\n    return nums\nend\n\nfunc test\n    assert [1 3 6 10] (runningSum [1 2 3 4])\n    assert [1 2 3 4 5] (runningSum [1 1 1 1 1])\n    assert [0 1 3 6 10] (runningSum [0 1 2 3 4])\n    assert [] (runningSum [])\nend\ntest",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def length_of_longest_substring(s):\n    seen = {}\n    longest_substring = 0\n    start_idx = 0\n    for i, elem in enumerate(s):\n        if elem in seen:\n            start_idx = max(start_idx, seen[elem] + 1)\n        seen[elem] = i\n        longest_substring = max(longest_substring, i - start_idx + 1)\n    return longest_substring\n\ndef test():\n    assert length_of_longest_substring(\"abcabcbb\") == 3\n    assert length_of_longest_substring(\"bbbbb\") == 1\n    assert length_of_longest_substring(\"pwwkew\") == 3\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func lengthOfLongestSubstring:num s:string\n    seen:{}num\n    longestsubstring := 0\n    startIdx := 0\n    for i := range (len s)\n        elem := s[i]\n        if has seen elem\n            startIdx = max startIdx (seen[elem] + 1)\n        end\n        seen[elem] = i\n        longestsubstring = max longestsubstring (i - startIdx + 1)\n    end\n    return longestsubstring\nend\n\nfunc test\n    assert 3==(lengthOfLongestSubstring \"abcabcbb\")\n    assert 1==(lengthOfLongestSubstring \"bbbbb\")\n    assert 3==(lengthOfLongestSubstring \"pwwkew\")\nend",
  "input: ",
  "input-text What is the difference between 'stroke' and 'fill' in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text stroke sets the color of the outline of shapes, while fill sets the color of the interior.",
  "output-evy ",
  "input: ",
  "input-text How do I find the sum of all numbers in an array?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func sum_array:num arr:[]num\n    sum := 0\n    for n := range arr\n        sum = sum + n\n    end\n    return sum\nend\n\nnumbers := [1 2 3 4 5]\nsum := sum_array numbers\nprint sum // Prints: 15",
  "input: ",
  "input-text How do I find the index of a specific element in an array?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func find_index:num arr:[]num elem:num\n    for i := range arr\n        if arr[i] == elem\n            return i\n        end\n    end\n    return -1\nend\n\nnumbers := [1 2 3 4 5]\nidx := find_index numbers 3\nprint idx // Prints: 2",
  "input: ",
  "input-text What does the 'down' event handler do?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text down is called when the pointer is pressed down.",
  "output-evy ",
  "input: ",
  "input-text Give me an example of a while loop that counts from 0 to 4 in Evy.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy count := 0\nwhile count < 5\n    print count\n    count = count + 1  // Or use the shorthand: count += 1\nend",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def contains_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef test():\n    assert contains_duplicate([1, 2, 3, 1])\n    assert not contains_duplicate([1, 2, 3, 4])\n    assert contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2])\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func containsDuplicate:bool nums:[]num\n    seen := {}\n    for ii := range nums\n        i := sprint ii\n        if has seen i\n            return true\n        end\n        seen[i] = true\n    end\n    return false\nend\n\nfunc test\n    assert true==(containsDuplicate [1 2 3 1])\n    assert false==(containsDuplicate [1 2 3 4])\n    assert true==(containsDuplicate [1 1 1 3 3 4 3 2 4 2])\nend",
  "input: ",
  "input-text Write a function named 'greet' in Evy that prints a greeting with a given name.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text func greet name:string\n    print \"Hello, \" + name + \"!\"\nend",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python x = 10\ny = 5\nprint(x > y)\nprint(x < y)\nprint(x == y)\nprint(x != y)\nprint(x > 5 and y < 10)\nprint(x > 5 or y > 10)\nprint(not (x > 5))",
  "output: ",
  "output-text ",
  "output-evy x := 10\ny := 5\nprint ((x > y))\nprint ((x < y))\nprint ((x == y))\nprint ((x != y))\nprint ((x > 5 and y < 10))\nprint ((x > 5 or y > 10))\nprint ((!((x > 5))))",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def fizzbuzz(n):\n    ans = []\n    for i in range(1, n+1):\n        s = \"\"\n        if i % 3 == 0:\n            s += \"Fizz\"\n        if i % 5 == 0:\n            s += \"Buzz\"\n        if not s:\n            s = str(i)\n        ans.append(s)\n    return ans\n\ndef test():\n    assert fizzbuzz(1) == [\"1\"]\n    assert fizzbuzz(3) == [\"1\", \"2\", \"Fizz\"]\n    assert fizzbuzz(5) == [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\"]\n    assert fizzbuzz(15) == [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\"]\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func fizzbuzz:[]string n:num\n    ans:[]string\n    for i := range 1 (n + 1)\n        s:string\n        if i % 3 == 0\n            s = s + \"Fizz\"\n        end\n        if i % 5 == 0\n            s = s + \"Buzz\"\n        end\n        if s == \"\"\n            s = sprintf \"%v\" i\n        end\n        ans = ans + [s]\n    end\n    return ans\nend\n\nfunc test\n    assert [\"1\" \"2\" \"Fizz\"]==(fizzbuzz 3)\n    assert [\"1\" \"2\" \"Fizz\" \"4\" \"Buzz\"]==(fizzbuzz 5)\n    assert [\"1\" \"2\" \"Fizz\" \"4\" \"Buzz\" \"Fizz\" \"7\" \"8\" \"Fizz\" \"Buzz\" \"11\" \"Fizz\" \"13\" \"14\" \"FizzBuzz\"]==(fizzbuzz 15)\nend",
  "input: ",
  "input-text How do I create a map in Evy and add a key-value pair?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy person := {name: \"Alice\" age: 30}\nprint person // Prints: {name: \"Alice\" age: 30}\nperson[\"city\"] = \"New York\"\nprint person // Prints: {name: \"Alice\" age: 30 city: \"New York\"}",
  "input: ",
  "input-text Implement a recursive function in Evy to reverse a string.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func reverse_string:string str:string\n    if (len str) == 0\n        return \"\"\n    else\n        return (reverse_string str[1:]) + str[0]\n    end\nend\n\ntxt := \"Evy\"\nprint (reverse_string txt) // Prints: yvE",
  "input: ",
  "input-text How do I convert a string to a number in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy str := \"123\"\nnumber := str2num str\nprint number // Prints: 123",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def max_profit(prices):\n    \"\"\"Calculates the maximum profit from buying and selling a stock.\n\n    Args:\n        prices: A list of integers representing the stock prices each day.\n\n    Returns:\n        The maximum profit that can be achieved.\n    \"\"\"\n    max_profit = 0       # Initialize maximum profit to 0\n    lowest_price = prices[0]  # Start with the first price as the lowest\n\n    for price in prices:\n        max_profit = max(max_profit, price - lowest_price)  # Update max profit if we find a better one\n        lowest_price = min(lowest_price, price)  # Update the lowest price so far\n\n    return max_profit\n\n# Test Cases\ndef test_max_profit():\n    assert max_profit([7, 1, 5, 3, 6, 4]) == 5\n    assert max_profit([7, 6, 4, 3, 1]) == 0\n\n# Run the tests if this script is executed directly\nif __name__ == \"__main__\":\n    test_max_profit()",
  "output: ",
  "output-text ",
  "output-evy func maxProfit:num prices:[]num\n    mprofit := 0\n    lowest := prices[0]\n    for price := range prices\n        mprofit = max mprofit (price - lowest)\n        lowest = min lowest price\n    end\n    return mprofit\nend\n\nfunc test\n    assert 5==(maxProfit [7 1 5 3 6 4])\n    assert 0==(maxProfit [7 6 4 3 1])\nend",
  "input: ",
  "input-text Give me an example of a single-line comment in Evy.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // This is a single-line comment",
  "input: ",
  "input-text Write a recursive function in Evy to print all the elements of a num array.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func print_array arr:[]num\n    if (len arr) > 0\n        print arr[0]\n        print_array arr[1:]\n    end\nend\n\nnumbers := [1 2 3 4]\nprint_array numbers // Prints: 1\\n2\\n3\\n4\\n",
  "input: ",
  "input-text How do I draw an ellipse in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text llipse",
  "output-evy ",
  "input: ",
  "input-text How do I check if an array contains a specific element?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func contains:bool arr:[]num val:num\n    for elem := range arr\n        if elem == val\n            return true\n        end\n    end\n    return false\nend\n\nnumbers := [1 2 3 4 5]\nprint (contains numbers 3) // Prints: true\nprint (contains numbers 6) // Prints: false",
  "input: ",
  "input-text How do I delete a key-value pair from a map in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text del",
  "output-evy ",
  "input: ",
  "input-text What are the valid specifiers for the 'printf' function?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text %v, %q, %%",
  "output-evy ",
  "input: ",
  "input-text How do I read user input in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text read",
  "output-evy ",
  "input: ",
  "input-text How can I convert a number to a string in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text x: num = 5\ny: string = x.(string)   // Converts x to a string",
  "output-evy ",
  "input: ",
  "input-text Create a recursive function in Evy to find the length of a string.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func string_length:num str:string\n    if (len str) == 0\n        return 0\n    else\n        return 1 + (string_length str[1:])\n    end\nend\n\ntxt := \"Evy\"\nprint (string_length txt) // Prints: 3",
  "input: ",
  "input-text Can you convert this to evy for me?\n\n\nclass Solution:\n    # def romanToInt(self, s):\n    #     \"\"\"\n    #     :type s: str\n    #     :rtype: int\n    #     \"\"\"\n    #     roman = {'I': 1, 'V': 5, 'X': 10,\n    #              'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    #     result = 0\n    #     last = s[-1]\n    #     for t in reversed(s):\n    #         if t == 'C' and last in ['D', 'M']:\n    #             result -= roman[t]\n    #         elif t == 'X' and last in ['L', 'C']:\n    #             result -= roman[t]\n    #         elif t == 'I' and last in ['V', 'X']:\n    #             result -= roman[t]\n    #         else:\n    #             result += roman[t]\n    #         last = t\n    #     return result\n\n    def romanToInt(self, s):\n        roman = {'I': 1, 'V': 5, 'X': 10,\n                 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        prev, total = 0, 0\n        for c in s:\n            curr = roman[c]\n            total += curr\n            # need to subtract\n            if curr > prev:\n                total -= 2 * prev\n            prev = curr\n        return total",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func romanToInt:num s:string\n    roman := {I:1 V:5 X:10 L:50 C:100 D:500 M:1000}\n    prev := 0\n    total := 0\n    for c := range s\n        curr := roman[c]\n        total = total + curr\n        if curr > prev\n            total = total - (2 * prev)\n        end\n        prev = curr\n    end\n    return total\nend\n\nfunc test\n    assert 1 (romanToInt \"I\")\n    assert 4 (romanToInt \"IV\")\n    assert 9 (romanToInt \"IX\")\n    assert 58 (romanToInt \"LVIII\")\n    assert 1994 (romanToInt \"MCMXCIV\")\nend\ntest",
  "input: ",
  "input-text How can I declare a variable and let Evy infer its type?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text n := 1 // type inference (num)\nprint n",
  "output-evy ",
  "input: ",
  "input-text How can I concatenate two strings in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy message := \"Hello, \" + \"world!\"\nprint message",
  "input: ",
  "input-text How do I print formatted output in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy name := \"Alice\"\nage := 30\nprintf \"Name: %v, Age: %v\\n\" name age",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python x = 10\ny = 5\nprint(x > y)\nprint(x < y)\nprint(x == y)\nprint(x != y)\nprint(x > 5 and y < 10)\nprint(x > 5 or y > 10)\nprint(not (x > 5))",
  "output: ",
  "output-text ",
  "output-evy x := 10\ny := 5\nprint ((x > y))\nprint ((x < y))\nprint ((x == y))\nprint ((x != y))\nprint ((x > 5 and y < 10))\nprint ((x > 5 or y > 10))\nprint ((!((x > 5))))",
  "input: ",
  "input-text How do I terminate an Evy program with a specific status code?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text xit",
  "output-evy ",
  "input: ",
  "input-text What function calculates the value of a number raised to the power of another number in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text w",
  "output-evy ",
  "input: ",
  "input-text What is the purpose of the 'move' event handler?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text move is called when the pointer is moved.",
  "output-evy ",
  "input: ",
  "input-text Show me how to declare a variable of type number in Evy.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text x: num\nprint x",
  "output-evy ",
  "input: ",
  "input-text What are the main categories of built-in functions in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text Input and Output, Types, Map, Program control, Conversion, Errors, String, Random, Math, Graphics, Event Handlers",
  "output-evy ",
  "input: ",
  "input-text What is the difference between 'sprint' and 'sprintf'?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text sprint returns a string representation of arguments separated by a single space, while sprintf returns a formatted string representation according to a format string.",
  "output-evy ",
  "input: ",
  "input-text How do I use a while loop to print numbers from 1 to 5 in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy i := 1\nwhile i <= 5\n    print i\n    i = i + 1\nend",
  "input: ",
  "input-text How do I check if two maps are equal in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy person1 := {name:\"Alice\" age:30 city:\"New York\"}\nperson2 := {name:\"Alice\" age:30 city:\"New York\"}\nperson3 := {name:\"Bob\" age:25 city:\"London\"}\nprint person1==person2 // Prints: true\nprint person1==person3 // Prints: false",
  "input: ",
  "input-text How do I create a function in Evy that multiplies two numbers and returns the result?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func multiply:num a:num b:num\n    return a * b\nend",
  "input: ",
  "input-text How can I use recursion in Evy to generate the Fibonacci sequence?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func fibonacci:num n:num\n    if n == 0\n        return 0\n    else if n == 1\n        return 1\n    else\n        return (fibonacci n-1) + (fibonacci n-2)\n    end\nend\n\nfor i := range 10\n    print (fibonacci i) // Prints the first 10 Fibonacci numbers\nend",
  "input: ",
  "input-text Can you fix this evy code for me?\n\n\n// We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).\n// Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.\n//\n// Example 1:\n// Input:\n// bits = [1, 0, 0]\n// Output: True\n// Explanation:\n// The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n// Example 2:\n// Input:\n// bits = [1, 1, 1, 0]\n// Output: False\n// Explanation:\n// The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n// Note:\n//\n// 1 <= len(bits) <= 1000.\n// bits[i] is always 0 or 1.\n//\n// https://leetcode.com/problems/1-bit-and-2-bit-characters/solution/\nfunc isOneBitCharacter:bool bits:[]num\n    pos := 0\n    while pos < (len bits) - 1\n        pos = pos + bits[pos] + 1\n    end\n    return pos == (len bits) - 1\nend\n\nfunc test\n    assert (isOneBitCharacter [1 0 0])\n    assert not (isOneBitCharacter [1 1 1 0])\nend",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).\n// Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.\n//\n// Example 1:\n// Input:\n// bits = [1, 0, 0]\n// Output: True\n// Explanation:\n// The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n// Example 2:\n// Input:\n// bits = [1, 1, 1, 0]\n// Output: False\n// Explanation:\n// The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n// Note:\n//\n// 1 <= len(bits) <= 1000.\n// bits[i] is always 0 or 1.\n//\n// https://leetcode.com/problems/1-bit-and-2-bit-characters/solution/\nfunc isOneBitCharacter:bool bits:[]num\n    pos := 0\n    while pos < (len bits) - 1\n        pos = pos + bits[pos] + 1\n    end\n    return pos == (len bits) - 1\nend\n\nfunc test\n    assert true (isOneBitCharacter [1 0 0])\n    assert false (isOneBitCharacter [1 1 1 0])\nend\ntest",
  "input: ",
  "input-text Can you convert this to evy for me?\n\n\nclass Solution(object):\n    # def peakIndexInMountainArray(self, A):\n    #     \"\"\"\n    #     :type A: List[int]\n    #     :rtype: int\n    #     \"\"\"\n    #     i = 0\n    #     while A[i + 1] >= A[i]:\n    #         i += 1\n    #     return i\n\n    def peakIndexInMountainArray(self, A):\n        lo, hi = 0, len(A) - 1\n        while lo < hi:\n            mid = (lo + hi) / 2\n            if A[mid] < A[mid + 1]:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func peakIndexInMountainArray:num A:[]num\n    lo := 0\n    hi := (len A) - 1\n    while lo < hi\n        mid := floor ((lo + hi) / 2)\n        if A[mid] < A[mid + 1]\n            lo = mid + 1\n        else\n            hi = mid\n        end\n    end\n    return lo\nend\n\nfunc test\n    print 1 (peakIndexInMountainArray [0 1 0])\n    print 1 (peakIndexInMountainArray [0 2 1 0])\n    print 2 (peakIndexInMountainArray [0 1 2 3 4 5 4 3 2 1 0])\nend\ntest",
  "input: ",
  "input-text How can I find the length of a string, array, or map in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text len",
  "output-evy ",
  "input: ",
  "input-text How do I define a function in Evy that takes two numbers and returns their sum?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func add:num x:num y:num\n    return x + y\nend\n\nprint (add 1 2) // calling the function",
  "input: ",
  "input-text What function returns a random floating point number less than 1 in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy rand1",
  "input: ",
  "input-text Give me an example of declaring and initializing an array of numbers in Evy.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text numbers := [1 2 3]\nprint numbers",
  "output-evy ",
  "input: ",
  "input-text What function sets the shape of the ends of lines in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text linecap",
  "output-evy ",
  "input: ",
  "input-text Can you correct this code?\n\ni:num = 1\nwhile i <= 5\n    print i\n    i = i + 1",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy i := 1\nwhile i <= 5\n    print i\n    i = i + 1\nend",
  "input: ",
  "input-text What function draws polylines and polygons in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ly",
  "output-evy ",
  "input: ",
  "input-text How often is the 'animate' event handler called?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text animate gets called periodically around 60 times per second.",
  "output-evy ",
  "input: ",
  "input-text How do I check the equality of two arrays in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy arr1 := [1 2 3]\narr2 := [1 2 3]\narr3 := [1 2 4]\nprint arr1==arr2 // Prints: true\nprint arr1==arr3 // Prints: false",
  "input: ",
  "input-text How do I find the smaller of two numbers in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text min",
  "output-evy ",
  "input: ",
  "input-text What function converts a string to a boolean in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text str2bool",
  "output-evy ",
  "input: ",
  "input-text How do I sort an array of numbers in descending order?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func sort_descending:[]num arr:[]num\n    // Bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] < arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\n    return arr\nend\n\nnumbers := [5 2 4 1 3]\nnumbers = sort_descending numbers\nprint numbers // Prints: [5 4 3 2 1]",
  "input: ",
  "input-text How do I calculate the average of all numbers in an array?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func average:num nums:[]num\n    sum := 0\n    for n := range nums\n        sum = sum + n\n    end\n    return sum / (len nums)\nend\n\nprint (average [1 2 3 4 5])",
  "input: ",
  "input-text Show me how to loop over the items in an array in Evy.",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy for item := range [\"apple\" \"banana\" \"orange\"]\n    print item\nend",
  "input: ",
  "input-text What is the difference between a function and an event in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text Functions are self-contained blocks of code that perform a specific task. Events are notifications that are sent to a program when something happens, such as when a user moves the mouse or presses a key.",
  "output-evy ",
  "input: ",
  "input-text When is the 'input' event handler called?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text input is called when the value of an input element changes.",
  "output-evy ",
  "input: ",
  "input-text How do I check if a string is empty in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy str := \"\"\nif str == \"\"\n    print \"String is empty\"\nelse\n    print \"String is not empty\"\nend",
  "input: ",
  "input-text How do I declare a variable inside a function in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func square:num x:num\n    y := x * x\n    return y\nend\nresult := square 4\nprint result // Prints: 16",
  "input: ",
  "input-text How do I replace all occurrences of a substring with another substring in a string in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text replace",
  "output-evy ",
  "input: ",
  "input-text How can I iterate over the key-value pairs in a map using a for loop in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy m := {foo:\"bar\" blah:1}\nfor key := range m\n    print key m[key]\nend",
  "input: ",
  "input-text How can I set the line dash pattern in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy dash",
  "input: ",
  "input-text How do I find the minimum value in an array of numbers?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func minElem:num nums:[]num\n    result := nums[0]\n    for n := range nums[1:]\n        if result > n\n            result = n\n        end\n    end\n    return result\nend\n\nprint (minElem [1 2 3 4])",
  "input: ",
  "input-text How do I reverse an array of numbers?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func reverse_array:[]num arr:[]num\n    result:[]num\n    for i := range (len arr)-1 -1 -1\n        result = result + [arr[i]]\n    end\n    return result\nend\n\nnumbers := [1 2 3 4 5]\nnumbers = reverse_array numbers\nprint numbers // Prints: [5 4 3 2 1]",
  "input: ",
  "input-text What function draws a line from the current pen position to given coordinates in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text line",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python for i := 0; i < 5; i++\nbecomes\n\nfor i in range(5):\n    print(\"for\", i)\n\ncount := 0\nfor count < 5 {\n\nbecomes\n\ncount = 0\nwhile count < 5:\n\nfor i := 1; i < 4; i++\n\nand becomes\n\nfor i in range(1, 4):\n\n\n    for j in range(1, 4):\n        if i != j:\n            print(f\"({i}, {j})\")",
  "output: ",
  "output-text ",
  "output-evy for i := range 0 5 1\n    print (\"for\") (i)\nend\ncount := 0\nwhile (count < 5)\n    print (\"while\") (count)\n    count = count + 1\nend\nfor i := range 1 4 1\n    for j := range 1 4 1\n        if (i != j)\n            printf (\"(%v, %v)\\n\") (i) (j)\n        end\n    end\nend",
  "input: ",
  "input-text How can I change the color of the pen in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text color or colour",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python class Node:\n    def __init__(self):\n        self.next = {}\n        self.is_end = False\n\nclass Trie:\n    def __init__(self):\n        self.data = Node()\n\n    def insert(self, word: str) -> None:\n        node = self.data\n        for ch in word:\n            if ch not in node.next:\n                node.next[ch] = Node()\n            node = node.next[ch]\n        node.is_end = True\n\n    def search(self, word: str) -> bool:\n        node = self.data\n        for ch in word:\n            if ch not in node.next:\n                return False\n            node = node.next[ch]\n        return node.is_end\n\n    def startsWith(self, prefix: str) -> bool:\n        node = self.data\n        for ch in prefix:\n            if ch not in node.next:\n                return False\n            node = node.next[ch]\n        return True\n\ndef test():\n    trie = Trie()\n    trie.insert(\"apple\")\n    assert(trie.search(\"apple\"))\n    assert(not trie.search(\"app\"))\n    assert(trie.startsWith(\"app\"))\n    trie.insert(\"app\")\n    assert(trie.search(\"app\"))\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func Node:{}any\n    self:{}any\n    self.next = {}\n    self.isend = false\n    return self\nend\n\nfunc Trie:{}any\n    self:{}any\n    self.data = (Node)\n    return self\nend\n\nfunc insert self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            next[ch] = (Node)\n        end\n        node = next[ch].({}any)\n    end\n    node.isend = true\nend\n\nfunc search:bool self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return node.isend.(bool)\nend\n\nfunc startsWith:bool self:{}any prefix:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range prefix\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return true\nend\n\nfunc test\n    trie := (Trie)\n    insert trie \"apple\"\n    assert true==(search trie \"apple\")\n    assert false==(search trie \"app\")\n    assert true==(startsWith trie \"app\")\n    insert trie \"app\"\n    assert true==(search trie \"app\")\nend",
  "input: ",
  "input-text Can you correct this code?\n\nname:string = \"Alice\"\nage:num = 30\nprintf \"Name: %v, Age: %v\\n\" name age",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy name := \"Alice\"\nage := 30\nprintf \"Name: %v, Age: %v\\n\" name age",
  "input: ",
  "input-text How do I define a global variable in Evy and access it inside a function?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy global_var := \"Hello\"\n\nfunc print_global\n    print global_var\nend\n\nprint_global // Prints: Hello",
  "input: ",
  "input-text How do I create an array in Evy and add elements to it?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy numbers := [1 2 3]\nprint numbers // Prints: [1 2 3]\nnumbers = numbers + [4 5]\nprint numbers // Prints: [1 2 3 4 5]",
  "input: ",
  "input-text Can you convert this code to evy for me?\n\n\n\nclass Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: void Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        p1, p2 = m - 1, n - 1\n        pos = m + n - 1\n        while p1 >= 0 and p2 >= 0:\n            if nums1[p1] >= nums2[p2]:\n                nums1[pos] = nums1[p1]\n                p1 -= 1\n            else:\n                nums1[pos] = nums2[p2]\n                p2 -= 1\n            pos -= 1\n        while p2 >= 0:\n            nums1[pos] = nums2[p2]\n            p2 -= 1\n            pos -= 1\n\n    # def merge(self, nums1, m, nums2, n):\n    #     # using slicing\n    #     i, j, k = m - 1, n - 1, m + n - 1\n    #     while i >= 0 and j >= 0:\n    #         if nums1[i] > nums2[j]:\n    #             nums1[k] = nums1[i]\n    #             i -= 1\n    #         else:\n    #             nums1[k] = nums2[j]\n    #             j -= 1\n    #         k -= 1\n    #\n    #     if j >= 0:\n    #         nums1[:k + 1] = nums2[:j + 1]",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func merge nums1:[]num m:num nums2:[]num n:num\n    p1 := m - 1\n    p2 := n - 1\n    pos := m + n - 1\n    while p1 >= 0 and p2 >= 0\n        if nums1[p1] >= nums2[p2]\n            nums1[pos] = nums1[p1]\n            p1 = p1 - 1\n        else\n            nums1[pos] = nums2[p2]\n            p2 = p2 - 1\n        end\n        pos = pos - 1\n    end\n    while p2 >= 0\n        nums1[pos] = nums2[p2]\n        p2 = p2 - 1\n        pos = pos - 1\n    end\nend\n\nfunc test\n    nums1 := [1 2 3 0 0 0]\n    m := 3\n    nums2 := [2 5 6]\n    n := 3\n    merge nums1 m nums2 n\n    assert [1 2 2 3 5 6] nums1\nend\ntest",
  "input: ",
  "input-text How do I find the maximum value in an array of numbers?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func maxElem:num nums:[]num\n    result := nums[0]\n    for n := range nums[1:]\n        if result < n\n            result = n\n        end\n    end\n    return result\nend\n\nprint (maxElem [1 2 3 4])",
  "input: ",
  "input-text How can I concatenate elements of an array into a single string with a separator in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text join",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python person = {\"name\": \"Bob\", \"age\": 30, \"city\": \"New York\"}\nprint(person[\"name\"])\nperson[\"age\"] = 31\nprint(person)",
  "output: ",
  "output-text ",
  "output-evy person := {name: \"Bob\" age: 30 city: \"New York\"}\nprint person[\"name\"]\nperson[\"age\"] = 31\nprint (person)",
  "input: ",
  "input-text ",
  "input-evy // output:\n//line 2 column 10: expected map key, found 2\n//line 2 column 18: expected map key, found 3\n//line 2 column 26: expected map key, found 4\n//line 2 column 34: expected map key, found 5\n//line 2 column 42: expected map key, found 6\n//line 2 column 50: expected map key, found 7\n//line 2 column 59: expected map key, found 8\n//line 2 column 67: expected map key, found 9\n//line 2 column 76: expected map key, found 0\n//line 2 column 87: unknown variable name \"None\"\n//line 2 column 91: invalid inferred declaration for \"dmap\"\n//line 8 column 16: expected return value of type string, found []string\n//line 12 column 20: unknown variable name \"dmap\"\n//line 12 column 24: range cannot be empty\n//line 12 column 24: unexpected input \"[\"\n//line 15 column 25: unknown variable name \"t\"\n//line 15 column 27: invalid inferred declaration for \"temp\"\n//line 16 column 36: unknown variable name \"temp\"\n//line 15 column 17: at least one statement is required here\n//line 14 column 17: \"p\" declared but not used\n//line 19 column 32: unknown variable name \"t\"\n//line 19 column 13: at least one statement is required here\n//line 10 column 5: \"current\" declared but not used\n//line 21 column 5: missing return\n//line 22 column 17: unknown variable name \"result\"\n//line 22 column 24: \"join\" takes 2 arguments, found 0\n//line 22 column 24: expected end of line, found \"\"\n//line 22 column 12: return statement not allowed here\n//line 23 column 1: unexpected input \"end\"\n//line 24 column 1: unreachable code\n//line 30 column 1: unreachable code",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy ",
  "input: ",
  "input-text Can you convert this python to evy for me?",
  "input-evy ",
  "input-python def backtrack(nums, current, ans):\n    \"\"\"Recursive backtracking function to generate subsets.\"\"\"\n    if not nums:  # Base case: empty input list\n        ans.append(current[:])  # Append a copy of the current subset\n        return\n\n    for i in range(len(nums)):\n        backtrack(nums[i+1:], current, ans)  # Exclude the current element\n        current.append(nums[i])  # Include the current element\n        if len(nums) > 1:  # If there are more elements\n            backtrack(nums[i+1:], current, ans)  # Backtrack again\n        else:\n            backtrack([], current, ans)  # Special case for last element\n        current.pop()  # Remove the current element (backtracking step)\n\ndef subsets(nums):\n    \"\"\"Generates all subsets of a given set.\n\n    Args:\n        nums: A list of numbers representing the set.\n\n    Returns:\n        A list of lists, where each inner list is a subset of the input set.\n    \"\"\"\n    current, ans = [], []\n    backtrack(nums, current, ans)\n    return ans\n\n# Testing\nfails = 0\ntotal = 0\n\ndef assert_equal_same_elements(want, got):\n    \"\"\"Asserts that two lists of lists contain the same elements regardless of order.\"\"\"\n    global fails, total\n\n    want_set = set(tuple(x) for x in want)  # Convert to sets for easier comparison\n    got_set = set(tuple(x) for x in got)\n\n    missing_elements = want_set - got_set\n    extra_elements = got_set - want_set\n\n    if missing_elements or extra_elements:\n        fails += 1\n        print(f\"Expected: {want}, Got: {got}\")\n        if missing_elements:\n            print(f\"Missing elements: {missing_elements}\")\n        if extra_elements:\n            print(f\"Extra elements: {extra_elements}\")\n\n    total += 1\n\ndef test():\n    \"\"\"Tests the subsets function.\"\"\"\n    assert_equal_same_elements([[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []], subsets([1, 2, 3]))\n    assert_equal_same_elements([[0], []], subsets([0]))\n    assert_equal_same_elements([[]], subsets([]))\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func backtrack nums:[]num current:[]num ans:[][]num\n    if (len nums) == 0\n        ans = [current[:]] + ans\n        return\n    end\n    for range nums\n        backtrack nums[1:] current ans\n        current = current + [nums[0]]\n        if (len nums) > 1\n            backtrack nums[1:] current ans\n        else\n            backtrack [] current ans\n        end\n        current = current[:-1]\n    end\nend\n\nfunc subsets:[][]num nums:[]num\n    current:[]num\n    ans:[][]num\n    backtrack nums current ans\n    return ans\nend\n\nfails := 0\ntotal := 0\n\nfunc assertEqualsameelements want:[][]num got:[][]num\n    wantset := {}\n    extraelements:[]string\n    missingelements:[]string\n    failed := false\n    for elem := range want\n        wantset[sprintf \"%v\" elem] = true\n    end\n    gotset := {}\n    for elem := range got\n        gotset[sprintf \"%v\" elem] = true\n    end\n    for key := range wantset\n        if !(has gotset key)\n            printf \"missing element int got %v\\n\" key\n            extraelements = extraelements + [key]\n            failed = true\n        end\n    end\n    for key := range gotset\n        if !(has wantset key)\n            printf \"extra element int got %v\\n\" key\n            missingelements = missingelements + [key]\n            failed = true\n        end\n    end\n    if (len missingelements) > 0\n        printf \"missing elements: %v\\n\" missingelements\n    end\n    if (len extraelements) > 0\n        printf \"extra elements: %v\\n\" extraelements\n    end\n    if failed\n        fails = fails + 1\n    end\n    total = total + 1\nend\n\nfunc test\n    assertEqualsameelements [[1 2 3] [1 2] [1 3] [1] [2 3] [2] [3] []] (subsets [1 2 3])\n    assertEqualsameelements [[0] []] (subsets [0])\n    assertEqualsameelements [[]] (subsets [])\nend",
  "input: ",
  "input-text How can I set the position of the pen for drawing in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text move",
  "output-evy ",
  "input: ",
  "input-text When is the 'up' event handler called?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text up is called when the pointer is lifted up.",
  "output-evy ",
  "input: ",
  "input-text What are the two types of run-time errors in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text panic and error",
  "output-evy ",
  "input: ",
  "input-text How do I find the larger of two numbers in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text max",
  "output-evy ",
  "input: ",
  "input-text What function calculates the square root of a number in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text sqrt",
  "output-evy ",
  "input: ",
  "input-text What function sets the thickness of lines drawn by the pen in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text width",
  "output-evy ",
  "input: ",
  "input-text What function returns the smallest integer greater than or equal to a given number in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ceil",
  "output-evy ",
  "input: ",
  "input-text How do I round a number to the nearest integer in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text round",
  "output-evy ",
  "input: ",
  "input-text What function returns the greatest integer less than or equal to a given number in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text floor",
  "output-evy ",
  "input: ",
  "input-text What function removes leading and trailing characters from a string in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text rim",
  "output-evy ",
  "input: ",
  "input-text What does the 'grid' function do in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text grid draws a grid on the canvas with lines spaced 10 units apart.",
  "output-evy ",
  "input: ",
  "input-text How can I draw a grid with custom spacing and color in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text gridn",
  "output-evy ",
  "input: ",
  "input-text How can I check if a string ends with a given suffix in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ndswith",
  "output-evy ",
  "input: ",
  "input-text How can I check if a string starts with a given prefix in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text startswith",
  "output-evy ",
  "input: ",
  "input-text What function calculates the angle in radians between the positive x-axis and a ray from the origin to a point in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text atan2",
  "output-evy ",
  "input: ",
  "input-text How do I convert a string to uppercase in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text upper",
  "output-evy ",
  "input: ",
  "input-text How do I find the cosine of an angle in radians in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text cos",
  "output-evy ",
  "input: ",
  "input-text What function finds the position of a substring in a string in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text index",
  "output-evy ",
  "input: ",
  "input-text What are the two types of errors in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text arse errors and run-time errors",
  "output-evy ",
  "input: ",
  "input-text How do I find the sine of an angle in radians in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text sin",
  "output-evy ",
  "input: ",
  "input-text How do I convert a string to lowercase in Evy?",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text lower",
  "output-evy ",
  "input: ",
  "input-text Implement breadth-first search (BFS)",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func bfs:bool graph:[][]num start:num fin:num\n    visited := [false] * (len graph)\n    queue := [start]\n    visited[start] = true\n    while (len queue) > 0\n        node := queue[0]\n        queue = queue[1:]\n        if node == fin\n            return true\n        end\n        for neighbor := range graph[node]\n            if !(visited[neighbor])\n                visited[neighbor] = true\n                queue = queue + [neighbor]\n            end\n        end\n    end\n    return false\nend\n\ngraph := [[1 2] [0 3] [0] [1]]\nstart := 0\nfin := 3\nassert true (bfs graph start fin)",
  "input: ",
  "input-text Find the least common multiple (LCM) of two numbers",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func lcm:num a:num b:num\n    return (a * b) / (gcd a b)\nend\n\nfunc gcd:num a:num b:num\n    while b != 0\n        tmp := a\n        a = b\n        b = tmp % b\n    end\n    return a\nend\n\nfunc test\n    assert 6 (lcm 2 3)\n    assert 12 (lcm 4 6)\n    assert 24 (lcm 8 12)\nend",
  "input: ",
  "input-text Check if a string is a palindrome",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func isPalindrome:bool str:string\n    length := len str\n    for i := range (floor length/2)\n        if str[i] != str[-(i + 1)]\n            return false\n        end\n    end\n    return true\nend\n\nassert true==(isPalindrome \"\")\nassert true==(isPalindrome \"aba\")\nassert true==(isPalindrome \"aaaaa\")\nassert false==(isPalindrome \"zbcd\")\nassert true==(isPalindrome \"xywyx\")\nassert false==(isPalindrome \"xywyz\")\nassert false==(isPalindrome \"xywzx\")",
  "input: ",
  "input-text Determine if an array is sorted in descending order",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func isSortedDescending:bool arr:[]num\n    for i := range (len arr)\n        if i > 0 and arr[i] > arr[i - 1]\n            return false\n        end\n    end\n    return true\nend\n\nassert true (isSortedDescending [5 4 3 2 1])\nassert false (isSortedDescending [1 2 3 4 5])\nassert true (isSortedDescending [5 5 5 5 5])\nassert false (isSortedDescending [5 4 3 2 1 6])",
  "input: ",
  "input-text Check if a number is prime",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func isPrime:bool n:num\n    if n < 2\n        return false\n    end\n    for i := range 2 (sqrt n)+1\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n\nassert false (isPrime 2)\nassert true (isPrime 3)\nassert false (isPrime 4)\nassert true (isPrime 5)\nassert false (isPrime 6)\nassert true (isPrime 7)\nassert false (isPrime 8)\nassert false (isPrime 9)\nassert true (isPrime 11)\nassert false (isPrime 12)\nassert true (isPrime 13)",
  "input: ",
  "input-text Rotate an array to the right by k positions",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func rotate:[]num nums:[]num k:num\n    n := len nums\n    k = k % n\n    if k == 0\n        return nums\n    end\n    nums = nums[n - k:] + nums[:n - k]\n    return nums\nend\n\nfunc test\n    assert [5 1 2 3 4] (rotate [1 2 3 4 5] 2)\n    assert [4 5 1 2 3] (rotate [1 2 3 4 5] 3)\n    assert [1 2 3 4 5] (rotate [1 2 3 4 5] 5)\n    assert [2 3 4 5 1] (rotate [1 2 3 4 5] 1)\nend",
  "input: ",
  "input-text Find the maximum element in a binary tree",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func maxElem:num root:{}any\n    if root == {}\n        return -2147483648\n    end\n    left := maxElem root[\"left\"].({}any)\n    right := maxElem root[\"right\"].({}any)\n    return max (max left right) root[\"val\"].(num)\nend\n\nfunc test\n    tree := {val:1 left:{val:2 left:{} right:{val:3 left:{} right:{}}} right:{val:4 left:{} right:{val:5 left:{} right:{}}}}\n    assert 5 (maxElem tree)\nend",
  "input: ",
  "input-text Rotate an array to the left by k positions",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func rotate:[]num arr:[]num k:num\n    n := len arr\n    k = k % n\n    if k == 0\n        return arr\n    end\n    result := [0] * n\n    for i := range n\n        result[(i - k) % n] = arr[i]\n    end\n    return result\nend\n\nassert [2 3 4 5 1] (rotate [1 2 3 4 5] 1)\nassert [4 5 1 2 3] (rotate [1 2 3 4 5] 3)\nassert [1 2 3 4 5] (rotate [1 2 3 4 5] 5)\nassert [1 2 3 4 5] (rotate [1 2 3 4 5] 10)",
  "input: ",
  "input-text Traverse a binary tree in postorder",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func postorder:string root:{}any\n    if root == {}\n        return \"\"\n    end\n    left := root[\"left\"].({}any)\n    right := root[\"right\"].({}any)\n    return (postorder left) + (postorder right) + (sprint root[\"val\"])\nend\n\nfunc test\n    tree := {val:1 left:{val:2 left:{} right:{val:4 left:{} right:{}}} right:{val:3 left:{} right:{}}}\n    assert \"2431\" (postorder tree)\nend",
  "input: ",
  "input-text Implement a stack",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func Stack:{}any\n    self:{}any\n    data:[]num\n    self.data = data\n    return self\nend\n\nfunc push self:{}any x:num\n    self.data = self.data.([]num) + [x]\nend\n\nfunc pop:any self:{}any\n    if (len self.data) == 0\n        return -1\n    end\n    result := top self\n    self.data = self.data.([]num)[:-1]\n    return result\nend\n\nfunc top:any self:{}any\n    if (len self.data) == 0\n        return -1\n    end\n    return self.data.([]num)[-1]\nend\n\nfunc empty:bool self:{}any\n    return (len self.data) == 0\nend\n\ns := (Stack)\npush s 1\npush s 2\npush s 3\nassert 3 (top s)\nassert 3 (top s)\nassert 3 (pop s)\nassert 2 (top s)\nassert 2 (pop s)\nassert 1 (top s)\nassert 1 (pop s)\nassert true (empty s)",
  "input: ",
  "input-text Check if a binary tree is a binary search tree",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func isBST:bool root:{}any\n    return isBSTHelper root -2147483648 2147483647\nend\n\nfunc isBSTHelper:bool root:{}any minn:num maxx:num\n    if root == {}\n        return true\n    end\n    if (has root \"val\") and (root.val.(num) <= minn or root.val.(num) >= maxx)\n        return false\n    end\n    left:any\n    right:any\n    left = root[\"left\"]\n    right = root[\"right\"]\n    return (isBSTHelper left.({}any) minn root.val.(num)) and (isBSTHelper right.({}any) root.val.(num) maxx)\nend\n\nroot := {val:2 left:{val:1 left:{} right:{}} right:{val:3 left:{} right:{}}}\nassert true (isBST root)\nroot = {val:5 left:{val:1 left:{} right:{}} right:{val:4 left:{} right:{}}}\nassert false (isBST root)",
  "input: ",
  "input-text Find the second smallest element in an array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func secondSmallest:num nums:[]num\n    if (len nums) < 2\n        return -1\n    end\n    min1 := nums[0]\n    min2 := 2147483647\n    for i := range nums\n        if nums[i] < min1\n            min2 = min1\n            min1 = nums[i]\n        else if nums[i] < min2 and nums[i] != min1\n            min2 = nums[i]\n        end\n    end\n    if min2 == 2147483647\n        return -1\n    end\n    return min2\nend\n\nfunc test\n    assert 2 (secondSmallest [1 2 3 4 5])\n    assert 2 (secondSmallest [2 2 2 2 2])\n    assert 3 (secondSmallest [1 2 3 4 5 6])\n    assert -1 (secondSmallest [1])\n    assert -1 (secondSmallest [])\nend",
  "input: ",
  "input-text Find the maximum element in an array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func maxElem:num nums:[]num\n    result := nums[0]\n    for n := range nums[1:]\n        if result < n\n            result = n\n        end\n    end\n    return result\nend\n\nprint (maxElem [1 2 3 4])",
  "input: ",
  "input-text Find the missing number in an array of consecutive integers",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func findMissing:num nums:[]num\n    for i := range 1 (len nums)\n        if nums[i] != nums[i - 1] + 1\n            return nums[i - 1] + 1\n        end\n    end\n    return -1\nend\n\nassert 4 (findMissing [1 2 3 5])\nassert 2 (findMissing [1 3 4 5])\nassert 1 (findMissing [0 2 3 4])",
  "input: ",
  "input-text Implement linear search",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func linear_search:num arr:[]num target:num\n    for i := range arr\n        if arr[i] == target\n            return i\n        end\n    end\n    return -1\nend\n\nfunc test\n    assert 2 (linear_search [1 2 3 4 5] 3)\n    assert -1 (linear_search [1 2 3 4 5] 6)\nend",
  "input: ",
  "input-text Implement selection sort",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func selectionSort:[]num arr:[]num\n    n := len arr\n    for i := range n\n        minIdx := i\n        for j := range i+1 n\n            if arr[j] < arr[minIdx]\n                minIdx = j\n            end\n        end\n        tmp := arr[minIdx]\n        arr[minIdx] = arr[i]\n        arr[i] = tmp\n    end\n    return arr\nend\n\nfunc test\n    assert [1 2 3 4 5] (selectionSort [5 4 3 2 1])\n    assert [1 2 3 4 5] (selectionSort [1 2 3 4 5])\n    assert [1 2 3 4 5] (selectionSort [5 1 4 2 3])\nend",
  "input: ",
  "input-text Calculate the factorial of a number",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func factorial:num n:num\n    if n == 0\n        return 1\n    else\n        return n * (factorial n-1)\n    end\nend\n\nprint (factorial 5) // Prints: 120",
  "input: ",
  "input-text Convert a binary number to decimal",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func bin2dec:num bin:string\n    result := 0\n    for i := range (len bin)-1 -1 -1\n        if bin[i] == \"1\"\n            result = result + (pow 2 (len bin)-i-1)\n        end\n    end\n    return result\nend\n\nassert 1 (bin2dec \"1\")\nassert 2 (bin2dec \"10\")\nassert 3 (bin2dec \"11\")\nassert 4 (bin2dec \"100\")\nassert 5 (bin2dec \"101\")\nassert 10 (bin2dec \"1010\")\nassert 15 (bin2dec \"1111\")",
  "input: ",
  "input-text Remove duplicates from a sorted array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func removeDuplicates:[]num nums:[]num\n    if (len nums) == 0\n        return nums\n    end\n    i := 0\n    for j := range 1 (len nums)\n        if nums[j] != nums[i]\n            i = i + 1\n            nums[i] = nums[j]\n        end\n    end\n    return nums[:i + 1]\nend\n\nassert [0 1 2 3 4] (removeDuplicates [0 0 1 1 1 2 2 3 3 4])\nassert [1 2] (removeDuplicates [1 1 2])\nassert [1] (removeDuplicates [1])\nassert [] (removeDuplicates [])",
  "input: ",
  "input-text Find the height of a binary tree",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func height:num root:{}any\n    if root == {}\n        return 0\n    end\n    leftHeight := height root.left.({}any)\n    rightHeight := height root.right.({}any)\n    return max leftHeight+1 rightHeight+1\nend\n\ntree := {val:1 left:{val:2 left:{} right:{val:4 left:{} right:{}}} right:{val:3 left:{} right:{}}}\nassert 3 (height tree)",
  "input: ",
  "input-text Find the second largest element in an array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func secondLargest:num nums:[]num\n    if (len nums) < 2\n        return -1\n    end\n    max1 := nums[0]\n    max2 := -2147483648\n    for i := range 1 (len nums)\n        if nums[i] >= max1\n            max2 = max1\n            max1 = nums[i]\n        else if nums[i] > max2 and nums[i] != max1\n            max2 = nums[i]\n        end\n    end\n    if max2 == -2147483648\n        return -1\n    end\n    return max2\nend\n\nassert 3 (secondLargest [1 2 3 4])\nassert 3 (secondLargest [1 2 3 3])\nassert 2 (secondLargest [1 2 2 2])\nassert -1 (secondLargest [1])\nassert -1 (secondLargest [])",
  "input: ",
  "input-text Remove all spaces from a string",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func removeSpaces:string str:string\n    result := \"\"\n    for ch := range str\n        if ch != \" \"\n            result = result + ch\n        end\n    end\n    return result\nend\n\nassert \"HelloWorld\" (removeSpaces \"Hello World\")\nassert \"Evy\" (removeSpaces \"Evy\")\nassert \"\" (removeSpaces \" \")",
  "input: ",
  "input-text Implement the Fibonacci sequence",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func fibonacci:num n:num\n    if n == 0\n        return 0\n    else if n == 1\n        return 1\n    else\n        return (fibonacci n-1) + (fibonacci n-2)\n    end\nend\n\nfor i := range 10\n    print (fibonacci i) // Prints the first 10 Fibonacci numbers\nend",
  "input: ",
  "input-text Reverse a string",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func reverse_string:string str:string\n    if (len str) == 0\n        return \"\"\n    else\n        return (reverse_string str[1:]) + str[0]\n    end\nend\n\ntxt := \"Evy\"\nprint (reverse_string txt) // Prints: yvE",
  "input: ",
  "input-text Traverse a binary tree in inorder",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func inorderTraversal:[]any root:{}any\n    result := []\n    if root != {}\n        result = result + (inorderTraversal root[\"left\"].({}any))\n        result = result + [root[\"val\"]]\n        result = result + (inorderTraversal root[\"right\"].({}any))\n    end\n    return result\nend\n\nroot := {val:1 left:{val:2 left:{} right:{val:3 left:{} right:{}}} right:{val:4 left:{} right:{val:5 left:{} right:{}}}}\nassert [2 3 1 4 5] (inorderTraversal root)",
  "input: ",
  "input-text Count the number of vowels in a string",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func vowelCount:num str:string\n    vowels := {a:0 e:0 i:0 o:0 u:0}\n    result := 0\n    str = lower str\n    for c := range str\n        if has vowels c\n            result = result + 1\n        end\n    end\n    if (len str) > 0 and str[-1] == \"y\"\n        result = result + 1\n    end\n    return result\nend\n\nfunc test\n    assert 0 (vowelCount \"\")\n    assert 2 (vowelCount \"abcde\")\n    assert 3 (vowelCount \"Alone\")\n    assert 2 (vowelCount \"key\")\n    assert 1 (vowelCount \"bye\")\n    assert 2 (vowelCount \"keY\")\n    assert 1 (vowelCount \"bYe\")\n    assert 3 (vowelCount \"ACEDY\")\nend",
  "input: ",
  "input-text Find the minimum element in a binary tree",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func minVal:num root:{}any\n    if root == {}\n        return str2num \"inf\"\n    end\n    left := root.left.({}any)\n    right := root.right.({}any)\n    if left == {} and right == {}\n        return root.val.(num)\n    end\n    m := root.val.(num)\n    m = min m (minVal left)\n    m = min m (minVal right)\n    return m\nend\n\nroot := {val:1 left:{val:2 left:{} right:{val:3 left:{} right:{}}} right:{val:4 left:{} right:{}}}\nassert 1 (minVal root)",
  "input: ",
  "input-text Find the length of a string without using built-in functions",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func string_length:num str:string\n    if (len str) == 0\n        return 0\n    else\n        return 1 + (string_length str[1:])\n    end\nend\n\ntxt := \"Evy\"\nprint (string_length txt) // Prints: 3",
  "input: ",
  "input-text Traverse a binary tree in preorder",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func preorder:string root:{}any\n    if root == {}\n        return \"\"\n    end\n    result := \"\"\n    result = result + (sprint root.val)\n    result = result + (preorder root.left.({}any))\n    result = result + (preorder root.right.({}any))\n    return result\nend\n\ntree := {val:1 left:{val:2 left:{} right:{val:4 left:{} right:{}}} right:{val:3 left:{} right:{}}}\nassert \"1243\" (preorder tree)",
  "input: ",
  "input-text Calculate the sum of all elements in an array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func sum_array:num arr:[]num\n    sum := 0\n    for n := range arr\n        sum = sum + n\n    end\n    return sum\nend\n\nnumbers := [1 2 3 4 5]\nsum := sum_array numbers\nprint sum // Prints: 15",
  "input: ",
  "input-text Generate prime numbers up to n",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func calcPrimes:[]num n:num\n    // Sieve of Eratosthenes\n    // input: an integer n > 1.\n    // output: all prime numbers from 2 through n.\n    sieve := [true] * n\n\n    for i := range 2 (sqrt n+1)\n        if sieve[i]\n            for j := range i*i n i\n                sieve[j] = false\n            end\n        end\n    end\n    result:[]num\n    for i := range 2 n\n        if sieve[i]\n            result = result + [i]\n        end\n    end\n    return result\nend\n\nprimes := calcPrimes 100\nprint primes",
  "input: ",
  "input-text Check if a given expression has balanced parentheses",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // checkBrackets returns true if the if every opening bracket\n// has a corresponding closing bracket in the  input string.\n//\n// checkBrackets \"(\" // false\n// checkBrackets \"()\" // true\n// checkBrackets \"(()())\" // true\n// checkBrackets \")(()\" // false\nfunc checkBrackets:bool input:string\n    depth := 0\n    for c := range input\n        if c == \"(\"\n            depth = depth + 1\n        else\n            depth = depth - 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n\nfunc test\n    assert true==(checkBrackets \"()\")\n    assert true==(checkBrackets \"(()())\")\n    assert true==(checkBrackets \"()()(()())()\")\n    assert true==(checkBrackets \"()()((()()())())(()()(()))\")\n    assert false==(checkBrackets \"((()())))\")\n    assert false==(checkBrackets \")(()\")\n    assert false==(checkBrackets \"(\")\n    assert false==(checkBrackets \"((((\")\n    assert false==(checkBrackets \")\")\n    assert false==(checkBrackets \"(()\")\n    assert false==(checkBrackets \"()()(()())())(()\")\n    assert false==(checkBrackets \"()()(()())()))()\")\nend",
  "input: ",
  "input-text Find the average of all elements in an array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func average:num nums:[]num\n    sum := 0\n    for n := range nums\n        sum = sum + n\n    end\n    return sum / (len nums)\nend\n\nprint (average [1 2 3 4 5])",
  "input: ",
  "input-text Merge two sorted arrays into one sorted array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func merge nums1:[]num m:num nums2:[]num n:num\n    p1 := m - 1\n    p2 := n - 1\n    pos := m + n - 1\n    while p1 >= 0 and p2 >= 0\n        if nums1[p1] >= nums2[p2]\n            nums1[pos] = nums1[p1]\n            p1 = p1 - 1\n        else\n            nums1[pos] = nums2[p2]\n            p2 = p2 - 1\n        end\n        pos = pos - 1\n    end\n    while p2 >= 0\n        nums1[pos] = nums2[p2]\n        p2 = p2 - 1\n        pos = pos - 1\n    end\nend\n\nnums1 := [1 2 3 0 0 0]\nm := 3\nnums2 := [2 5 6]\nn := 3\nmerge nums1 m nums2 n\nassert [1 2 2 3 5 6] nums1",
  "input: ",
  "input-text Count the number of consonants in a string",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func countConsonants:num str:string\n    vowels := {a:true e:true i:true o:true u:true A:true E:true I:true O:true U:true}\n    count := 0\n    for ch := range str\n        if !(has vowels ch) and (\"a\" <= ch and ch <= \"z\" or \"A\" <= ch and ch <= \"Z\")\n            count = count + 1\n        end\n    end\n    return count\nend\n\nassert 3 (countConsonants \"hello\")\nassert 4 (countConsonants \"world\")\nassert 0 (countConsonants \"aeiou\")\nassert 0 (countConsonants \"AEIOU\")\nassert 0 (countConsonants \"\")",
  "input: ",
  "input-text Convert a decimal number to binary",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func convert:string n:num\n    if n == 0\n        return \"0\"\n    end\n    result := \"\"\n    while n > 0\n        if n % 2 == 0\n            result = \"0\" + result\n        else\n            result = \"1\" + result\n        end\n        n = floor n/2\n    end\n    return result\nend\n\nassert \"10\" (convert 2)\nassert \"11\" (convert 3)\nassert \"100\" (convert 4)\nassert \"101\" (convert 5)\nassert \"110\" (convert 6)\nassert \"111\" (convert 7)\nassert \"1000\" (convert 8)\nassert \"1001\" (convert 9)\nassert \"1010\" (convert 10)\nassert \"1011\" (convert 11)\nassert \"1100\" (convert 12)\nassert \"1101\" (convert 13)\nassert \"1110\" (convert 14)\nassert \"1111\" (convert 15)\nassert \"10000\" (convert 16)",
  "input: ",
  "input-text Convert a string to lowercase",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func toLowercase:string str:string\n    result := \"\"\n    for ch := range str\n        if \"A\" <= ch and ch <= \"Z\"\n            result = result + (lower ch)\n        else\n            result = result + ch\n        end\n    end\n    return result\nend\n\nassert \"hello\" (toLowercase \"HELLO\")\nassert \"world\" (toLowercase \"WORLD\")\nassert \"hello world\" (toLowercase \"HELLO WORLD\")\nassert \"123\" (toLowercase \"123\")\nassert \"abc\" (toLowercase \"ABC\")\nassert \"abc\" (toLowercase \"aBc\")",
  "input: ",
  "input-text Remove duplicates from an unsorted array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func removeDuplicates:[]num nums:[]num\n    seen:{}bool\n    dups:{}bool\n    result:[]num\n    for n := range nums\n        ns := sprint n\n        if has seen ns\n            dups[ns] = true\n        end\n        seen[ns] = true\n    end\n    for n := range nums\n        ns := sprint n\n        if !(has dups ns)\n            result = result + [n]\n        end\n    end\n    return result\nend\n\nfunc test\n    assert [] (removeDuplicates [])\n    assert [1 2 3 4] (removeDuplicates [1 2 3 4])\n    assert [1 4 5] (removeDuplicates [1 2 3 2 4 3 5])\nend",
  "input: ",
  "input-text Check if two strings are anagrams",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func isAnagram:bool s:string t:string\n    if (len s) != (len t)\n        return false\n    end\n    sMap:{}num\n    tMap:{}num\n    for c := range s\n        if !(has sMap c)\n            sMap[c] = 0\n        end\n        sMap[c] = sMap[c] + 1\n    end\n    for c := range t\n        if !(has tMap c)\n            tMap[c] = 0\n        end\n        tMap[c] = tMap[c] + 1\n    end\n    return sMap == tMap\nend\n\nfunc test\n    assert true (isAnagram \"anagram\" \"nagaram\")\n    assert false (isAnagram \"rat\" \"car\")\nend",
  "input: ",
  "input-text Reverse the elements of an array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func reverse_array:[]num arr:[]num\n    result:[]num\n    for i := range (len arr)-1 -1 -1\n        result = result + [arr[i]]\n    end\n    return result\nend\n\nnumbers := [1 2 3 4 5]\nnumbers = reverse_array numbers\nprint numbers // Prints: [5 4 3 2 1]",
  "input: ",
  "input-text More Advanced (Optional)",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func maximalRectangle:num matrix:[][]string\n    if matrix == [] or (len matrix) == 0\n        return 0\n    end\n    lsRow := len matrix\n    lsCol := len matrix[0]\n    left := [0] * lsCol\n    right := [lsCol] * lsCol\n    height := [0] * lsCol\n    maxA := 0\n    for i := range lsRow\n        currLeft := 0\n        currRight := lsCol\n        for j := range lsCol\n            if matrix[i][j] == \"1\"\n                height[j] = height[j] + 1\n            else\n                height[j] = 0\n            end\n        end\n        for j := range lsCol\n            if matrix[i][j] == \"1\"\n                left[j] = max left[j] currLeft\n            else\n                left[j] = 0\n                currLeft = j + 1\n            end\n        end\n        for j := range (lsCol - 1) -1 -1\n            if matrix[i][j] == \"1\"\n                right[j] = min right[j] currRight\n            else\n                right[j] = lsCol\n                currRight = j\n            end\n        end\n        for j := range lsCol\n            maxA = max maxA ((right[j] - left[j]) * height[j])\n        end\n    end\n    return maxA\nend\n\nfunc test\n    assert 6 (maximalRectangle [[\"1\" \"0\" \"1\" \"0\" \"0\"] [\"1\" \"0\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\" \"1\"] [\"1\" \"0\" \"0\" \"1\" \"0\"]])\n    assert 0 (maximalRectangle [[\"0\" \"0\"] [\"0\" \"0\"]])\n    assert 1 (maximalRectangle [[\"1\"]])\n    assert 12 (maximalRectangle [[\"1\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\"] [\"1\" \"1\" \"1\" \"1\"]])\nend\n\ntest",
  "input: ",
  "input-text Convert a string to uppercase",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy assert \"HELLO\" (upper \"hello\")\nassert \"WORLD\" (upper \"world\")\nassert \"123\" (upper \"123\")",
  "input: ",
  "input-text Concatenate two strings without using built-in functions",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func concat:string str1:string str2:string\n    result := str1\n    for ch := range str2\n        result = result + ch\n    end\n    return result\nend\n\nfunc test\n    assert \"HelloWorld\" (concat \"Hello\" \"World\")\nend",
  "input: ",
  "input-text Insert a node into a binary search tree",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func Node:{}any val:num\n    self:{}any\n    self.val = val\n    self.left = {}\n    self.right = {}\n    return self\nend\n\nfunc insert:any root:{}any val:num\n    if root == {}\n        return Node val\n    end\n    if val < root.val.(num)\n        root.left = insert root.left.({}any) val\n    else\n        root.right = insert root.right.({}any) val\n    end\n    return root\nend\n\nroot := (Node 5)\ninsert root 3\ninsert root 7\ninsert root 1\ninsert root 4\ninsert root 6\ninsert root 8\nprint root",
  "input: ",
  "input-text Find the minimum element in an array",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func minElem:num nums:[]num\n    result := nums[0]\n    for n := range nums[1:]\n        if result > n\n            result = n\n        end\n    end\n    return result\nend\n\nprint (minElem [1 2 3 4])",
  "input: ",
  "input-text Implement insertion sort",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func insertionSort:[]num arr:[]num\n    for i := range 1 (len arr)\n        key := arr[i]\n        j := i - 1\n        while j >= 0 and arr[j] > key\n            arr[j + 1] = arr[j]\n            j = j - 1\n        end\n        arr[j + 1] = key\n    end\n    return arr\nend\n\nassert [1 2 3 4 5] (insertionSort [5 2 4 1 3])\nassert [1 2 3 4 5] (insertionSort [1 2 3 4 5])\nassert [1 2 3 4 5] (insertionSort [5 4 3 2 1])",
  "input: ",
  "input-text Implement quick sort",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func quickSort:[]num arr:[]num\n    if (len arr) <= 1\n        return arr\n    end\n    pivot := arr[0]\n    left:[]num\n    right:[]num\n    for i := range 1 (len arr)\n        if arr[i] < pivot\n            left = left + [arr[i]]\n        else\n            right = right + [arr[i]]\n        end\n    end\n    return (quickSort left) + [pivot] + (quickSort right)\nend\n\nassert [1 2 3 4 5] (quickSort [5 2 4 1 3])\nassert [1 2 3 4 5 6 7 8 9 10] (quickSort [10 9 8 7 6 5 4 3 2 1])\nassert [] (quickSort [])\nassert [1] (quickSort [1])",
  "input: ",
  "input-text Implement a trie",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func Node:{}any\n    self:{}any\n    self.next = {}\n    self.isend = false\n    return self\nend\n\nfunc Trie:{}any\n    self:{}any\n    self.data = (Node)\n    return self\nend\n\nfunc insert self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            next[ch] = (Node)\n        end\n        node = next[ch].({}any)\n    end\n    node.isend = true\nend\n\nfunc search:bool self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return node.isend.(bool)\nend\n\nfunc startsWith:bool self:{}any prefix:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range prefix\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return true\nend\n\nfunc test\n    trie := (Trie)\n    insert trie \"apple\"\n    assert true (search trie \"apple\")\n    assert false (search trie \"app\")\n    assert true (startsWith trie \"app\")\n    insert trie \"app\"\n    assert true (search trie \"app\")\nend",
  "input: ",
  "input-text Implement bubble sort",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func sort arr:[]num\n    // bubble sort\n    for endIdx := range (len arr)-1 0 -1\n        for i := range endIdx\n            if arr[i] > arr[i + 1]\n                tmp := arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = tmp\n            end\n        end\n    end\nend",
  "input: ",
  "input-text Find the greatest common divisor (GCD) of two numbers",
  "input-evy ",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy func gcd:num a:num b:num\n    while b != 0\n        tmp := a\n        a = b\n        b = tmp % b\n    end\n    return a\nend\n\nassert 1 (gcd 3 7)\nassert 5 (gcd 10 15)\nassert 7 (gcd 49 14)\nassert 12 (gcd 144 60)",
  "input: ",
  "input-text ",
  "input-evy // buildBinaryTree takes a list of strings and returns a binary tree.\n\nfunc buildBinaryTree:{}any tree:[]any\n    root:{}any\n    rootany:any\n    rootany = root\n    queue := [rootany]\n    for i := range 0 (len tree)\n        if (len queue) == 0\n            break\n        end\n        node:{}any\n        node = queue[0].({}any)\n        queue = queue[1:]\n        anynull:any\n        anynull = \"null\"\n        if tree[i] != anynull\n            node[\"val\"] = tree[i]\n            node[\"left\"] = {}\n            node[\"right\"] = {}\n            queue = queue + [node[\"left\"]]\n            queue = queue + [node[\"right\"]]\n        end\n    end\n    return root\nend\n\n\n\nfunc test\n    tree := buildBinaryTree [\"a\" \"b\" \"c\"]\n    assertEqual \"a\" tree[\"val\"]\n    assertEqual \"b\" tree[\"left\"].({}any)[\"val\"]\n    assertEqual \"c\" tree[\"right\"].({}any)[\"val\"]\n    tree2 := buildBinaryTree [1 2 3]\n    assertEqual 1 tree2[\"val\"]\n    assertEqual 2 tree2[\"left\"].({}any)[\"val\"]\n    assertEqual 3 tree2[\"right\"].({}any)[\"val\"]\n    tree3 := buildBinaryTree [\"a\"]\n    assertEqual \"a\" tree3[\"val\"]\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // buildBinaryTree takes a list of strings and returns a binary tree.\n\nfunc buildBinaryTree:{}any tree:[]any\n    root:{}any\n    rootany:any\n    rootany = root\n    queue := [rootany]\n    for i := range 0 (len tree)\n        if (len queue) == 0\n            break\n        end\n        node:{}any\n        node = queue[0].({}any)\n        queue = queue[1:]\n        anynull:any\n        anynull = \"null\"\n        if tree[i] != anynull\n            node[\"val\"] = tree[i]\n            node[\"left\"] = {}\n            node[\"right\"] = {}\n            queue = queue + [node[\"left\"]]\n            queue = queue + [node[\"right\"]]\n        end\n    end\n    return root\nend\n\n\n\nfunc test\n    tree := buildBinaryTree [\"a\" \"b\" \"c\"]\n    assertEqual \"a\" tree[\"val\"]\n    assertEqual \"b\" tree[\"left\"].({}any)[\"val\"]\n    assertEqual \"c\" tree[\"right\"].({}any)[\"val\"]\n    tree2 := buildBinaryTree [1 2 3]\n    assertEqual 1 tree2[\"val\"]\n    assertEqual 2 tree2[\"left\"].({}any)[\"val\"]\n    assertEqual 3 tree2[\"right\"].({}any)[\"val\"]\n    tree3 := buildBinaryTree [\"a\"]\n    assertEqual \"a\" tree3[\"val\"]\nend",
  "input: ",
  "input-text ",
  "input-evy // 567. Permutation in String\n// Solved\n// Medium\n// Topics\n// Companies\n// Hint\n// Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\n// In other words, return true if one of s1's permutations is the substring of s2.\n// Example 1:\n// Input: s1 = \"ab\", s2 = \"eidbaooo\"\n// Output: true\n// Explanation: s2 contains one permutation of s1 (\"ba\").\n// Example 2:\n// Input: s1 = \"ab\", s2 = \"eidboaoo\"\n// Output: false\n// Constraints:\n// 1 <= s1.length, s2.length <= 104\n// s1 and s2 consist of lowercase English letters.\n\nfunc checkInclusion:bool s1:string s2:string\n    if (len s1) > (len s2)\n        return false\n    end\n    s1count:{}num\n    s2count:{}num\n    for i := range (len s1)\n        if !(has s1count s1[i])\n            s1count[s1[i]] = 0\n            s2count[s2[i]] = 0\n        end\n        s1count[s1[i]] = s1count[s1[i]] + 1\n        s2count[s2[i]] = s2count[s2[i]] + 1\n    end\n    l := 0\n    while l + (len s1) < (len s2)\n        if s1count == s2count\n            return true\n        end\n        start := s2[l] // The character at the start of the current window. To be removed\n        finish := s2[l + (len s1)] // the character after the end of the current window. To be added\n        s2count[start] = s2count[start] - 1\n        if s2count[start] == 0\n            del s2count start\n        end\n        if !(has s2count finish)\n            s2count[finish] = 0\n        end\n        s2count[finish] = s2count[finish] + 1\n        l = l + 1\n    end\n    return s1count == s2count\nend\n\nfunc test\n    assertEqual true (checkInclusion \"ab\" \"ab\")\n    assertEqual true (checkInclusion \"ab\" \"eidbaooo\")\n    assertEqual false (checkInclusion \"ab\" \"eidboaoo\")\n    assertEqual false (checkInclusion \"ab\" \"a\")\nend",
  "input-python def check_inclusion(s1, s2):\n    \"\"\"\n    Checks if one string (s1) is a permutation of a substring of another string (s2).\n\n    Args:\n        s1: The potential permutation string.\n        s2: The string to search within.\n\n    Returns:\n        True if s1 is a permutation of a substring of s2, False otherwise.\n    \"\"\"\n    if len(s1) > len(s2):\n        return False\n\n    s1_count = {}\n    s2_count = {}\n\n    # Initialize character counts for the first window\n    for i in range(len(s1)):\n        s1_count[s1[i]] = s1_count.get(s1[i], 0) + 1\n        s2_count[s2[i]] = s2_count.get(s2[i], 0) + 1\n\n    l = 0  # Left pointer of the sliding window\n\n    for r in range(len(s1), len(s2)):  # Iterate with the right pointer\n        if s1_count == s2_count:\n            return True  # Permutation found\n\n        # Update counts for the sliding window\n        s2_count[s2[r]] = s2_count.get(s2[r], 0) + 1  # Add the new character\n        s2_count[s2[l]] -= 1                         # Remove the old character\n        if s2_count[s2[l]] == 0:\n            del s2_count[s2[l]]\n        l += 1  # Move the window\n\n    return s1_count == s2_count  # Check one last time after the loop\n\n\ndef test():\n    assert check_inclusion(\"ab\", \"ab\") == True\n    assert check_inclusion(\"ab\", \"eidbaooo\") == True\n    assert check_inclusion(\"ab\", \"eidboaoo\") == False\n    assert check_inclusion(\"ab\", \"a\") == False\n    # Additional test case to catch the issue\n    assert check_inclusion(\"adc\", \"dcda\") == True\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func checkInclusion:bool s1:string s2:string\n    if (len s1) > (len s2)\n        return false\n    end\n    s1count:{}num\n    s2count:{}num\n    for i := range (len s1)\n        if !(has s1count s1[i])\n            s1count[s1[i]] = 0\n            s2count[s2[i]] = 0\n        end\n        s1count[s1[i]] = s1count[s1[i]] + 1\n        s2count[s2[i]] = s2count[s2[i]] + 1\n    end\n    l := 0\n    while l + (len s1) < (len s2)\n        if s1count == s2count\n            return true\n        end\n        start := s2[l] // The character at the start of the current window. To be removed\n        finish := s2[l + (len s1)] // the character after the end of the current window. To be added\n        s2count[start] = s2count[start] - 1\n        if s2count[start] == 0\n            del s2count start\n        end\n        if !(has s2count finish)\n            s2count[finish] = 0\n        end\n        s2count[finish] = s2count[finish] + 1\n        l = l + 1\n    end\n    return s1count == s2count\nend\n\nfunc test\n    assertEqual true (checkInclusion \"ab\" \"ab\")\n    assertEqual true (checkInclusion \"ab\" \"eidbaooo\")\n    assertEqual false (checkInclusion \"ab\" \"eidboaoo\")\n    assertEqual false (checkInclusion \"ab\" \"a\")\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy // 208. Implement Trie (Prefix Tree)\n// Solved\n// Medium\n// Topics\n// Companies\n// A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n// Implement the Trie class:\n// Trie() Initializes the trie object.\n// void insert(String word) Inserts the string word into the trie.\n// boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n// boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n// Example 1:\n// Input\n// [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n// [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n// Output\n// [null, null, true, false, true, null, true]\n// Explanation\n// Trie trie = new Trie();\n// trie.insert(\"apple\");\n// trie.search(\"apple\");   // return True\n// trie.search(\"app\");     // return False\n// trie.startsWith(\"app\"); // return True\n// trie.insert(\"app\");\n// trie.search(\"app\");     // return True\n// Constraints:\n// 1 <= word.length, prefix.length <= 2000\n// word and prefix consist only of lowercase English letters.\n// At most 3 * 104 calls in total will be made to insert, search, and startsWith.\n\nfunc Node:{}any\n    self:{}any\n    self.next = {}\n    self.isend = false\n    return self\nend\n\nfunc Trie:{}any\n    self:{}any\n    self.data = (Node)\n    return self\nend\n\nfunc insert self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            next[ch] = (Node)\n        end\n        node = next[ch].({}any)\n    end\n    node.isend = true\nend\n\nfunc search:bool self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return node.isend.(bool)\nend\n\nfunc startsWith:bool self:{}any prefix:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range prefix\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return true\nend\n\nfunc test\n    trie := (Trie)\n    insert trie \"apple\"\n    assertEqual true (search trie \"apple\")\n    assertEqual false (search trie \"app\")\n    assertEqual true (startsWith trie \"app\")\n    insert trie \"app\"\n    assertEqual true (search trie \"app\")\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // 208. Implement Trie (Prefix Tree)\n// Solved\n// Medium\n// Topics\n// Companies\n// A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n// Implement the Trie class:\n// Trie() Initializes the trie object.\n// void insert(String word) Inserts the string word into the trie.\n// boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n// boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n// Example 1:\n// Input\n// [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n// [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n// Output\n// [null, null, true, false, true, null, true]\n// Explanation\n// Trie trie = new Trie();\n// trie.insert(\"apple\");\n// trie.search(\"apple\");   // return True\n// trie.search(\"app\");     // return False\n// trie.startsWith(\"app\"); // return True\n// trie.insert(\"app\");\n// trie.search(\"app\");     // return True\n// Constraints:\n// 1 <= word.length, prefix.length <= 2000\n// word and prefix consist only of lowercase English letters.\n// At most 3 * 104 calls in total will be made to insert, search, and startsWith.\n\nfunc Node:{}any\n    self:{}any\n    self.next = {}\n    self.isend = false\n    return self\nend\n\nfunc Trie:{}any\n    self:{}any\n    self.data = (Node)\n    return self\nend\n\nfunc insert self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            next[ch] = (Node)\n        end\n        node = next[ch].({}any)\n    end\n    node.isend = true\nend\n\nfunc search:bool self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return node.isend.(bool)\nend\n\nfunc startsWith:bool self:{}any prefix:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range prefix\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return true\nend\n\nfunc test\n    trie := (Trie)\n    insert trie \"apple\"\n    assertEqual true (search trie \"apple\")\n    assertEqual false (search trie \"app\")\n    assertEqual true (startsWith trie \"app\")\n    insert trie \"app\"\n    assertEqual true (search trie \"app\")\nend",
  "input: ",
  "input-text ",
  "input-evy // 217. Contains Duplicate\n// Solved\n// Easy\n// Topics\n// Companies\n// Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n// Example 1:\n// Input: nums = [1,2,3,1]\n// Output: true\n// Example 2:\n// Input: nums = [1,2,3,4]\n// Output: false\n// Example 3:\n// Input: nums = [1,1,1,3,3,4,3,2,4,2]\n// Output: true\n\nfunc containsDuplicate:bool nums:[]num\n    seen := {}\n    for ii := range nums\n        i := sprint ii\n        if has seen i\n            return true\n        end\n        seen[i] = true\n    end\n    return false\nend\n\nfunc test\n    assertEqual true (containsDuplicate [1 2 3 1])\n    assertEqual false (containsDuplicate [1 2 3 4])\n    assertEqual true (containsDuplicate [1 1 1 3 3 4 3 2 4 2])\nend",
  "input-python ",
  "output: ",
  "output-text ",
  "output-evy // 217. Contains Duplicate\n// Solved\n// Easy\n// Topics\n// Companies\n// Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n// Example 1:\n// Input: nums = [1,2,3,1]\n// Output: true\n// Example 2:\n// Input: nums = [1,2,3,4]\n// Output: false\n// Example 3:\n// Input: nums = [1,1,1,3,3,4,3,2,4,2]\n// Output: true\n\nfunc containsDuplicate:bool nums:[]num\n    seen := {}\n    for ii := range nums\n        i := sprint ii\n        if has seen i\n            return true\n        end\n        seen[i] = true\n    end\n    return false\nend\n\nfunc test\n    assertEqual true (containsDuplicate [1 2 3 1])\n    assertEqual false (containsDuplicate [1 2 3 4])\n    assertEqual true (containsDuplicate [1 1 1 3 3 4 3 2 4 2])\nend",
  "input: ",
  "input-text ",
  "input-evy // 412. Fizz Buzz\n// Easy\n// Topics\n// Companies\n// Given an integer n, return a string array answer (1-indexed) where:\n// answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\n// answer[i] == \"Fizz\" if i is divisible by 3.\n// answer[i] == \"Buzz\" if i is divisible by 5.\n// answer[i] == i (as a string) if none of the above conditions are true.\n// Example 1:\n// Input: n = 3\n// Output: [\"1\",\"2\",\"Fizz\"]\n// Example 2:\n// Input: n = 5\n// Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n// Example 3:\n// Input: n = 15\n// Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n// Constraints:\n// 1 <= n <= 104\n\nfunc fizzbuzz:[]string n:num\n    ans:[]string\n    for i := range 1 (n + 1)\n        s:string\n        if i % 3 == 0\n            s = s + \"Fizz\"\n        end\n        if i % 5 == 0\n            s = s + \"Buzz\"\n        end\n        if s == \"\"\n            s = sprintf \"%v\" i\n        end\n        ans = ans + [s]\n    end\n    return ans\nend\n\nfunc test\n    assertEqual [\"1\" \"2\" \"Fizz\"] (fizzbuzz 3)\n    assertEqual [\"1\" \"2\" \"Fizz\" \"4\" \"Buzz\"] (fizzbuzz 5)\n    assertEqual [\"1\" \"2\" \"Fizz\" \"4\" \"Buzz\" \"Fizz\" \"7\" \"8\" \"Fizz\" \"Buzz\" \"11\" \"Fizz\" \"13\" \"14\" \"FizzBuzz\"] (fizzbuzz 15)\nend",
  "input-python def fizzbuzz(n):\n    ans = []\n    for i in range(1, n+1):\n        s = \"\"\n        if i % 3 == 0:\n            s += \"Fizz\"\n        if i % 5 == 0:\n            s += \"Buzz\"\n        if not s:\n            s = str(i)\n        ans.append(s)\n    return ans\n\ndef test():\n    assert fizzbuzz(1) == [\"1\"]\n    assert fizzbuzz(3) == [\"1\", \"2\", \"Fizz\"]\n    assert fizzbuzz(5) == [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\"]\n    assert fizzbuzz(15) == [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\"]\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func fizzbuzz:[]string n:num\n    ans:[]string\n    for i := range 1 (n + 1)\n        s:string\n        if i % 3 == 0\n            s = s + \"Fizz\"\n        end\n        if i % 5 == 0\n            s = s + \"Buzz\"\n        end\n        if s == \"\"\n            s = sprintf \"%v\" i\n        end\n        ans = ans + [s]\n    end\n    return ans\nend\n\nfunc test\n    assertEqual [\"1\" \"2\" \"Fizz\"] (fizzbuzz 3)\n    assertEqual [\"1\" \"2\" \"Fizz\" \"4\" \"Buzz\"] (fizzbuzz 5)\n    assertEqual [\"1\" \"2\" \"Fizz\" \"4\" \"Buzz\" \"Fizz\" \"7\" \"8\" \"Fizz\" \"Buzz\" \"11\" \"Fizz\" \"13\" \"14\" \"FizzBuzz\"] (fizzbuzz 15)\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy // 509. Fibonacci Number\n// Easy\n// Topics\n// Companies\n// The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n// F(0) = 0, F(1) = 1\n// F(n) = F(n - 1) + F(n - 2), for n > 1.\n// Given n, calculate F(n).\n// Example 1:\n// Input: n = 2\n// Output: 1\n// Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\n// Example 2:\n// Input: n = 3\n// Output: 2\n// Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\n// Example 3:\n// Input: n = 4\n// Output: 3\n// Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\n// Constraints:\n// 0 <= n <= 30\n\nfunc fibonacci:num n:num\n    zero := 0\n    one := 1\n    for range 1 n\n        tmp := one\n        one = one + zero\n        zero = tmp\n    end\n    return one\nend\n\nfunc test\n    assertEqual 1 (fibonacci 2)\n    assertEqual 2 (fibonacci 3)\n    assertEqual 3 (fibonacci 4)\nend",
  "input-python def fibonacci(n):\n    \"\"\"Calculates the nth Fibonacci number iteratively.\"\"\"\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n - 1):  # Loop n - 1 times since we already have the first two numbers\n        a, b = b, a + b   # Elegant simultaneous assignment for updating\n    return b\n\n\ndef test():\n    \"\"\"Tests the fibonacci function.\"\"\"\n    assert fibonacci(2) == 1\n    assert fibonacci(3) == 2\n    assert fibonacci(4) == 3\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func fibonacci:num n:num\n    zero := 0\n    one := 1\n    for range 1 n\n        tmp := one\n        one = one + zero\n        zero = tmp\n    end\n    return one\nend\n\nfunc test\n    assertEqual 1 (fibonacci 2)\n    assertEqual 2 (fibonacci 3)\n    assertEqual 3 (fibonacci 4)\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy // 199. Binary Tree Right Side View\n// Solved\n// Medium\n// Topics\n// Companies\n// Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n// Example 1:\n// Input: root = [1,2,3,null,5,null,4]\n// Output: [1,3,4]\n// Example 2:\n// Input: root = [1,null,3]\n// Output: [1,3]\n// Example 3:\n// Input: root = []\n// Output: []\n// Constraints:\n// The number of nodes in the tree is in the range [0, 100].\n// -100 <= Node.val <= 100\n\nfunc rightSideView:[]any treearr:[]any\n    root:any\n    root = buildBinaryTree treearr\n    queue := []\n    res := []\n    queue = queue + [root]\n    while (len queue) > 0\n        size := len queue\n        for i := range 0 size\n            node:{}any\n            node = queue[0].({}any)\n            queue = queue[1:]\n            if (has node \"val\") and i == size - 1\n                res = res + [node[\"val\"]]\n            end\n            if (has node \"left\") and node[\"left\"].({}any) != {}\n                queue = queue + [node[\"left\"]]\n            end\n            if (has node \"right\") and node[\"right\"].({}any) != {}\n                queue = queue + [node[\"right\"]]\n            end\n        end\n    end\n    return res\nend\n\nfunc buildBinaryTree:{}any tree:[]any\n    root:{}any\n    rootany:any\n    rootany = root\n    queue := [rootany]\n    for i := range 0 (len tree)\n        if (len queue) == 0\n            break\n        end\n        node:{}any\n        node = queue[0].({}any)\n        queue = queue[1:]\n        anynull:any\n        anynull = \"null\"\n        if tree[i] != anynull\n            node[\"val\"] = tree[i]\n            node[\"left\"] = {}\n            node[\"right\"] = {}\n            queue = queue + [node[\"left\"]]\n            queue = queue + [node[\"right\"]]\n        end\n    end\n    return root\nend\n\nfunc test\n    assertEqual [1 3 4 \"\"][:-1] (rightSideView [1 2 3 \"null\" 5 \"null\" 4])\n    assertEqual [1 3 \"\"][:-1] (rightSideView [1 \"null\" 3])\n    assertEqual [] (rightSideView [])\n    assertEqual [1 3 4 \"\"][:-1] (rightSideView [1 2 3 4])\nend",
  "input-python from collections import deque\n\ndef right_side_view(tree_arr):\n    \"\"\"\n    Finds the right side view of a binary tree represented as an array.\n\n    Args:\n        tree_arr: A list representing the binary tree in level order traversal.\n\n    Returns:\n        A list containing the values of nodes visible from the right side.\n    \"\"\"\n    root = build_binary_tree(tree_arr)  # Build the binary tree\n    queue = deque([root])  # Use a deque for efficient queue operations\n    res = []\n\n    while queue:\n        size = len(queue)\n        for i in range(size):\n            node = queue.popleft()\n            if node and i == size - 1:  # If it's the last node in the level\n                res.append(node[\"val\"])\n            if node and node.get(\"left\"):  # Check if left child exists\n                queue.append(node[\"left\"])\n            if node and node.get(\"right\"):  # Check if right child exists\n                queue.append(node[\"right\"])\n    return res\n\ndef build_binary_tree(tree):\n    \"\"\"\n    Builds a binary tree from a list representation.\n\n    Args:\n        tree: A list representing the binary tree in level order traversal.\n\n    Returns:\n        The root node of the constructed binary tree.\n    \"\"\"\n    if not tree:  # Empty tree\n        return None\n    root = {\"val\": tree[0]}\n    queue = deque([root])\n    i = 1\n    while queue and i < len(tree):\n        node = queue.popleft()\n        if tree[i] != \"null\":\n            node[\"left\"] = {\"val\": tree[i]}\n            queue.append(node[\"left\"])\n        i += 1\n        if i < len(tree) and tree[i] != \"null\":\n            node[\"right\"] = {\"val\": tree[i]}\n            queue.append(node[\"right\"])\n        i += 1\n\n    return root\n\ndef test():\n    \"\"\"Tests the right_side_view function.\"\"\"\n    assert right_side_view([1, 2, 3, \"null\", 5, \"null\", 4]) == [1, 3, 4]\n    assert right_side_view([1, \"null\", 3]) == [1, 3]\n    assert right_side_view([]) == []\n    assert right_side_view([1, 2, 3, 4]) == [1, 3, 4]\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func rightSideView:[]any treearr:[]any\n    root:any\n    root = buildBinaryTree treearr\n    queue := []\n    res := []\n    queue = queue + [root]\n    while (len queue) > 0\n        size := len queue\n        for i := range 0 size\n            node:{}any\n            node = queue[0].({}any)\n            queue = queue[1:]\n            if (has node \"val\") and i == size - 1\n                res = res + [node[\"val\"]]\n            end\n            if (has node \"left\") and node[\"left\"].({}any) != {}\n                queue = queue + [node[\"left\"]]\n            end\n            if (has node \"right\") and node[\"right\"].({}any) != {}\n                queue = queue + [node[\"right\"]]\n            end\n        end\n    end\n    return res\nend\n\nfunc buildBinaryTree:{}any tree:[]any\n    root:{}any\n    rootany:any\n    rootany = root\n    queue := [rootany]\n    for i := range 0 (len tree)\n        if (len queue) == 0\n            break\n        end\n        node:{}any\n        node = queue[0].({}any)\n        queue = queue[1:]\n        anynull:any\n        anynull = \"null\"\n        if tree[i] != anynull\n            node[\"val\"] = tree[i]\n            node[\"left\"] = {}\n            node[\"right\"] = {}\n            queue = queue + [node[\"left\"]]\n            queue = queue + [node[\"right\"]]\n        end\n    end\n    return root\nend\n\nfunc test\n    assertEqual [1 3 4 \"\"][:-1] (rightSideView [1 2 3 \"null\" 5 \"null\" 4])\n    assertEqual [1 3 \"\"][:-1] (rightSideView [1 \"null\" 3])\n    assertEqual [] (rightSideView [])\n    assertEqual [1 3 4 \"\"][:-1] (rightSideView [1 2 3 4])\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy // 78. Subsets\n// Solved\n// Medium\n// Topics\n// Companies\n// Given an integer array nums of unique elements, return all possible\n// subsets\n// (the power set).\n// The solution set must not contain duplicate subsets. Return the solution in any order.\n// Example 1:\n// Input: nums = [1,2,3]\n// Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n// Example 2:\n// Input: nums = [0]\n// Output: [[],[0]]\n// Constraints:\n// 1 <= nums.length <= 10\n// -10 <= nums[i] <= 10\n// All the numbers of nums are unique.\n\nfunc backtrack nums:[]num current:[]num ans:[][]num\n    if (len nums) == 0\n        ans = [current[:]] + ans\n        return\n    end\n    for range nums\n        backtrack nums[1:] current ans\n        current = current + [nums[0]]\n        if (len nums) > 1\n            backtrack nums[1:] current ans\n        else\n            backtrack [] current ans\n        end\n        current = current[:-1]\n    end\nend\n\nfunc subsets:[][]num nums:[]num\n    current:[]num\n    ans:[][]num\n    backtrack nums current ans\n    return ans\nend\n\nfails := 0\ntotal := 0\n\nfunc assertEqualsameelements want:[][]num got:[][]num\n    wantset := {}\n    extraelements:[]string\n    missingelements:[]string\n    failed := false\n    for elem := range want\n        wantset[sprintf \"%v\" elem] = true\n    end\n    gotset := {}\n    for elem := range got\n        gotset[sprintf \"%v\" elem] = true\n    end\n    for key := range wantset\n        if !(has gotset key)\n            printf \"missing element int got %v\\n\" key\n            extraelements = extraelements + [key]\n            failed = true\n        end\n    end\n    for key := range gotset\n        if !(has wantset key)\n            printf \"extra element int got %v\\n\" key\n            missingelements = missingelements + [key]\n            failed = true\n        end\n    end\n    if (len missingelements) > 0\n        printf \"missing elements: %v\\n\" missingelements\n    end\n    if (len extraelements) > 0\n        printf \"extra elements: %v\\n\" extraelements\n    end\n    if failed\n        fails = fails + 1\n    end\n    total = total + 1\nend\n\nfunc test\n    assertEqualsameelements [[1 2 3] [1 2] [1 3] [1] [2 3] [2] [3] []] (subsets [1 2 3])\n    assertEqualsameelements [[0] []] (subsets [0])\n    assertEqualsameelements [[]] (subsets [])\nend",
  "input-python def backtrack(nums, current, ans):\n    \"\"\"Recursive backtracking function to generate subsets.\"\"\"\n    if not nums:  # Base case: empty input list\n        ans.append(current[:])  # Append a copy of the current subset\n        return\n\n    for i in range(len(nums)):\n        backtrack(nums[i+1:], current, ans)  # Exclude the current element\n        current.append(nums[i])  # Include the current element\n        if len(nums) > 1:  # If there are more elements\n            backtrack(nums[i+1:], current, ans)  # Backtrack again\n        else:\n            backtrack([], current, ans)  # Special case for last element\n        current.pop()  # Remove the current element (backtracking step)\n\ndef subsets(nums):\n    \"\"\"Generates all subsets of a given set.\n\n    Args:\n        nums: A list of numbers representing the set.\n\n    Returns:\n        A list of lists, where each inner list is a subset of the input set.\n    \"\"\"\n    current, ans = [], []\n    backtrack(nums, current, ans)\n    return ans\n\n# Testing\nfails = 0\ntotal = 0\n\ndef assert_equal_same_elements(want, got):\n    \"\"\"Asserts that two lists of lists contain the same elements regardless of order.\"\"\"\n    global fails, total\n\n    want_set = set(tuple(x) for x in want)  # Convert to sets for easier comparison\n    got_set = set(tuple(x) for x in got)\n\n    missing_elements = want_set - got_set\n    extra_elements = got_set - want_set\n\n    if missing_elements or extra_elements:\n        fails += 1\n        print(f\"Expected: {want}, Got: {got}\")\n        if missing_elements:\n            print(f\"Missing elements: {missing_elements}\")\n        if extra_elements:\n            print(f\"Extra elements: {extra_elements}\")\n\n    total += 1\n\ndef test():\n    \"\"\"Tests the subsets function.\"\"\"\n    assert_equal_same_elements([[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []], subsets([1, 2, 3]))\n    assert_equal_same_elements([[0], []], subsets([0]))\n    assert_equal_same_elements([[]], subsets([]))\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func backtrack nums:[]num current:[]num ans:[][]num\n    if (len nums) == 0\n        ans = [current[:]] + ans\n        return\n    end\n    for range nums\n        backtrack nums[1:] current ans\n        current = current + [nums[0]]\n        if (len nums) > 1\n            backtrack nums[1:] current ans\n        else\n            backtrack [] current ans\n        end\n        current = current[:-1]\n    end\nend\n\nfunc subsets:[][]num nums:[]num\n    current:[]num\n    ans:[][]num\n    backtrack nums current ans\n    return ans\nend\n\nfails := 0\ntotal := 0\n\nfunc assertEqualsameelements want:[][]num got:[][]num\n    wantset := {}\n    extraelements:[]string\n    missingelements:[]string\n    failed := false\n    for elem := range want\n        wantset[sprintf \"%v\" elem] = true\n    end\n    gotset := {}\n    for elem := range got\n        gotset[sprintf \"%v\" elem] = true\n    end\n    for key := range wantset\n        if !(has gotset key)\n            printf \"missing element int got %v\\n\" key\n            extraelements = extraelements + [key]\n            failed = true\n        end\n    end\n    for key := range gotset\n        if !(has wantset key)\n            printf \"extra element int got %v\\n\" key\n            missingelements = missingelements + [key]\n            failed = true\n        end\n    end\n    if (len missingelements) > 0\n        printf \"missing elements: %v\\n\" missingelements\n    end\n    if (len extraelements) > 0\n        printf \"extra elements: %v\\n\" extraelements\n    end\n    if failed\n        fails = fails + 1\n    end\n    total = total + 1\nend\n\nfunc test\n    assertEqualsameelements [[1 2 3] [1 2] [1 3] [1] [2 3] [2] [3] []] (subsets [1 2 3])\n    assertEqualsameelements [[0] []] (subsets [0])\n    assertEqualsameelements [[]] (subsets [])\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy // 3. Longest Substring Without Repeating Characters\n// Solved\n// Medium\n// Topics\n// Companies\n// Given a string s, find the length of the longest\n// substring without repeating characters.\n// Example 1:\n// Input: s = \"abcabcbb\"\n// Output: 3\n// Explanation: The answer is \"abc\", with the length of 3.\n// Example 2:\n// Input: s = \"bbbbb\"\n// Output: 1\n// Explanation: The answer is \"b\", with the length of 1.\n// Example 3:\n// Input: s = \"pwwkew\"\n// Output: 3\n// Explanation: The answer is \"wke\", with the length of 3.\n// Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n// Constraints:\n// 0 <= s.length <= 5 * 104\n// s consists of English letters, digits, symbols and spaces.\n\nfunc lengthOfLongestSubstring:num s:string\n    seen:{}num\n    longestsubstring := 0\n    startIdx := 0\n    for i := range (len s)\n        elem := s[i]\n        if has seen elem\n            startIdx = max startIdx (seen[elem] + 1)\n        end\n        seen[elem] = i\n        longestsubstring = max longestsubstring (i - startIdx + 1)\n    end\n    return longestsubstring\nend\n\nfunc test\n    assertEqual 3 (lengthOfLongestSubstring \"abcabcbb\")\n    assertEqual 1 (lengthOfLongestSubstring \"bbbbb\")\n    assertEqual 3 (lengthOfLongestSubstring \"pwwkew\")\nend",
  "input-python def length_of_longest_substring(s):\n    seen = {}\n    longest_substring = 0\n    start_idx = 0\n    for i, elem in enumerate(s):\n        if elem in seen:\n            start_idx = max(start_idx, seen[elem] + 1)\n        seen[elem] = i\n        longest_substring = max(longest_substring, i - start_idx + 1)\n    return longest_substring\n\ndef test():\n    assert length_of_longest_substring(\"abcabcbb\") == 3\n    assert length_of_longest_substring(\"bbbbb\") == 1\n    assert length_of_longest_substring(\"pwwkew\") == 3\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func lengthOfLongestSubstring:num s:string\n    seen:{}num\n    longestsubstring := 0\n    startIdx := 0\n    for i := range (len s)\n        elem := s[i]\n        if has seen elem\n            startIdx = max startIdx (seen[elem] + 1)\n        end\n        seen[elem] = i\n        longestsubstring = max longestsubstring (i - startIdx + 1)\n    end\n    return longestsubstring\nend\n\nfunc test\n    assertEqual 3 (lengthOfLongestSubstring \"abcabcbb\")\n    assertEqual 1 (lengthOfLongestSubstring \"bbbbb\")\n    assertEqual 3 (lengthOfLongestSubstring \"pwwkew\")\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy // 198. House Robber\n// Solved\n// Medium\n// Topics\n// Companies\n// You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n// Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n// Example 1:\n// Input: nums = [1,2,3,1]\n// Output: 4\n// Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n// Total amount you can rob = 1 + 3 = 4.\n// Example 2:\n// Input: nums = [2,7,9,3,1]\n// Output: 12\n// Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\n// Total amount you can rob = 2 + 9 + 1 = 12.\n// Constraints:\n// 1 <= nums.length <= 100\n// 0 <= nums[i] <= 400\n\nfunc rob:num nums:[]num\n    n := len nums\n    max_steal := nums\n    if n > 1\n        max_steal[1] = max nums[0] nums[1]\n    end\n    for i := range 2 n\n        max_steal[i] = max (max_steal[i - 1]) (max_steal[i - 2] + nums[i])\n    end\n    return max_steal[-1]\nend\n\n\n\nfunc test\n    assertEqual 4 (rob [1 2 3 1])\n    assertEqual 12 (rob [2 7 9 3 1])\nend",
  "input-python def rob(nums):\n    \"\"\"\n    Calculates the maximum amount of money a robber can steal from a row of houses\n    without robbing adjacent houses.\n\n    Args:\n        nums: A list of non-negative integers representing the amount of money in each house.\n\n    Returns:\n        The maximum amount of money the robber can steal.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0  # Handle the case of an empty house list\n    if n == 1:\n        return nums[0]  # If there's only one house, take it\n\n    # Initialize variables to track the maximum amount stolen at the previous two houses\n    prev_max = nums[0]\n    curr_max = max(nums[0], nums[1])\n\n    for i in range(2, n):\n        # Update current max using previous two max values\n        temp = curr_max\n        curr_max = max(curr_max, prev_max + nums[i])\n        prev_max = temp\n\n    return curr_max  # Return the maximum amount stolen\n\n\ndef test():\n    assert rob([1, 2, 3, 1]) == 4\n    assert rob([2, 7, 9, 3, 1]) == 12\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func rob:num nums:[]num\n    n := len nums\n    max_steal := nums\n    if n > 1\n        max_steal[1] = max nums[0] nums[1]\n    end\n    for i := range 2 n\n        max_steal[i] = max (max_steal[i - 1]) (max_steal[i - 2] + nums[i])\n    end\n    return max_steal[-1]\nend\n\n\n\nfunc test\n    assertEqual 4 (rob [1 2 3 1])\n    assertEqual 12 (rob [2 7 9 3 1])\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy // 121. Best Time to Buy and Sell Stock\n// Solved\n// Easy\n// Topics\n// Companies\n// You are given an array prices where prices[i] is the price of a given stock on the ith day.\n// You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n// Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n// Example 1:\n// Input: prices = [7,1,5,3,6,4]\n// Output: 5\n// Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n// Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n// Example 2:\n// Input: prices = [7,6,4,3,1]\n// Output: 0\n// Explanation: In this case, no transactions are done and the max profit = 0.\n// Constraints:\n// 1 <= prices.length <= 105\n// 0 <= prices[i] <= 104\n\nfunc maxProfit:num prices:[]num\n    mprofit := 0\n    lowest := prices[0]\n    for price := range prices\n        mprofit = max mprofit (price - lowest)\n        lowest = min lowest price\n    end\n    return mprofit\nend\n\n\n\nfunc test\n    assertEqual 5 (maxProfit [7 1 5 3 6 4])\n    assertEqual 0 (maxProfit [7 6 4 3 1])\nend",
  "input-python def max_profit(prices):\n    \"\"\"Calculates the maximum profit from buying and selling a stock.\n\n    Args:\n        prices: A list of integers representing the stock prices each day.\n\n    Returns:\n        The maximum profit that can be achieved.\n    \"\"\"\n    max_profit = 0       # Initialize maximum profit to 0\n    lowest_price = prices[0]  # Start with the first price as the lowest\n\n    for price in prices:\n        max_profit = max(max_profit, price - lowest_price)  # Update max profit if we find a better one\n        lowest_price = min(lowest_price, price)  # Update the lowest price so far\n\n    return max_profit\n\n# Test Cases\ndef test_max_profit():\n    assert max_profit([7, 1, 5, 3, 6, 4]) == 5\n    assert max_profit([7, 6, 4, 3, 1]) == 0\n\n# Run the tests if this script is executed directly\nif __name__ == \"__main__\":\n    test_max_profit()",
  "output: ",
  "output-text ",
  "output-evy func maxProfit:num prices:[]num\n    mprofit := 0\n    lowest := prices[0]\n    for price := range prices\n        mprofit = max mprofit (price - lowest)\n        lowest = min lowest price\n    end\n    return mprofit\nend\n\nfunc test\n    assertEqual 5 (maxProfit [7 1 5 3 6 4])\n    assertEqual 0 (maxProfit [7 6 4 3 1])\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy // 1. Two Sum\n// Solved\n// Easy\n// Topics\n// Companies\n// Hint\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n// You may assume that each input would have exactly one solution, and you may not use the same element twice.\n// You can return the answer in any order.\n// Example 1:\n// Input: nums = [2,7,11,15], target = 9\n// Output: [0,1]\n// Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n// Example 2:\n// Input: nums = [3,2,4], target = 6\n// Output: [1,2]\n// Example 3:\n// Input: nums = [3,3], target = 6\n// Output: [0,1]\n// Constraints:\n// 2 <= nums.length <= 104\n// -109 <= nums[i] <= 109\n// -109 <= target <= 109\n// Only one valid answer exists.\n// Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?\n\nfunc twosum:[]num nums:[]num target:num\n    m:{}num\n    for i := range (len nums)\n        v := nums[i]\n        if has m (sprintf \"%v\" (target - v))\n            return [m[sprintf \"%v\" (target - v)] i]\n        end\n        m[sprintf \"%v\" v] = i\n    end\n    return []\nend\n\n\n\nfunc test\n    assertEqual [0 1] (twosum [2 7 11 15] 9)\n    assertEqual [1 2] (twosum [3 2 4] 6)\n    assertEqual [0 1] (twosum [3 3] 6)\nend",
  "input-python def two_sum(nums, target):\n    num_dict = {}\n    for i, v in enumerate(nums):\n        if str(target - v) in num_dict:\n            return [num_dict[str(v)], i]\n        num_dict[str(v)] = i\n    return []\n\ndef test():\n    assert two_sum([2, 7, 11, 15], 9) == [0, 1]\n    assert two_sum([3, 2, 4], 6) == [1, 2]\n    assert two_sum([3, 3], 6) == [0, 1]",
  "output: ",
  "output-text ",
  "output-evy func twosum:[]num nums:[]num target:num\n    m:{}num\n    for i := range (len nums)\n        v := nums[i]\n        if has m (sprintf \"%v\" (target - v))\n            return [m[sprintf \"%v\" (target - v)] i]\n        end\n        m[sprintf \"%v\" v] = i\n    end\n    return []\nend\n\nfunc test\n    assertEqual [0 1] (twosum [2 7 11 15] 9)\n    assertEqual [1 2] (twosum [3 2 4] 6)\n    assertEqual [0 1] (twosum [3 3] 6)\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy ",
  "input-python class Node:\n    def __init__(self):\n        self.next = {}\n        self.is_end = False\n\nclass Trie:\n    def __init__(self):\n        self.data = Node()\n\n    def insert(self, word: str) -> None:\n        node = self.data\n        for ch in word:\n            if ch not in node.next:\n                node.next[ch] = Node()\n            node = node.next[ch]\n        node.is_end = True\n\n    def search(self, word: str) -> bool:\n        node = self.data\n        for ch in word:\n            if ch not in node.next:\n                return False\n            node = node.next[ch]\n        return node.is_end\n\n    def startsWith(self, prefix: str) -> bool:\n        node = self.data\n        for ch in prefix:\n            if ch not in node.next:\n                return False\n            node = node.next[ch]\n        return True\n\ndef test():\n    trie = Trie()\n    trie.insert(\"apple\")\n    assert(trie.search(\"apple\"))\n    assert(not trie.search(\"app\"))\n    assert(trie.startsWith(\"app\"))\n    trie.insert(\"app\")\n    assert(trie.search(\"app\"))\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func Node:{}any\n    self:{}any\n    self.next = {}\n    self.isend = false\n    return self\nend\n\nfunc Trie:{}any\n    self:{}any\n    self.data = (Node)\n    return self\nend\n\nfunc insert self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            next[ch] = (Node)\n        end\n        node = next[ch].({}any)\n    end\n    node.isend = true\nend\n\nfunc search:bool self:{}any word:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range word\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return node.isend.(bool)\nend\n\nfunc startsWith:bool self:{}any prefix:string\n    node:{}any\n    node = self.data.({}any)\n    for ch := range prefix\n        next := node.next.({}any)\n        if !(has next ch)\n            return false\n        end\n        node = next[ch].({}any)\n    end\n    return true\nend\n\nfunc test\n    trie := (Trie)\n    insert trie \"apple\"\n    assertEqual true (search trie \"apple\")\n    assertEqual false (search trie \"app\")\n    assertEqual true (startsWith trie \"app\")\n    insert trie \"app\"\n    assertEqual true (search trie \"app\")\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy ",
  "input-python def contains_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef test():\n    assert contains_duplicate([1, 2, 3, 1])\n    assert not contains_duplicate([1, 2, 3, 4])\n    assert contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2])\n\ntest()",
  "output: ",
  "output-text ",
  "output-evy func containsDuplicate:bool nums:[]num\n    seen := {}\n    for ii := range nums\n        i := sprint ii\n        if has seen i\n            return true\n        end\n        seen[i] = true\n    end\n    return false\nend\n\nfunc test\n    assertEqual true (containsDuplicate [1 2 3 1])\n    assertEqual false (containsDuplicate [1 2 3 4])\n    assertEqual true (containsDuplicate [1 1 1 3 3 4 3 2 4 2])\nend\ntest",
  "input: ",
  "input-text ",
  "input-evy ",
  "input-python ",
  "output: ",
]
# response = model.generate_content(prompt_parts)
# print(response.text)

import os

import os
import shutil

first = 500
def process(inp: str):
    global first
    if first == 0:
      exit(269)
    first -= 1
    txt = model.generate_content(prompt_parts + ["Can you fix this evy code for me?:\n" + inp]).text
    txt = txt.lstrip("```evy")
    txt = txt.rstrip("```")
    return txt


def process2(inp: str):
  global first
  if first == 0:
    exit(269)
  first -= 1
  txt = model.generate_content(prompt_parts + [inp]).text
  return txt

def run(evy: str):
    return True

root_dir = '../Python'  # replace with your directory path
passed_dir = '../passed'
failed_dir = 'failed'


import os
import multiprocessing

import os
import multiprocessing

def process_file(file_path, passed_dir):
    """Processes a single Python file and runs it with evy."""

    evy_file = os.path.join(passed_dir, os.path.basename(file_path)).replace(".py", ".evy")
    if os.path.exists(evy_file):  # Skip if already processed
        return

    try:
        with open(file_path, 'r') as f:
            content = f.read()
            processed_content = process(content)  # Your processing logic here
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return  # Skip to the next file in case of errors

    try:
        with open(evy_file, 'w') as ff:
            ff.write(processed_content)

        code = os.system("evy run " + evy_file)
        status = "passed" if code == 0 else "failed"
        print(f"{status}: {evy_file}")
        os.system(f"mv {evy_file} {status}_{evy_file}")
    except Exception as e:
        print(f"Error running/moving {evy_file}: {e}")


prompts = ["Reverse the elements of an array",
"Find the maximum element in an array",
"Find the minimum element in an array",
"Calculate the sum of all elements in an array",
"Find the average of all elements in an array",
"Determine if an array is sorted in ascending order",
"Determine if an array is sorted in descending order",
"Remove duplicates from a sorted array",
"Remove duplicates from an unsorted array",
"Find the second largest element in an array",
"Find the second smallest element in an array",
"Rotate an array to the left by k positions",
"Rotate an array to the right by k positions",
"Find the missing number in an array of consecutive integers",
"Find the majority element in an array (appears more than n/2 times)",
"Merge two sorted arrays into one sorted array",
"Reverse a string",
"Check if a string is a palindrome",
"Find the length of a string without using built-in functions",
"Count the number of vowels in a string",
"Count the number of consonants in a string",
"Remove all spaces from a string",
"Convert a string to lowercase",
"Convert a string to uppercase",
"Check if two strings are anagrams",
"Find the first non-repeating character in a string",
"Concatenate two strings without using built-in functions",
"Reverse a singly linked list",
"Find the middle element of a linked list",
"Remove duplicates from a sorted linked list",
"Remove duplicates from an unsorted linked list",
"Check if a linked list is a palindrome",
"Merge two sorted linked lists into one sorted linked list",
"Find the nth node from the end of a linked list",
"Detect a cycle in a linked list",
"Reverse a linked list in groups of k",
"Implement a stack using an array",
"Implement a stack using a linked list",
"Check if a given expression has balanced parentheses",
"Evaluate a postfix expression",
"Implement a queue using two stacks",
"Sort a stack using another stack",
"Implement a queue using an array",
"Implement a queue using a linked list",
"Generate binary numbers from 1 to n using a queue",
"Reverse the first k elements of a queue",
"Implement a stack using two queues",
"Traverse a binary tree in preorder",
"Traverse a binary tree in inorder",
"Traverse a binary tree in postorder",
"Find the height of a binary tree",
"Find the maximum element in a binary tree",
"Find the minimum element in a binary tree",
"Check if a binary tree is a binary search tree",
"Insert a node into a binary search tree",
"Delete a node from a binary search tree",
"Find the lowest common ancestor of two nodes in a binary tree",
"Find the inorder successor of a node in a binary search tree",
"Find the level order traversal of a binary tree",
"Implement bubble sort",
"Implement selection sort",
"Implement insertion sort",
"Implement merge sort",
"Implement quick sort",
"Implement linear search",
"Implement binary search",
"Find the greatest common divisor (GCD) of two numbers",
"Find the least common multiple (LCM) of two numbers",
"Implement the Fibonacci sequence",
"Check if a number is prime",
"Generate prime numbers up to n",
"Find all factors of a number",
"Calculate the factorial of a number",
"Convert a decimal number to binary",
"Convert a binary number to decimal",
"Implement a hash table",
"Implement a trie",
"Implement a graph (adjacency list or matrix)",
"Implement depth-first search (DFS)",
"Implement breadth-first search (BFS)",
"Find the shortest path in a graph (Dijkstra's algorithm)",
"Find the minimum spanning tree of a graph (Prim's or Kruskal's algorithm)", ]

import hashlib; hash_string = lambda s: hashlib.sha256(s.encode('utf-8')).hexdigest()

# datasetcreate.py translate --python=directory --output=processed/leetcode

if __name__ == '__main__':
  for prompt in prompts:#[5:]:
    outp = process2("input-text "+prompt)
    filename = hash_string(prompt)[:10]+".evy"
    with open("synthetic/"+filename, "w") as f:
      f.write(f"//{prompt}\n")
      f.write(outp)
      code = os.system("evy run " + "synthetic/"+filename)
      status = "passed" if code == 0 else "failed"
      print(f"{status}: {filename}")
      if status == "passed":
        os.system(f"mv synthetic/{filename} synthetic/passed/{filename}")


if __name__ == '__mains__':


    root_dir = '../leetcode-out'  # Replace with your actual root directory
    passed_dir = '../leetcode-out/passed2'  # Replace with your desired output directory

    py_files = []
    for root, dirs, files in os.walk(root_dir):
        for file in files:
            if file.endswith('.evy') and file not in correct:
                py_files.append(os.path.join(root, file))
    for file in py_files:
      process_file(file, passed_dir)
    # with multiprocessing.Pool() as pool:
    #     pool.starmap(process_file, [(file, passed_dir) for file in py_files])

                # if run(processed_content):
                #     shutil.copy(file_path, passed_dir)
                # else:
                #     shutil.copy(file_path, failed_dir)

