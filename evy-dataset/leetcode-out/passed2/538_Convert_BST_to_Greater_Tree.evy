
func convertBST:{}any root:{}any
    total := 0
    node := root
    stack := []
    while (len stack) > 0 or node != {}
        while node != {}
            stack = stack + [node]
            node = node.right
        end
        node = stack[-1]
        stack = stack[:-1]
        total = total + node.val
        node.val = total
        node = node.left
    end
    return root
end

func Node:{}any val:num left:{}any right:{}any
    self:{}any
    self.val = val
    self.left = left
    self.right = right
    return self
end

func test
    // Test case 1
    root1 := (Node 5 {} {})
    root1.left = (Node 2 {} {})
    root1.right = (Node 13 {} {})
    root1.left.left = (Node 1 {} {})
    root1.left.right = (Node 3 {} {})
    root1.right.left = (Node 12 {} {})
    root1.right.right = (Node 14 {} {})
    result1 := convertBST root1
    assert 18 (result1.val)
    assert 20 (result1.left.val)
    assert 13 (result1.right.val)
    assert 21 (result1.left.left.val)
    assert 23 (result1.left.right.val)
    assert 14 (result1.right.left.val)
    assert 14 (result1.right.right.val)

    // Test case 2
    root2 := (Node 5 {} {})
    root2.left = (Node 2 {} {})
    root2.right = (Node 13 {} {})
    root2.left.left = (Node 1 {} {})
    root2.left.right = (Node 3 {} {})
    result2 := convertBST root2
    assert 18 (result2.val)
    assert 20 (result2.left.val)
    assert 13 (result2.right.val)
    assert 21 (result2.left.left.val)
    assert 23 (result2.left.right.val)
end
test
