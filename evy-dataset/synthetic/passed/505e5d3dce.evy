//Implement a queue using a linked list

func Node:{}any
    self:{}any
    self.val = 0
    self.next = {}
    return self
end

func Queue:{}any
    self:{}any
    self.front = {}
    self.rear = {}
    return self
end

func enqueue self:{}any val:num
    newNode := (Node)
    newNode.val = val
    if self.rear == {}
        self.front = newNode
        self.rear = newNode
    else
        self.rear.next = newNode
        self.rear = newNode
    end
end

func dequeue:num self:{}any
    if self.front == {}
        return -1
    end
    val := self.front.val
    self.front = self.front.next
    if self.front == {}
        self.rear = {}
    end
    return val
end

func peek:num self:{}any
    if self.front == {}
        return -1
    end
    return self.front.val
end

func empty:bool self:{}any
    return self.front == {}
end

    q := (Queue)
    assert true (q.empty)
    enqueue q 1
    enqueue q 2
    enqueue q 3
    assert 1 (q.peek)
    assert 1 (q.dequeue)
    assert 2 (q.peek)
    assert 2 (q.dequeue)
    assert 3 (q.peek)
    assert 3 (q.dequeue)
    assert true (q.empty)

