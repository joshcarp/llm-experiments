
func subarraySum:num nums:[]num k:num
    sumMap:{}num
    sumMap["0"] = 1
    count := 0
    currSum := 0
    for n := range nums
        currSum = currSum + n
        if has sumMap (sprintf "%v" (currSum - k))
            count = count + sumMap[(sprintf "%v" (currSum - k))]
        end
        if has sumMap (sprintf "%v" currSum)
            sumMap[(sprintf "%v" currSum)] = sumMap[(sprintf "%v" currSum)] + 1
        else
            sumMap[(sprintf "%v" currSum)] = 1
        end
    end
    return count
end

func test
    assert 2 (subarraySum [1 1 1] 2)
    assert 2 (subarraySum [1 2 3] 3)
    assert 1 (subarraySum [1 2 3] 4)
    assert 0 (subarraySum [1 2 3] 5)
end
test
