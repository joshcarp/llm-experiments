
func Node:{}any
    self:{}any
    self.data := 0
    self.next_node := {}
    return self
end

func LinkedList:{}any
    self:{}any
    self.head := {}
    for i := range ints
        self.append i
    end
    return self
end

func __iter__:Iterator[num] self:{}any
    node := self.head.({}any)
    while node != {}
        yield node.data.(num)
        node = node.next_node.({}any)
    end
end

func __len__:num self:{}any
    count := 0
    for _ := range self
        count = count + 1
    end
    return count
end

func __str__:string self:{}any
    result := ""
    for node := range self
        result = result + (sprint node) + " -> "
    end
    return result[:-4]
end

func append self:{}any data:num
    if self.head == {}
        self.head = (Node)
        self.head.data = data
        return
    end
    node := self.head.({}any)
    while node.next_node != {}
        node = node.next_node.({}any)
    end
    node.next_node = (Node)
    node.next_node.data = data
end

func reverse_k_nodes self:{}any group_size:num
    if self.head == {} or self.head.next_node == {}
        return
    end
    length := len self
    dummy_head := (Node)
    dummy_head.next_node = self.head
    previous_node := dummy_head
    while length >= group_size
        current_node := previous_node.next_node.({}any)
        next_node := current_node.next_node.({}any)
        for range 1 (group_size - 1)
            if next_node == {}
                return
            end
            current_node.next_node = next_node.next_node
            next_node.next_node = previous_node.next_node
            previous_node.next_node = next_node
            next_node = current_node.next_node
        end
        previous_node = current_node
        length = length - group_size
    end
    self.head = dummy_head.next_node
end

func test
    ll := (LinkedList [1 2 3 4 5])
    print (sprintf "Original Linked List: %v\n" ll)
    k := 2
    reverse_k_nodes ll k
    print (sprintf "After reversing groups of size %v: %v\n" k ll)
end
test
