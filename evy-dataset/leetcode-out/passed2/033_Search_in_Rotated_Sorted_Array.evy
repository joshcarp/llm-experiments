
func search:num nums:[]num target:num
    // binary search
    // if start < mid, then left part is sorted
    // if mid < end, then right part is sorted
    func get:num start:num end:num
        if start > end
            return -1
        end
        mid := floor (start + end) / 2
        if nums[mid] == target
            return mid
        else if nums[mid] >= nums[start] // First half is sorted
            if target >= nums[start] and target < nums[mid]
                return get start (mid - 1)
            else
                return get (mid + 1) end
        else if nums[mid] <= nums[end] // Second half is sorted
            if target > nums[mid] and target <= nums[end]
                return get (mid + 1) end
            else
                return get start (mid - 1)
        end
    end
    return get 0 (len nums - 1)
end

func test
    assert 4 (search [4 5 6 7 0 1 2] 0)
    assert -1 (search [4 5 6 7 0 1 2] 3)
    assert 0 (search [1] 1)
    assert 0 (search [1 3] 1)
    assert 1 (search [1 3] 3)
end
test
