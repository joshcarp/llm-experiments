// 3. Longest Substring Without Repeating Characters
// Solved
// Medium
// Topics
// Companies
// Given a string s, find the length of the longest
// substring without repeating characters.
// Example 1:
// Input: s = "abcabcbb"
// Output: 3
// Explanation: The answer is "abc", with the length of 3.
// Example 2:
// Input: s = "bbbbb"
// Output: 1
// Explanation: The answer is "b", with the length of 1.
// Example 3:
// Input: s = "pwwkew"
// Output: 3
// Explanation: The answer is "wke", with the length of 3.
// Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
// Constraints:
// 0 <= s.length <= 5 * 104
// s consists of English letters, digits, symbols and spaces.

func lengthOfLongestSubstring:num s:string
    seen:{}num
    longestsubstring := 0
    startIdx := 0
    for i := range (len s)
        elem := s[i]
        if has seen elem
            startIdx = max startIdx (seen[elem] + 1)
        end
        seen[elem] = i
        longestsubstring = max longestsubstring (i - startIdx + 1)
    end
    return longestsubstring
end

func test
    assertEqual 3 (lengthOfLongestSubstring "abcabcbb")
    assertEqual 1 (lengthOfLongestSubstring "bbbbb")
    assertEqual 3 (lengthOfLongestSubstring "pwwkew")
end
