
func BinaryTreeNode:{}any
    self:{}any
    self.data := 0
    self.leftChild:{}any = {}
    self.rightChild:{}any = {}
    return self
end

func insert:{}any node:{}any newValue:num
    if node == {}
        node = (BinaryTreeNode newValue)
        return node
    end
    if newValue < node.data
        node.leftChild = insert node.leftChild newValue
    else
        node.rightChild = insert node.rightChild newValue
    end
    return node
end

func inorder:[]num node:{}any
    if node != {}
        inorderArray := inorder node.leftChild
        inorderArray = inorderArray + [node.data]
        inorderArray = inorderArray + inorder node.rightChild
    else
        inorderArray := []
    end
    return inorderArray
end

func makeTree:{}any
    root := insert {} 15
    insert root 10
    insert root 25
    insert root 6
    insert root 14
    insert root 20
    insert root 60
    return root
end

func main
    root := makeTree
    print "Printing values of binary search tree in Inorder Traversal."
    print inorder root
end

func test
    assert [6 10 14 15 20 25 60] (inorder (makeTree))
end
test

test
main
