
func Node:{}any data:any
    self:{}any
    self.data = data
    self.next = {}
    return self
end

func LinkedStack:{}any
    self:{}any
    self.top = {}
    return self
end

func __iter__ self:{}any
    node:{}any
    node = self.top
    while node != {}
        yield node.data
        node = node.next
    end
end

func __str__ self:{}any
    return (join [sprint item for item in self] "->")
end

func __len__ self:{}any
    return (len (tuple (iter self)))
end

func isEmpty:bool self:{}any
    return self.top == {}
end

func push self:{}any item:any
    node := (Node item)
    if !(isEmpty self)
        node.next = self.top
    end
    self.top = node
end

func pop:any self:{}any
    if (isEmpty self)
        panic "pop from empty stack"
    end
    popNode:{}any
    popNode = self.top
    self.top = self.top.next
    return popNode.data
end

func peek:any self:{}any
    if (isEmpty self)
        panic "peek from empty stack"
    end
    return self.top.data
end

func clear self:{}any
    self.top = {}
end

func test
    stack := (LinkedStack)
    assert true==(isEmpty stack)
    push stack 5
    push stack 9
    push stack "python"
    assert false==(isEmpty stack)
    assert "python"==(pop stack)
    push stack "algorithms"
    assert "algorithms"==(pop stack)
    assert 9==(pop stack)
    assert 5==(pop stack)
    assert true==(isEmpty stack)
    stack = (LinkedStack)
    push stack "c"
    push stack "b"
    push stack "a"
    assert "a->b->c"==(sprint stack)
    stack = (LinkedStack)
    assert 0==(len stack)
    push stack "c"
    push stack "b"
    push stack "a"
    assert 3==(len stack)
    stack = (LinkedStack)
    assert true==(isEmpty stack)
    push stack 1
    assert false==(isEmpty stack)
    stack = (LinkedStack)
    push stack "Python"
    push stack "Java"
    push stack "C"
    assert "C->Java->Python"==(sprint stack)
    stack = (LinkedStack)
    assert "Python"==(peek stack)
    push stack "Java"
    push stack "C"
    assert "Python"==(peek stack)
    stack = (LinkedStack)
    push stack "Java"
    push stack "C"
    push stack "Python"
    assert "Python->C->Java"==(sprint stack)
    clear stack
    assert 0==(len stack)
end
test
