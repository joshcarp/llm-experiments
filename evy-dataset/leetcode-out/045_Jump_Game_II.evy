
func jump:num nums:[]num
    if (len nums) <= 1
        return 0
    end
    end := 0 + nums[0]
    start := 0
    step := 1
    maxDis := 0 + nums[0]
    while end < (len nums) - 1
        for i := range (start + 1) (end + 1)
            maxDis = max maxDis (nums[i] + i)
        end
        start = end
        end = maxDis
        step = step + 1
    end
    return step
end

func test
    assert 2 (jump [2 3 1 1 4])
    assert 2 (jump [2 3 0 1 4])
    assert 1 (jump [1])
    assert 0 (jump [])
end
test
// output:
//line 6 column 5: missing return
//line 9 column 19: unknown variable name "nums"
//line 9 column 23: invalid inferred declaration for "maxDis"
//line 10 column 11: unexpected "end"
//line 11 column 37: unexpected "end"
//line 11 column 37: expected ")", got "end"
//line 11 column 37: range cannot be empty
//line 11 column 9: at least one statement is required here
//line 12 column 13: unknown variable name "maxDis"
//line 13 column 9: unexpected input "end"
//line 14 column 17: unexpected "end"
//line 15 column 9: unexpected input "end"
//line 17 column 5: unexpected input "end"
//line 18 column 12: return statement not allowed here
//line 19 column 1: unexpected input "end"
//line 20 column 1: unreachable code
//line 27 column 1: unreachable code
