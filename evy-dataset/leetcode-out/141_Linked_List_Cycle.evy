
func ListNode:{}any
    self:{}any
    self.val := 0
    self.next := {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func hasCycle:bool self:{}any head:{}any
    try
        fast := head.next.next.({}any)
        slow := head.next.({}any)
        while fast != slow
            fast = fast.next.next.({}any)
            slow = slow.next.({}any)
        end
        return true
    except
        return false
    end
end

func test
    head := (ListNode)
    head.val = 1
    head.next = (ListNode)
    head.next.val = 2
    head.next.next = head
    sol := (Solution)
    assert true==(hasCycle sol head)
end
test
// output:
//line 4 column 14: expected "=", got ":="
//line 5 column 15: expected "=", got ":="
//line 15 column 5: unknown function "try"
//line 16 column 26: field access with "." expects map type, found any
//line 16 column 27: invalid inferred declaration for "fast"
//line 18 column 15: unknown variable name "fast"
//line 19 column 13: unknown variable name "fast"
//line 23 column 5: unknown function "except"
//line 24 column 9: unreachable code
//line 14 column 20: "self" declared but not used
//line 26 column 1: unexpected input "end"
//line 32 column 14: field access with "." expects map type, found any
//line 33 column 14: field access with "." expects map type, found any
