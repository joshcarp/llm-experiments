
func canCompleteCircuit:[]num gas:[]num cost:[]num
    ls := len gas
    begin := 0
    end := ls - 1
    curr := gas[end] - cost[end]
    while begin < end
        if curr >= 0
            curr = curr + gas[begin] - cost[begin]
            begin = begin + 1
        else
            end = end - 1
            curr = curr + gas[end] - cost[end]
        end
    end
    if curr >= 0
        return end
    else
        return -1
    end
end

func test
    assert 3 (canCompleteCircuit [1 2 3 4 5] [3 4 5 1 2])
    assert -1 (canCompleteCircuit [2 3 4] [3 4 3])
    assert 0 (canCompleteCircuit [1 2 3] [2 1 1])
end
test
// output:
//line 2 column 41: "cost" declared but not used
//line 3 column 5: "ls" declared but not used
//line 4 column 5: "begin" declared but not used
//line 5 column 5: missing return
//line 6 column 13: unknown variable name "gas"
//line 6 column 16: invalid inferred declaration for "curr"
//line 7 column 11: unknown variable name "begin"
//line 8 column 12: unknown variable name "curr"
//line 9 column 13: unknown variable name "curr"
//line 10 column 13: unknown variable name "begin"
//line 9 column 13: at least one statement is required here
//line 12 column 13: at least one statement is required here
//line 13 column 13: unknown variable name "curr"
//line 15 column 5: unexpected input "end"
//line 16 column 8: unknown variable name "curr"
//line 17 column 16: unexpected "end"
//line 17 column 16: return statement not allowed here
//line 19 column 16: return statement not allowed here
//line 21 column 1: unexpected input "end"
//line 22 column 1: unreachable code
//line 28 column 1: unreachable code
