
func Node:{}any
    self:{}any
    self.val = 0
    self.left = {}
    self.right = {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func binaryTreePaths:string self:{}any root:{}any
    if root == {}
        return ""
    end
    paths := []
    self.get_path paths [] root
    res := ""
    for p := range paths
        res = res + (join p "->")
    end
    return res
end

func get_path self:{}any result:string path:[]string node:{}any
    if node.left == {} and node.right == {}
        result = result + [path + [sprint node.val]]
        return
    end
    path = path + [sprint node.val]
    if node.left != {}
        self.get_path result path node.left
    end
    if node.right != {}
        self.get_path result path node.right
    end
end

func test
    root := (Node)
    root.val = 1
    root.left = (Node)
    root.left.val = 2
    root.right = (Node)
    root.right.val = 3
    root.left.left = (Node)
    root.left.left.val = 5
    sol := (Solution)
    assert "1->2->5 1->3" (sol.binaryTreePaths root)
end
test
