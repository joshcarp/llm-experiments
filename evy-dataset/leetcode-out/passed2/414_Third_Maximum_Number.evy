
func thirdMax:num nums:[]num
    seen := {}
    pq := []
    for n := range nums
        if !(has seen (sprint n))
            pq = pq + [n]
            seen[sprint n] = true
            if (len pq) > 3
                pq = pq[1:]
                del seen (sprint pq[0])
            end
        end
    end
    total := (len seen)
    while (total < 3) and (total > 1)
        total = total - 1
    end
    sort pq true
    return pq[0]
end

func test
    assert 1 (thirdMax [1 2 3])
    assert 2 (thirdMax [2 2 3 1])
    assert 1 (thirdMax [3 2 1])
    assert 2 (thirdMax [1 2])
    assert 1 (thirdMax [2 1])
    assert 1 (thirdMax [1])
    assert 2 (thirdMax [2 2 2 1])
    assert 1 (thirdMax [1 1 2])
    assert 2 (thirdMax [1 1 2 2])
    assert 1 (thirdMax [1 1 2 2 3])
    assert 2 (thirdMax [1 1 2 2 3 3])
    assert 1 (thirdMax [1 1 2 2 3 3 4])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14])
    assert 1 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15])
    assert 2 (thirdMax [1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15])
end
