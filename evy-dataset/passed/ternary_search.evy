
// This is the precision for this function which can be altered.
// It is recommended for users to keep this number greater than or equal to 10.
precision := 10

// This is the linear search that will occur after the search space has become smaller.
func lin_search:num left:num right:num array:[]any target:any
    for i := range left right
        if array[i] == target
            return i
        end
    end
    return -1
end

func ite_ternary_search:num array:[]any target:any
    left := 0
    right := (len array) - 1
    while left <= right
        if right - left < precision
            return lin_search left right array target
        end
        one_third := (left + right) / 3 + 1
        two_third := 2 * (left + right) / 3 + 1
        if array[one_third] == target
            return one_third
        else if array[two_third] == target
            return two_third
        else if target < array[one_third]
            right = one_third - 1
        else if array[two_third] < target
            left = two_third + 1
        else
            left = one_third + 1
            right = two_third - 1
        end
    end
    return -1
end

func rec_ternary_search:num left:num right:num array:[]any target:any
    if left < right
        if right - left < precision
            return lin_search left right array target
        end
        one_third := (left + right) / 3 + 1
        two_third := 2 * (left + right) / 3 + 1
        if array[one_third] == target
            return one_third
        else if array[two_third] == target
            return two_third
        else if target < array[one_third]
            return rec_ternary_search left (one_third - 1) array target
        else if array[two_third] < target
            return rec_ternary_search (two_third + 1) right array target
        else
            return rec_ternary_search (one_third + 1) (two_third - 1) array target
        end
    else
        return -1
    end
end

func test
    test_list := [0 1 2 8 13 17 19 32 42]
    assert -1 (ite_ternary_search test_list 3)
    assert 4 (ite_ternary_search test_list 13)
    assert 0 (ite_ternary_search [4 5 6 7] 4)
    assert -1 (ite_ternary_search [4 5 6 7] -10)
    assert 0 (ite_ternary_search [-18 2] -18)
    assert 0 (ite_ternary_search [5] 5)
    assert 1 (ite_ternary_search ["a" "c" "d"] "c")
    assert -1 (ite_ternary_search ["a" "c" "d"] "f")
    assert -1 (ite_ternary_search [] 1)
    assert 0 (ite_ternary_search [.1 .4 -.1] .1)
    assert -1 (rec_ternary_search 0 (len test_list) test_list 3)
    assert 8 (rec_ternary_search 4 (len test_list) test_list 42)
    assert 0 (rec_ternary_search 0 2 [4 5 6 7] 4)
    assert -1 (rec_ternary_search 0 3 [4 5 6 7] -10)
    assert 0 (rec_ternary_search 0 1 [-18 2] -18)
    assert 0 (rec_ternary_search 0 1 [5] 5)
    assert 1 (rec_ternary_search 0 2 ["a" "c" "d"] "c")
    assert -1 (rec_ternary_search 0 2 ["a" "c" "d"] "f")
    assert -1 (rec_ternary_search 0 0 [] 1)
    assert 0 (rec_ternary_search 0 3 [.1 .4 -.1] .1)
end
test

user_input := read "Enter numbers separated by comma:\n"
collection := []
for item := range (split user_input ",")
    collection = collection + [str2num item]
end
assert collection == (sort collection) (sprintf "List must be ordered.\n%v." collection)
target := str2num (read "Enter the number to be found in the list:\n")
result1 := ite_ternary_search collection target
result2 := rec_ternary_search 0 (len collection) collection target
if result2 != -1
    print (sprintf "Iterative search: %v found at positions: %v\n" target result1)
    print (sprintf "Recursive search: %v found at positions: %v\n" target result2)
else
    print "Not found"
end
