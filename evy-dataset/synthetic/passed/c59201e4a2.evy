//Implement a stack using a linked list

func Node:{}any
    self:{}any
    self.data = 0
    self.next = {}
    return self
end

func Stack:{}any
    self:{}any
    self.top = {}
    return self
end

func push self:{}any data:num
    newNode := (Node)
    newNode.data = data
    newNode.next = self.top.({}any)
    self.top = newNode
end

func pop:num self:{}any
    if self.top.({}any) == {}
        return -1
    end
    node := self.top.({}any)
    self.top = node.next.({}any)
    return node.data.(num)
end

func peek:num self:{}any
    if self.top.({}any) == {}
        return -1
    end
    return self.top.({}any).data.(num)
end

func isEmpty:bool self:{}any
    return self.top.({}any) == {}
end

    stack := (Stack)
    assert true (stack.isEmpty)
    stack.push 10
    stack.push 20
    stack.push 30
    assert 30 (stack.peek)
    assert 30 (stack.pop)
    assert 20 (stack.peek)
    assert 20 (stack.pop)
    assert 10 (stack.peek)
    assert 10 (stack.pop)
    assert true (stack.isEmpty)

