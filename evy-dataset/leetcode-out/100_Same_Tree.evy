
func TreeNode:{}any
    self:{}any
    self.val = 0
    self.left = {}
    self.right = {}
    return self
end

func isSameTree:bool p:{}any q:{}any
    if p == q
        return true
    end
    try
        left := true
        right := true
        if (has p "val") and (has q "val") and p["val"] == q["val"]
            left = isSameTree p["left"] q["left"]
            right = isSameTree p["right"] q["right"]
            return (left and right)
        end
    catch
        return false
    end
    return false
end

func test
    p := (TreeNode)
    q := (TreeNode)
    p["val"] = 1
    p["left"] = (TreeNode)
    p["right"] = (TreeNode)
    p["left"]["val"] = 2
    p["right"]["val"] = 3
    q["val"] = 1
    q["left"] = (TreeNode)
    q["right"] = (TreeNode)
    q["left"]["val"] = 2
    q["right"]["val"] = 3
    assert true==(isSameTree p q)
    p["left"]["val"] = 4
    assert false==(isSameTree p q)
end
// output:
//line 14 column 5: unknown function "try"
//line 18 column 32: "isSameTree" takes 1st argument of type {}any, found any
//line 18 column 42: "isSameTree" takes 2nd argument of type {}any, found any
//line 19 column 33: "isSameTree" takes 1st argument of type {}any, found any
//line 19 column 44: "isSameTree" takes 2nd argument of type {}any, found any
//line 22 column 5: unknown function "catch"
//line 25 column 12: return statement not allowed here
//line 26 column 1: unexpected input "end"
//line 27 column 1: unreachable code
//line 34 column 14: only array, string and map type can be indexed, found any
//line 35 column 15: only array, string and map type can be indexed, found any
//line 39 column 14: only array, string and map type can be indexed, found any
//line 40 column 15: only array, string and map type can be indexed, found any
//line 42 column 14: only array, string and map type can be indexed, found any
