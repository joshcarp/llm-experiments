//Implement a queue using two stacks

func Queue:{}any
    self:{}any
    self.inputStack := []
    self.outputStack := []
    return self
end

func push self:{}any x:any
    self.inputStack = self.inputStack + [x]
end

func pop:any self:{}any
    if (len self.outputStack) == 0
        while (len self.inputStack) > 0
            self.outputStack = self.outputStack + [self.inputStack[0]]
            self.inputStack = self.inputStack[1:]
        end
    end
    return self.outputStack[0]
end

func peek:any self:{}any
    if (len self.outputStack) == 0
        while (len self.inputStack) > 0
            self.outputStack = self.outputStack + [self.inputStack[0]]
            self.inputStack = self.inputStack[1:]
        end
    end
    return self.outputStack[-1]
end

func empty:bool self:{}any
    return (len self.inputStack) == 0 and (len self.outputStack) == 0
end

    queue := (Queue)
    push queue 1
    push queue 2
    push queue 3
    assert 1 (peek queue)
    assert 1 (pop queue)
    assert 2 (peek queue)
    assert 2 (pop queue)
    assert 3 (peek queue)
    assert 3 (pop queue)
    assert true (empty queue)

