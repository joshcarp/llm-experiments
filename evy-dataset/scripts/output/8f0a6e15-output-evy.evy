
func paths_of_length:num graph:map adjList:map length:num
    paths := 0
    visited := {}
    visited["0"] = true
    paths_of_length_helper graph adjList visited "0" length paths
    return paths
end

func paths_of_length_helper graph:map adjList:map visited:map node:string length:num paths:num
    if length == 0
        paths = paths + 1
        return paths
    end
    for neighbor := range adjList[node]
        if !(has visited neighbor)
            visited[neighbor] = true
            paths = paths + (paths_of_length_helper graph adjList visited neighbor length-1 0)
            del visited[neighbor]
        end
    end
    return paths
end

graph := {
    "0": ["1" "2"]
    "1": ["0" "3"]
    "2": ["0" "3"]
    "3": ["1" "2"]
}
adjList := {
    "0": ["1" "2"]
    "1": ["0" "3"]
    "2": ["0" "3"]
    "3": ["1" "2"]
}
length := 2
paths := paths_of_length graph adjList length
print paths // Prints: 2
     
