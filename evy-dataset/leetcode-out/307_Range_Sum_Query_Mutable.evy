
func NumArray:{}any nums:[]num
    self:{}any
    self.ls := len nums
    self.tree := [0] * (self.ls * 2)
    self.buildTree nums
    return self
end

func buildTree self:{}any nums:[]num
    i := self.ls
    j := 0
    while i < (2 * self.ls)
        self.tree[i] = nums[j]
        i = i + 1
        j = j + 1
    end
    for i := range (self.ls - 1) 1 -1
        self.tree[i] = self.tree[(i * 2)] + self.tree[(i * 2) + 1]
    end
end

func update self:{}any i:num val:num
    i = i + self.ls
    self.tree[i] = val
    while i > 0
        left := right := i
        if i % 2 == 0
            right = i + 1
        else
            left = i - 1
        end
        self.tree[floor i/2] = self.tree[left] + self.tree[right]
        i = floor i/2
    end
end

func sumRange:num self:{}any i:num j:num
    res := 0
    i = i + self.ls
    j = j + self.ls
    while i <= j
        if i % 2 == 1
            res = res + self.tree[i]
            i = i + 1
        end
        if j % 2 == 0
            res = res + self.tree[j]
            j = j - 1
        end
        i = floor i/2
        j = floor j/2
    end
    return res
end

func test
    nums := [1 2 3 4 5 6 7 8 9 10]
    numArray := (NumArray nums)
    assert 15 (numArray.sumRange 0 2)
    assert 15 (numArray.sumRange 0 5)
    assert 40 (numArray.sumRange 3 8)
    numArray.update 1 10
    assert 25 (numArray.sumRange 0 2)
    assert 25 (numArray.sumRange 0 5)
    assert 50 (numArray.sumRange 3 8)
end
test
// output:
//line 4 column 13: expected "=", got ":="
//line 5 column 15: expected "=", got ":="
//line 5 column 33: mismatched type for *: any, num
//line 5 column 22: array repetition ("*") takes num on right, found any
//line 6 column 20: expected "=", got identifier
//line 6 column 24: unexpected end of line
//line 13 column 18: mismatched type for *: num, any
//line 13 column 13: mismatched type for <: any, num
//line 14 column 18: only array, string and map type can be indexed, found any
//line 15 column 15: mismatched type for +: any, num
//line 18 column 29: mismatched type for -: any, num
//line 18 column 38: range with more than one argument must be num, found any
//line 19 column 18: only array, string and map type can be indexed, found any
//line 10 column 27: "nums" declared but not used
//line 21 column 1: unexpected input "end"
//line 24 column 11: mismatched type for +: num, any
//line 25 column 14: only array, string and map type can be indexed, found any
//line 27 column 17: unknown variable name "right"
//line 27 column 23: invalid inferred declaration for "left"
//line 29 column 13: unknown variable name "right"
//line 29 column 13: at least one statement is required here
//line 31 column 13: unknown variable name "left"
//line 31 column 13: at least one statement is required here
//line 33 column 18: only array, string and map type can be indexed, found any
//line 23 column 30: "val" declared but not used
//line 40 column 11: mismatched type for +: num, any
//line 41 column 11: mismatched type for +: num, any
//line 44 column 34: only array, string and map type can be indexed, found any
//line 48 column 34: only array, string and map type can be indexed, found any
//line 60 column 34: expected ")", got ""
//line 60 column 34: expected end of line, found 0
//line 61 column 34: expected ")", got ""
//line 61 column 34: expected end of line, found 0
//line 62 column 34: expected ")", got ""
//line 62 column 34: expected end of line, found 3
//line 63 column 21: expected "=", got ""
//line 64 column 34: expected ")", got ""
//line 64 column 34: expected end of line, found 0
//line 65 column 34: expected ")", got ""
//line 65 column 34: expected end of line, found 0
//line 66 column 34: expected ")", got ""
//line 66 column 34: expected end of line, found 3
