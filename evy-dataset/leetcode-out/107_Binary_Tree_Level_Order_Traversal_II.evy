
func TreeNode:{}any
    self:{}any
    self.val = 0
    self.left = {}
    self.right = {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func levelOrderBottom:any self:{}any root:{}any
    if root == {}
        return []
    end
    stack := [[root]]
    res := []
    while (len stack) > 0
        top := stack[-1].({}any)
        stack = stack[:-1]
        res = [([t.val for t in top])] + res
        temp := []
        for node := range top
            if node.left != {}
                temp = temp + [node.left]
            end
            if node.right != {}
                temp = temp + [node.right]
            end
        end
        if (len temp) > 0
            stack = stack + [temp]
        end
    end
    return res
end

func test
    root := (TreeNode)
    root.val = 3
    root.left = (TreeNode)
    root.left.val = 9
    root.right = (TreeNode)
    root.right.val = 20
    root.right.left = (TreeNode)
    root.right.left.val = 15
    root.right.right = (TreeNode)
    root.right.right.val = 7
    sol := (Solution)
    assert [[3] [20 9] [15 7]] (levelOrderBottom sol root)
end
// output:
//line 22 column 25: value of type assertion must be of type any, not []{}any
//line 24 column 18: unknown variable name "t"
//line 24 column 19: expected ")", got "."
//line 27 column 20: field access with "." expects map type, found string
//line 28 column 36: field access with "." expects map type, found string
//line 28 column 17: at least one statement is required here
//line 30 column 20: field access with "." expects map type, found string
//line 31 column 36: field access with "." expects map type, found string
//line 31 column 17: at least one statement is required here
//line 35 column 27: mismatched type for +: [][]{}any, [][]any
//line 15 column 27: "self" declared but not used
//line 45 column 14: field access with "." expects map type, found any
//line 47 column 15: field access with "." expects map type, found any
//line 48 column 15: field access with "." expects map type, found any
//line 49 column 15: field access with "." expects map type, found any
//line 50 column 15: field access with "." expects map type, found any
//line 51 column 15: field access with "." expects map type, found any
