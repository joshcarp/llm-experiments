
func Solution:{}any
    self:{}any
    self.memo := [0 1]
    return self
end

func fib:num self:{}any N:num
    if N < (len self.memo)
        return self.memo[N]
    end
    for i := range (len self.memo) (N + 1)
        self.memo = self.memo + [self.memo[i - 1] + self.memo[i - 2]]
    end
    return self.memo[N]
end

func test
    sol := (Solution)
    assert 0 (fib sol 0)
    assert 1 (fib sol 1)
    assert 1 (fib sol 2)
    assert 2 (fib sol 3)
    assert 3 (fib sol 4)
    assert 5 (fib sol 5)
    assert 8 (fib sol 6)
    assert 13 (fib sol 7)
    assert 21 (fib sol 8)
    assert 34 (fib sol 9)
    assert 55 (fib sol 10)
end
test
// output:
//line 4 column 15: expected "=", got ":="
//line 10 column 25: only array, string and map type can be indexed, found any
//line 10 column 16: expected return value of type num, found ILLEGAL
//line 13 column 43: only array, string and map type can be indexed, found any
//line 13 column 9: at least one statement is required here
//line 12 column 9: "i" declared but not used
//line 15 column 21: only array, string and map type can be indexed, found any
//line 15 column 12: expected return value of type num, found ILLEGAL
