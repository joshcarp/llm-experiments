
func TreeLinkNode:{}any
    self:{}any
    self.val = 0
    self.left = {}
    self.right = {}
    self.next = {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func connect self:{}any root:{}any
    if root == {}
        return
    end
    nodes := [root]
    while (len nodes) != 0
        nextStep := []
        last := {}
        for node:{}any := range nodes
            if last != {}
                last.next = node
            end
            if (has node "left") and node["left"].({}any) != {}
                nextStep = nextStep + [node["left"]]
            end
            if (has node "right") and node["right"].({}any) != {}
                nextStep = nextStep + [node["right"]]
            end
            last = node
        end
        nodes = nextStep
    end
end

func test
    root := (TreeLinkNode)
    root.val = 1
    root.left = (TreeLinkNode)
    root.left.val = 2
    root.right = (TreeLinkNode)
    root.right.val = 3
    root.left.left = (TreeLinkNode)
    root.left.left.val = 4
    root.left.right = (TreeLinkNode)
    root.left.right.val = 5
    root.right.left = (TreeLinkNode)
    root.right.left.val = 6
    root.right.right = (TreeLinkNode)
    root.right.right.val = 7
    sol := (Solution)
    connect sol root
    assert true==(sol.next.({}any) == root.left)
    assert true==(root.left.next.({}any) == root.right)
    assert true==(root.right.next.({}any) == root.left.left)
    assert true==(root.left.left.next.({}any) == root.left.right)
    assert true==(root.left.right.next.({}any) == root.right.left)
    assert true==(root.right.left.next.({}any) == root.right.right)
end
test
// output:
//line 24 column 17: expected ":=", got ":"
//line 24 column 18: expected "range", got "{"
//line 26 column 29: unknown variable name "node"
//line 26 column 17: at least one statement is required here
//line 28 column 21: unknown variable name "node"
//line 28 column 26: "has" takes 2 arguments, found 0
//line 28 column 26: expected ")", got ""
//line 29 column 40: unknown variable name "node"
//line 29 column 17: at least one statement is required here
//line 31 column 21: unknown variable name "node"
//line 31 column 26: "has" takes 2 arguments, found 0
//line 31 column 26: expected ")", got ""
//line 32 column 40: unknown variable name "node"
//line 32 column 17: at least one statement is required here
//line 34 column 20: unknown variable name "node"
//line 36 column 17: unknown variable name "nextStep"
//line 16 column 14: "self" declared but not used
//line 38 column 1: unexpected input "end"
//line 44 column 14: field access with "." expects map type, found any
//line 46 column 15: field access with "." expects map type, found any
//line 47 column 14: field access with "." expects map type, found any
//line 48 column 14: field access with "." expects map type, found any
//line 49 column 14: field access with "." expects map type, found any
//line 50 column 14: field access with "." expects map type, found any
//line 51 column 15: field access with "." expects map type, found any
//line 52 column 15: field access with "." expects map type, found any
//line 53 column 15: field access with "." expects map type, found any
//line 54 column 15: field access with "." expects map type, found any
//line 57 column 36: mismatched type for ==: {}any, any
//line 58 column 28: field access with "." expects map type, found any
//line 58 column 29: expected ")", got identifier
//line 58 column 29: expected end of line, found next
//line 59 column 29: field access with "." expects map type, found any
//line 59 column 30: expected ")", got identifier
//line 59 column 30: expected end of line, found next
//line 60 column 28: field access with "." expects map type, found any
//line 60 column 29: expected ")", got identifier
//line 60 column 29: expected end of line, found left
//line 61 column 28: field access with "." expects map type, found any
//line 61 column 29: expected ")", got identifier
//line 61 column 29: expected end of line, found right
//line 62 column 29: field access with "." expects map type, found any
//line 62 column 30: expected ")", got identifier
//line 62 column 30: expected end of line, found left
