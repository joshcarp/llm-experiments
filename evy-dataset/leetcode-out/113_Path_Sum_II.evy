
func TreeNode:{}any
    self:{}any
    self.val = 0
    self.left = {}
    self.right = {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func pathSum self:{}any root:{}any sum:num
    res := []
    if root == {}
        return res
    end
    if sum == root.val.(num) and root.left == {} and root.right == {}
        return [[root.val.(num)]]
    end
    leftRes := self.pathSum root.left.(any) (sum - root.val.(num))
    rightRes := self.pathSum root.right.(any) (sum - root.val.(num))
    for t := range leftRes + rightRes
        res = res + [[root.val.(num)] + t]
    end
    return res
end

func test
    root := (TreeNode)
    root.val = 5
    root.left = (TreeNode)
    root.left.val = 4
    root.left.left = (TreeNode)
    root.left.left.val = 11
    root.left.left.left = (TreeNode)
    root.left.left.left.val = 7
    root.left.left.right = (TreeNode)
    root.left.left.right.val = 2
    root.left.right = (TreeNode)
    root.left.right.val = 8
    root.left.right.left = (TreeNode)
    root.left.right.left.val = 13
    root.left.right.right = (TreeNode)
    root.left.right.right.val = 4
    root.right = (TreeNode)
    root.right.val = 8
    root.right.left = (TreeNode)
    root.right.left.val = 13
    root.right.left.left = (TreeNode)
    root.right.left.left.val = 5
    root.right.left.right = (TreeNode)
    root.right.left.right.val = 1
    root.right.right = (TreeNode)
    root.right.right.val = 4
    root.right.right.right = (TreeNode)
    root.right.right.right.val = 4
    sol := (Solution)
    assert [[5 4 11 2] [5 8 4 5]] (sol.pathSum root 22)
end
test
// output:
//line 18 column 16: expected no return value, found []any
//line 20 column 44: mismatched type for ==: any, {}
//line 20 column 65: mismatched type for ==: any, {}
//line 21 column 16: expected no return value, found [][]num
//line 23 column 29: expected end of line, found root
//line 24 column 30: expected end of line, found root
//line 25 column 28: unexpected whitespace before "+"
//line 25 column 28: range cannot be empty
//line 25 column 28: unexpected input "+"
//line 26 column 39: unexpected whitespace before "+"
//line 24 column 5: "rightRes" declared but not used
//line 28 column 12: unknown variable name "res"
//line 28 column 12: return statement not allowed here
//line 29 column 1: unexpected input "end"
//line 30 column 1: unreachable code
//line 35 column 14: field access with "." expects map type, found any
//line 36 column 14: field access with "." expects map type, found any
//line 37 column 14: field access with "." expects map type, found any
//line 38 column 14: field access with "." expects map type, found any
//line 39 column 14: field access with "." expects map type, found any
//line 40 column 14: field access with "." expects map type, found any
//line 41 column 14: field access with "." expects map type, found any
//line 42 column 14: field access with "." expects map type, found any
//line 43 column 14: field access with "." expects map type, found any
//line 44 column 14: field access with "." expects map type, found any
//line 45 column 14: field access with "." expects map type, found any
//line 46 column 14: field access with "." expects map type, found any
//line 47 column 14: field access with "." expects map type, found any
//line 49 column 15: field access with "." expects map type, found any
//line 50 column 15: field access with "." expects map type, found any
//line 51 column 15: field access with "." expects map type, found any
//line 52 column 15: field access with "." expects map type, found any
//line 53 column 15: field access with "." expects map type, found any
//line 54 column 15: field access with "." expects map type, found any
//line 55 column 15: field access with "." expects map type, found any
//line 56 column 15: field access with "." expects map type, found any
//line 57 column 15: field access with "." expects map type, found any
//line 58 column 15: field access with "." expects map type, found any
//line 59 column 15: field access with "." expects map type, found any
//line 61 column 48: expected ")", got identifier
//line 61 column 48: expected end of line, found root
//line 63 column 1: unreachable code
