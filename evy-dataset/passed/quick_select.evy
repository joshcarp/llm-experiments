
func _partition:[]num data:[]num pivot:num
    less:[]num
    equal:[]num
    greater:[]num
    for element := range data
        if element < pivot
            less = less + [element]
        else if element > pivot
            greater = greater + [element]
        else
            equal = equal + [element]
        end
    end
    return [less equal greater]
end

func quickSelect:num items:[]num index:num
    if index >= (len items) or index < 0
        return -1
    end
    pivot := items[rand (len items)]
    count := 0
    smaller:[]num
    equal:[]num
    larger:[]num
    [smaller equal larger] = _partition items pivot
    count = len equal
    m := len smaller
    if m <= index and index < m + count
        return pivot
    else if m > index
        return quickSelect smaller index
    else
        return quickSelect larger (index - (m + count))
    end
end

func test
    assert 54 (quickSelect [2 4 5 7 899 54 32] 5)
    assert 4 (quickSelect [2 4 5 7 899 54 32] 1)
    assert 4 (quickSelect [5 4 3 2] 2)
    assert 7 (quickSelect [3 5 7 10 2 12] 3)
end
test
