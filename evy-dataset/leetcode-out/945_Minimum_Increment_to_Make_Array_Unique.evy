
func minIncrementForUnique:num A:[]num
    if A == []
        return 0
    end
    res := 0
    numSet := {}
    duplicate := []
    sort A true
    left := A[0]
    right := A[-1]
    holes := right - left + 1
    for v := range A
        if has numSet (sprint v)
            duplicate = duplicate + [v]
        else
            numSet[sprint v] = true
        end
    end
    holes = holes - (len numSet)
    for hole := range left+1 right
        if holes == 0 or (len duplicate) == 0
            break
        end
        if !(has numSet (sprint hole)) and hole > duplicate[0]
            res = res + (hole - duplicate[0])
            duplicate = duplicate[1:]
            holes = holes - 1
        end
    end
    while (len duplicate) != 0
        right = right + 1
        res = res + (right - duplicate[0])
        duplicate = duplicate[1:]
    end
    return res
end

func test
    assert 6 (minIncrementForUnique [3 2 1 2 1 7])
    assert 1 (minIncrementForUnique [0 2 2])
end
test
// output:
//line 9 column 5: unknown function "sort"
//line 15 column 35: mismatched type for +: []any, []num
//line 25 column 49: mismatched type for >: num, any
//line 26 column 31: mismatched type for -: num, any
//line 33 column 28: mismatched type for -: num, any
