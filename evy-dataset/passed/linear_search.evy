
// This is pure Evy implementation of linear search algorithm
//
// For doctests run following command:
// evy -m doctest -v linear_search.evy
//
// For manual testing run:
// evy linear_search.evy
func linear_search:num sequence:[]num target:num
    for index := range sequence
        if sequence[index] == target
            return index
        end
    end
    return -1
end

func rec_linear_search:num sequence:[]num low:num high:num target:num
    if not (0 <= high < (len sequence) and 0 <= low < (len sequence))
        panic "Invalid upper or lower bound!"
    end
    if high < low
        return -1
    end
    if sequence[low] == target
        return low
    end
    if sequence[high] == target
        return high
    end
    return rec_linear_search sequence low+1 high-1 target
end

func test
    assert 0 (linear_search [0 5 7 10 15] 0)
    assert 4 (linear_search [0 5 7 10 15] 15)
    assert 1 (linear_search [0 5 7 10 15] 5)
    assert -1 (linear_search [0 5 7 10 15] 6)
    assert 0 (rec_linear_search [0 30 500 100 700] 0 4 0)
    assert 4 (rec_linear_search [0 30 500 100 700] 0 4 700)
    assert 1 (rec_linear_search [0 30 500 100 700] 0 4 30)
    assert -1 (rec_linear_search [0 30 500 100 700] 0 4 -6)
end
test

func main
    user_input := read "Enter numbers separated by comma:\n"
    sequence := []
    for item := range (split user_input ",")
        sequence = sequence + [str2num item]
    end
    target := str2num (read "Enter a single number to be found in the list:\n")
    result := linear_search sequence target
    if result != -1
        printf "linear_search(%v, %v) = %v\n" sequence target result
    else
        printf "%v was not found in %v\n" target sequence
    end
end

test
main
