
// A Python implementation of the Median of Medians algorithm
// to select pivots for quick_select, which is efficient for
// calculating the value that would appear in the index of a
// list if it would be sorted, even if it is not already
// sorted. Search in time complexity O(n) at any rank
// deterministically
// https://en.wikipedia.org/wiki/Median_of_medians

func medianOfFive:num arr:[]num
    sort arr
    return arr[floor (len arr)/2]
end

func medianOfMedians:num arr:[]num
    if (len arr) <= 5
        return medianOfFive arr
    end
    medians := []
    i := 0
    while i < (len arr)
        if (i + 4) <= (len arr)
            medians = medians + [medianOfFive (arr[i:].copy())]
        else
            medians = medians + [medianOfFive (arr[i:i + 5].copy())]
        end
        i = i + 5
    end
    return medianOfMedians medians
end

func quickSelect:num arr:[]num target:num
    if target > (len arr)
        return -1
    end
    x := medianOfMedians arr
    left := []
    right := []
    check := false
    for i := range (len arr)
        if arr[i] < x
            left = left + [arr[i]]
        else if arr[i] > x
            right = right + [arr[i]]
        else if arr[i] == x and !check
            check = true
        else
            right = right + [arr[i]]
        end
    end
    rankX := (len left) + 1
    if rankX == target
        answer := x
    else if rankX > target
        answer := quickSelect left target
    else if rankX < target
        answer := quickSelect right (target - rankX)
    end
    return answer
end

print (medianOfFive [5 4 3 2])
