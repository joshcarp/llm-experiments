
func solve_knapsack:num items:[][]num capacity:num
    // Sort items by value/weight ratio in descending order
    items = sort_by_ratio items
    total_value := 0
    remaining_capacity := capacity
    for item := range items
        if remaining_capacity == 0
            break
        end
        weight := item[1]
        value := item[0]
        if weight <= remaining_capacity
            total_value = total_value + value
            remaining_capacity = remaining_capacity - weight
        else
            // Take a fraction of the item
            fraction := remaining_capacity / weight
            total_value = total_value + (value * fraction)
            remaining_capacity = 0
        end
    end
    return total_value
end

func sort_by_ratio:[][]num items:[][]num
    // Bubble sort by value/weight ratio in descending order
    for endIdx := range (len items)-1 0 -1
        for i := range endIdx
            if items[i][0]/items[i][1] < items[i + 1][0]/items[i + 1][1]
                tmp := items[i]
                items[i] = items[i + 1]
                items[i + 1] = tmp
            end
        end
    end
    return items
end

items := [[60 10] [100 20] [120 30]]
capacity := 50
total_value := solve_knapsack items capacity
print total_value // Prints: 240

     
