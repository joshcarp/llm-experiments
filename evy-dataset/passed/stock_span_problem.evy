
// The stock span problem is a financial problem where we have a series of n daily
// price quotes for a stock and we need to calculate span of stock's price for all n days.
//
// The span Si of the stock's price on a given day i is defined as the maximum
// number of consecutive days just before the given day, for which the price of the stock
// on the current day is less than or equal to its price on the given day.
func calculationSpan:void prices:[]num s:[]num
    n := len prices
    // Create a stack and push index of fist element to it
    st := []
    st = st + [0]

    // Span value of first element is always 1
    s[0] = 1

    // Calculate span values for rest of the elements
    for i := range 1 n
        // Pop elements from stack while stack is not
        // empty and top of stack is smaller than price[i]
        while (len st) > 0 and prices[st[0]] <= prices[i]
            st = st[1:]
        end

        // If stack becomes empty, then price[i] is greater
        // than all elements on left of it, i.e. price[0],
        // price[1], ..price[i-1]. Else the price[i]  is
        // greater than elements after top of stack
        if (len st) <= 0
            s[i] = i + 1
        else
            s[i] = i - st[0]
        end

        // Push this element to stack
        st = st + [i]
    end
end

// A utility function to print elements of array
func printArray:void arr:[]num n:num
    for i := range n
        print arr[i] " "
    end
end

// Driver program to test above function
price := [10 4 5 90 120 80]
S := [0] * (len price)

// Fill the span values in array S[]
calculationSpan price S

// Print the calculated span values
printArray S (len price)
