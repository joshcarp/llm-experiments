
func TreeLinkNode:{}any
    self:{}any
    self.val = 0
    self.left = {}
    self.right = {}
    self.next = {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func connect self:{}any root:{}any
    dummyHead := (TreeLinkNode)
    dummyHead.val = -1
    pre := dummyHead
    while root != {}
        if root.left != {}
            pre.next = root.left
            pre = pre.next
        end
        if root.right != {}
            pre.next = root.right
            pre = pre.next
        end
        root = root.next
        if root == {}
            pre = dummyHead
            root = dummyHead.next
            dummyHead.next = {}
        end
    end
end

func test
    root := (TreeLinkNode)
    root.val = 1
    root.left = (TreeLinkNode)
    root.left.val = 2
    root.right = (TreeLinkNode)
    root.right.val = 3
    root.left.left = (TreeLinkNode)
    root.left.left.val = 4
    root.left.right = (TreeLinkNode)
    root.left.right.val = 5
    root.right.left = (TreeLinkNode)
    root.right.left.val = 6
    root.right.right = (TreeLinkNode)
    root.right.right.val = 7
    solution := (Solution)
    connect solution root
    assert true==(solution.next == root.left)
    assert true==(root.left.next == root.right)
    assert true==(root.right.next == root.left.left)
    assert true==(root.left.left.next == root.left.right)
    assert true==(root.left.right.next == root.right.left)
    assert true==(root.right.left.next == root.right.right)
end
test
// output:
//line 21 column 22: mismatched type for !=: any, {}
//line 23 column 13: "pre" accepts values of type {}any, found any
//line 25 column 23: mismatched type for !=: any, {}
//line 27 column 13: "pre" accepts values of type {}any, found any
//line 29 column 9: "root" accepts values of type {}any, found any
//line 32 column 13: "root" accepts values of type {}any, found any
//line 16 column 14: "self" declared but not used
//line 42 column 14: field access with "." expects map type, found any
//line 44 column 15: field access with "." expects map type, found any
//line 45 column 14: field access with "." expects map type, found any
//line 46 column 14: field access with "." expects map type, found any
//line 47 column 14: field access with "." expects map type, found any
//line 48 column 14: field access with "." expects map type, found any
//line 49 column 15: field access with "." expects map type, found any
//line 50 column 15: field access with "." expects map type, found any
//line 51 column 15: field access with "." expects map type, found any
//line 52 column 15: field access with "." expects map type, found any
//line 56 column 28: field access with "." expects map type, found any
//line 56 column 29: expected ")", got identifier
//line 56 column 29: expected end of line, found next
//line 57 column 29: field access with "." expects map type, found any
//line 57 column 30: expected ")", got identifier
//line 57 column 30: expected end of line, found next
//line 58 column 28: field access with "." expects map type, found any
//line 58 column 29: expected ")", got identifier
//line 58 column 29: expected end of line, found left
//line 59 column 28: field access with "." expects map type, found any
//line 59 column 29: expected ")", got identifier
//line 59 column 29: expected end of line, found right
//line 60 column 29: field access with "." expects map type, found any
//line 60 column 30: expected ")", got identifier
//line 60 column 30: expected end of line, found left
