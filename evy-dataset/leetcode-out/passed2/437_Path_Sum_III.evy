
func Node:{}any
    self:{}any
    self.val := 0
    self.left := {}
    self.right := {}
    return self
end

func Solution:{}any
    self:{}any
    self.result := 0
    return self
end

func pathSumHelper self:{}any root:{}any target:num soFar:num cache:{}string
    if root != {}
        complement := soFar + root.val - target
        if has cache (sprintf "%v" complement)
            self.result = self.result + (str2num cache[(sprintf "%v" complement)])
        end
        cache[(sprintf "%v" (soFar + root.val))] = cache[(sprintf "%v" (soFar + root.val))] + 1
        pathSumHelper self root.left target (soFar + root.val) cache
        pathSumHelper self root.right target (soFar + root.val) cache
        cache[(sprintf "%v" (soFar + root.val))] = cache[(sprintf "%v" (soFar + root.val))] - 1
    end
end

func pathSum self:{}any root:{}any sum:num
    self.result = 0
    cache := {sprintf "%v" 0:sprintf "%v" 1}
    pathSumHelper self root sum 0 cache
    return self.result
end

func test
    root := (Node)
    root.val = 10
    root.left = (Node)
    root.left.val = 5
    root.left.left = (Node)
    root.left.left.val = 3
    root.left.right = (Node)
    root.left.right.val = 2
    root.left.right.right = (Node)
    root.left.right.right.val = 1
    root.right = (Node)
    root.right.val = -3
    root.right.right = (Node)
    root.right.right.val = 11
    sol := (Solution)
    assert 3 (pathSum sol root 8)
end
test
