
func ListNode:{}any
    self:{}any
    self.val := 0
    self.next := {}
    return self
end

func Solution:{}any
    self:{}any
    return self
end

func rotateRight self:{}any head:{}any k:num
    if head == {} or k == 0
        return head
    end
    slow:{}any
    fast:{}any
    slow = head
    fast = head
    length := 1
    while k > 0 and fast.next != {}
        fast = fast.next
        length = length + 1
        k = k - 1
    end
    if k != 0
        k = (k + length - 1) % length
        return rotateRight self head k
    else
        while fast.next != {}
            fast = fast.next
            slow = slow.next
        end
        return rotate self head fast slow
    end
end

func rotate self:{}any head:{}any fast:{}any slow:{}any
    fast.next = head
    head = slow.next
    slow.next = {}
    return head
end

func test
    head := (ListNode)
    head.val = 1
    head.next = (ListNode)
    head.next.val = 2
    head.next.next = (ListNode)
    head.next.next.val = 3
    head.next.next.next = (ListNode)
    head.next.next.next.val = 4
    head.next.next.next.next = (ListNode)
    head.next.next.next.next.val = 5
    sol := (Solution)
    result := rotateRight sol head 2
    print result
end
test
// output:
//line 4 column 14: expected "=", got ":="
//line 5 column 15: expected "=", got ":="
//line 16 column 16: expected no return value, found {}any
//line 23 column 31: mismatched type for !=: any, {}
//line 24 column 9: "fast" accepts values of type {}any, found any
//line 32 column 25: mismatched type for !=: any, {}
//line 33 column 13: "fast" accepts values of type {}any, found any
//line 34 column 13: "slow" accepts values of type {}any, found any
//line 42 column 5: "head" accepts values of type {}any, found any
//line 44 column 12: expected no return value, found {}any
//line 40 column 13: "self" declared but not used
//line 51 column 14: field access with "." expects map type, found any
//line 52 column 14: field access with "." expects map type, found any
//line 53 column 14: field access with "." expects map type, found any
//line 54 column 14: field access with "." expects map type, found any
//line 55 column 14: field access with "." expects map type, found any
//line 56 column 14: field access with "." expects map type, found any
//line 57 column 14: field access with "." expects map type, found any
//line 59 column 37: invalid declaration, function "rotateRight" has no return value
//line 60 column 11: unknown variable name "result"
