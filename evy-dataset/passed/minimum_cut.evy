
func bfs:bool graph:[][]num s:num t:num parent:[]num
    visited := [false] * (len graph)
    queue := [s]
    visited[s] = true

    while (len queue) > 0
        u := queue[0]
        queue = queue[1:]
        for ind := range (len graph[u])
            if visited[ind] == false and graph[u][ind] > 0
                queue = queue + [ind]
                visited[ind] = true
                parent[ind] = u
            end
        end
    end
    return visited[t]
end

func mincut:[]num graph:[][]num source:num sink:num
    parent := [-1] * (len graph)
    max_flow := 0
    res := []
    temp := graph[:]
    while bfs graph source sink parent
        path_flow := float("Inf")
        s := sink

        while s != source
            path_flow = min path_flow graph[parent[s]][s]
            s = parent[s]
        end

        max_flow = max_flow + path_flow
        v := sink

        while v != source
            u := parent[v]
            graph[u][v] = graph[u][v] - path_flow
            graph[v][u] = graph[v][u] + path_flow
            v = parent[v]
        end
    end
    for i := range (len graph)
        for j := range (len graph[0])
            if graph[i][j] == 0 and temp[i][j] > 0
                res = res + [(i j)]
            end
        end
    end
    return res
end

test_graph := [
    [0 16 13 0 0 0]
    [0 0 10 12 0 0]
    [0 4 0 0 14 0]
    [0 0 9 0 0 20]
    [0 0 0 7 0 4]
    [0 0 0 0 0 0]
]

print (mincut test_graph 0 5)
